// Generated from browser-cypher/Cypher.g4 by ANTLR 4.5.3
// jshint ignore: start

module.exports = function ( antlr4, CypherListener) {

  var grammarFileName = "Cypher.g4";

  var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003s\u0480\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u00c0\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u00cc\n\u0005\f\u0005\u000e\u0005\u00cf\u000b\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u00d5\n\u0006",
    "\f\u0006\u000e\u0006\u00d8\u000b\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00e1",
    "\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u00ec\n\b\u0003\t\u0003\t\u0005\t\u00f0\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00f8\n\t\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u0108\n\u000b\f\u000b\u000e\u000b\u010b\u000b\u000b\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u0119\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0123\n\u000e\f\u000e",
    "\u000e\u000e\u0126\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u0137\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u013d\n\u0010\f\u0010\u000e\u0010\u0140\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010\u0148\n\u0010\f\u0010\u000e\u0010\u014b\u000b\u0010\u0005\u0010",
    "\u014d\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0157\n\u0011",
    "\f\u0011\u000e\u0011\u015a\u000b\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u0160\n\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0167\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u016d\n\u0013",
    "\u0005\u0013\u016f\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u017b\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0181\n\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0186\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u018b\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u0193\n\u0016\f\u0016\u000e",
    "\u0016\u0196\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0007\u0016\u019e\n\u0016\f\u0016\u000e\u0016",
    "\u01a1\u000b\u0016\u0005\u0016\u01a3\n\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u01ac\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u01b7",
    "\n\u0018\f\u0018\u000e\u0018\u01ba\u000b\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u01c9\n\u001b\u0005\u001b\u01cb\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01d4",
    "\n\u001d\f\u001d\u000e\u001d\u01d7\u000b\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u01e0\n\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0007",
    " \u01e8\n \f \u000e \u01eb\u000b \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u01f1\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u01f8\n!\u0003",
    "!\u0003!\u0003!\u0005!\u01fd\n!\u0003!\u0003!\u0003!\u0005!\u0202\n",
    "!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u020f\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0005#\u021b\n#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u0223\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u022d\n#\u0003#\u0003#\u0003#\u0005#\u0232\n",
    "#\u0003$\u0003$\u0005$\u0236\n$\u0003$\u0005$\u0239\n$\u0003$\u0005",
    "$\u023c\n$\u0003$\u0003$\u0005$\u0240\n$\u0005$\u0242\n$\u0003$\u0005",
    "$\u0245\n$\u0003$\u0003$\u0003%\u0003%\u0005%\u024b\n%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0005&\u0252\n&\u0003&\u0003&\u0003&\u0007&\u0257",
    "\n&\f&\u000e&\u025a\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0260",
    "\n\'\f\'\u000e\'\u0263\u000b\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0005)\u026b\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u0271\n)\u0003",
    "*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0007-\u027f\n-\f-\u000e-\u0282\u000b-\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0007.\u028a\n.\f.\u000e.\u028d\u000b.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u0295\n/\f/\u000e/\u0298",
    "\u000b/\u00030\u00030\u00030\u00030\u00070\u029e\n0\f0\u000e0\u02a1",
    "\u000b0\u00030\u00030\u00031\u00031\u00031\u00031\u00071\u02a9\n1\f",
    "1\u000e1\u02ac\u000b1\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00072\u02b9\n2\f2\u000e2\u02bc\u000b",
    "2\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00073\u02ce\n3\f3\u000e",
    "3\u02d1\u000b3\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u02d9",
    "\n4\f4\u000e4\u02dc\u000b4\u00035\u00035\u00075\u02e0\n5\f5\u000e5\u02e3",
    "\u000b5\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u02f0\n6\u00036\u00036\u00056\u02f4\n6\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00056\u030b\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00076\u031c\n6\f",
    "6\u000e6\u031f\u000b6\u00037\u00037\u00037\u00077\u0324\n7\f7\u000e",
    "7\u0327\u000b7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00078\u033e\n8\f8\u000e8\u0341\u000b8\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u0357\n8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u037f\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0005",
    "9\u039d\n9\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0006",
    ";\u03a7\n;\r;\u000e;\u03a8\u0003<\u0003<\u0003<\u0003<\u0005<\u03af",
    "\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u03bc\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007>\u03c3",
    "\n>\f>\u000e>\u03c6\u000b>\u0005>\u03c8\n>\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u03d5\n@\u0003",
    "@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u03e0",
    "\nA\u0003B\u0003B\u0003C\u0003C\u0005C\u03e6\nC\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0007D\u03f9\nD\fD\u000eD\u03fc\u000b",
    "D\u0005D\u03fe\nD\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0005E\u0406",
    "\nE\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0006F\u040f\n",
    "F\rF\u000eF\u0410\u0003G\u0003G\u0003H\u0003H\u0003H\u0005H\u0418\n",
    "H\u0003I\u0003I\u0003J\u0005J\u041d\nJ\u0003J\u0003J\u0003K\u0005K\u0422",
    "\nK\u0003K\u0003K\u0003L\u0005L\u0427\nL\u0003L\u0003L\u0003M\u0003",
    "M\u0003M\u0003N\u0003N\u0005N\u0430\nN\u0003N\u0005N\u0433\nN\u0003",
    "O\u0003O\u0003O\u0003P\u0006P\u0439\nP\rP\u000eP\u043a\u0003Q\u0006",
    "Q\u043e\nQ\rQ\u000eQ\u043f\u0003R\u0006R\u0443\nR\rR\u000eR\u0444\u0003",
    "S\u0003S\u0003T\u0003T\u0003U\u0003U\u0005U\u044d\nU\u0003V\u0005V\u0450",
    "\nV\u0003V\u0003V\u0006V\u0454\nV\rV\u000eV\u0455\u0003V\u0003V\u0005",
    "V\u045a\nV\u0003V\u0005V\u045d\nV\u0003V\u0003V\u0003W\u0005W\u0462",
    "\nW\u0003W\u0007W\u0465\nW\fW\u000eW\u0468\u000bW\u0003W\u0003W\u0003",
    "W\u0003X\u0003X\u0003Y\u0007Y\u0470\nY\fY\u000eY\u0473\u000bY\u0003",
    "Z\u0006Z\u0476\nZ\rZ\u000eZ\u0477\u0003[\u0003[\u0003\\\u0003\\\u0003",
    "]\u0003]\u0003]\u0002\u0002^\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u0002\u000e\u0003",
    "\u0002VW\u0003\u0002XY\u0003\u0002\u0010\u0011\u0004\u0002\u000b\u000b",
    "\u001d\u001d\u0003\u0002 (\u0003\u0002 )\u0004\u0002 &))\u0003\u0002",
    "*+\u0004\u0002Bnqq\u0004\u0002\u0018\u0018,/\u0004\u0002\u0019\u0019",
    "03\u0004\u0002\u0011\u00114>\u04b8\u0002\u00ba\u0003\u0002\u0002\u0002",
    "\u0004\u00c3\u0003\u0002\u0002\u0002\u0006\u00c5\u0003\u0002\u0002\u0002",
    "\b\u00c7\u0003\u0002\u0002\u0002\n\u00d0\u0003\u0002\u0002\u0002\f\u00e0",
    "\u0003\u0002\u0002\u0002\u000e\u00eb\u0003\u0002\u0002\u0002\u0010\u00ef",
    "\u0003\u0002\u0002\u0002\u0012\u00f9\u0003\u0002\u0002\u0002\u0014\u0101",
    "\u0003\u0002\u0002\u0002\u0016\u0118\u0003\u0002\u0002\u0002\u0018\u011a",
    "\u0003\u0002\u0002\u0002\u001a\u011e\u0003\u0002\u0002\u0002\u001c\u0136",
    "\u0003\u0002\u0002\u0002\u001e\u014c\u0003\u0002\u0002\u0002 \u014e",
    "\u0003\u0002\u0002\u0002\"\u015f\u0003\u0002\u0002\u0002$\u016e\u0003",
    "\u0002\u0002\u0002&\u017a\u0003\u0002\u0002\u0002(\u017c\u0003\u0002",
    "\u0002\u0002*\u01a2\u0003\u0002\u0002\u0002,\u01ab\u0003\u0002\u0002",
    "\u0002.\u01ad\u0003\u0002\u0002\u00020\u01bb\u0003\u0002\u0002\u0002",
    "2\u01bf\u0003\u0002\u0002\u00024\u01ca\u0003\u0002\u0002\u00026\u01cc",
    "\u0003\u0002\u0002\u00028\u01d0\u0003\u0002\u0002\u0002:\u01df\u0003",
    "\u0002\u0002\u0002<\u01e1\u0003\u0002\u0002\u0002>\u01f0\u0003\u0002",
    "\u0002\u0002@\u01f2\u0003\u0002\u0002\u0002B\u0205\u0003\u0002\u0002",
    "\u0002D\u0231\u0003\u0002\u0002\u0002F\u0233\u0003\u0002\u0002\u0002",
    "H\u024a\u0003\u0002\u0002\u0002J\u024c\u0003\u0002\u0002\u0002L\u025b",
    "\u0003\u0002\u0002\u0002N\u0264\u0003\u0002\u0002\u0002P\u026a\u0003",
    "\u0002\u0002\u0002R\u0272\u0003\u0002\u0002\u0002T\u0274\u0003\u0002",
    "\u0002\u0002V\u0276\u0003\u0002\u0002\u0002X\u0278\u0003\u0002\u0002",
    "\u0002Z\u0283\u0003\u0002\u0002\u0002\\\u028e\u0003\u0002\u0002\u0002",
    "^\u029f\u0003\u0002\u0002\u0002`\u02a4\u0003\u0002\u0002\u0002b\u02ad",
    "\u0003\u0002\u0002\u0002d\u02bd\u0003\u0002\u0002\u0002f\u02d2\u0003",
    "\u0002\u0002\u0002h\u02e1\u0003\u0002\u0002\u0002j\u02e6\u0003\u0002",
    "\u0002\u0002l\u0320\u0003\u0002\u0002\u0002n\u037e\u0003\u0002\u0002",
    "\u0002p\u039c\u0003\u0002\u0002\u0002r\u039e\u0003\u0002\u0002\u0002",
    "t\u03a2\u0003\u0002\u0002\u0002v\u03aa\u0003\u0002\u0002\u0002x\u03b0",
    "\u0003\u0002\u0002\u0002z\u03b6\u0003\u0002\u0002\u0002|\u03cc\u0003",
    "\u0002\u0002\u0002~\u03ce\u0003\u0002\u0002\u0002\u0080\u03d8\u0003",
    "\u0002\u0002\u0002\u0082\u03e1\u0003\u0002\u0002\u0002\u0084\u03e5\u0003",
    "\u0002\u0002\u0002\u0086\u03e7\u0003\u0002\u0002\u0002\u0088\u0401\u0003",
    "\u0002\u0002\u0002\u008a\u040a\u0003\u0002\u0002\u0002\u008c\u0412\u0003",
    "\u0002\u0002\u0002\u008e\u0417\u0003\u0002\u0002\u0002\u0090\u0419\u0003",
    "\u0002\u0002\u0002\u0092\u041c\u0003\u0002\u0002\u0002\u0094\u0421\u0003",
    "\u0002\u0002\u0002\u0096\u0426\u0003\u0002\u0002\u0002\u0098\u042a\u0003",
    "\u0002\u0002\u0002\u009a\u0432\u0003\u0002\u0002\u0002\u009c\u0434\u0003",
    "\u0002\u0002\u0002\u009e\u0438\u0003\u0002\u0002\u0002\u00a0\u043d\u0003",
    "\u0002\u0002\u0002\u00a2\u0442\u0003\u0002\u0002\u0002\u00a4\u0446\u0003",
    "\u0002\u0002\u0002\u00a6\u0448\u0003\u0002\u0002\u0002\u00a8\u044c\u0003",
    "\u0002\u0002\u0002\u00aa\u044f\u0003\u0002\u0002\u0002\u00ac\u0461\u0003",
    "\u0002\u0002\u0002\u00ae\u046c\u0003\u0002\u0002\u0002\u00b0\u0471\u0003",
    "\u0002\u0002\u0002\u00b2\u0475\u0003\u0002\u0002\u0002\u00b4\u0479\u0003",
    "\u0002\u0002\u0002\u00b6\u047b\u0003\u0002\u0002\u0002\u00b8\u047d\u0003",
    "\u0002\u0002\u0002\u00ba\u00bb\u0005\u00b0Y\u0002\u00bb\u00bf\u0005",
    "\u0004\u0003\u0002\u00bc\u00bd\u0005\u00b0Y\u0002\u00bd\u00be\u0007",
    "\u0003\u0002\u0002\u00be\u00c0\u0003\u0002\u0002\u0002\u00bf\u00bc\u0003",
    "\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003",
    "\u0002\u0002\u0002\u00c1\u00c2\u0005\u00b0Y\u0002\u00c2\u0003\u0003",
    "\u0002\u0002\u0002\u00c3\u00c4\u0005\u0006\u0004\u0002\u00c4\u0005\u0003",
    "\u0002\u0002\u0002\u00c5\u00c6\u0005\b\u0005\u0002\u00c6\u0007\u0003",
    "\u0002\u0002\u0002\u00c7\u00cd\u0005\n\u0006\u0002\u00c8\u00c9\u0005",
    "\u00b0Y\u0002\u00c9\u00ca\u0005\f\u0007\u0002\u00ca\u00cc\u0003\u0002",
    "\u0002\u0002\u00cb\u00c8\u0003\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002",
    "\u0002\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002",
    "\u0002\u0002\u00ce\t\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002",
    "\u0002\u0002\u00d0\u00d6\u0005\u000e\b\u0002\u00d1\u00d2\u0005\u00b0",
    "Y\u0002\u00d2\u00d3\u0005\u000e\b\u0002\u00d3\u00d5\u0003\u0002\u0002",
    "\u0002\u00d4\u00d1\u0003\u0002\u0002\u0002\u00d5\u00d8\u0003\u0002\u0002",
    "\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002",
    "\u0002\u00d7\u000b\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002",
    "\u0002\u00d9\u00da\u0007B\u0002\u0002\u00da\u00db\u0005\u00b2Z\u0002",
    "\u00db\u00dc\u0007C\u0002\u0002\u00dc\u00dd\u0005\n\u0006\u0002\u00dd",
    "\u00e1\u0003\u0002\u0002\u0002\u00de\u00df\u0007B\u0002\u0002\u00df",
    "\u00e1\u0005\n\u0006\u0002\u00e0\u00d9\u0003\u0002\u0002\u0002\u00e0",
    "\u00de\u0003\u0002\u0002\u0002\u00e1\r\u0003\u0002\u0002\u0002\u00e2",
    "\u00ec\u0005\u0010\t\u0002\u00e3\u00ec\u0005\u0012\n\u0002\u00e4\u00ec",
    "\u0005\u0014\u000b\u0002\u00e5\u00ec\u0005\u0018\r\u0002\u00e6\u00ec",
    "\u0005\u001a\u000e\u0002\u00e7\u00ec\u0005\u001e\u0010\u0002\u00e8\u00ec",
    "\u0005 \u0011\u0002\u00e9\u00ec\u0005$\u0013\u0002\u00ea\u00ec\u0005",
    "&\u0014\u0002\u00eb\u00e2\u0003\u0002\u0002\u0002\u00eb\u00e3\u0003",
    "\u0002\u0002\u0002\u00eb\u00e4\u0003\u0002\u0002\u0002\u00eb\u00e5\u0003",
    "\u0002\u0002\u0002\u00eb\u00e6\u0003\u0002\u0002\u0002\u00eb\u00e7\u0003",
    "\u0002\u0002\u0002\u00eb\u00e8\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003",
    "\u0002\u0002\u0002\u00eb\u00ea\u0003\u0002\u0002\u0002\u00ec\u000f\u0003",
    "\u0002\u0002\u0002\u00ed\u00ee\u0007D\u0002\u0002\u00ee\u00f0\u0005",
    "\u00b2Z\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003",
    "\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007",
    "E\u0002\u0002\u00f2\u00f3\u0005\u00b0Y\u0002\u00f3\u00f7\u00058\u001d",
    "\u0002\u00f4\u00f5\u0005\u00b0Y\u0002\u00f5\u00f6\u00056\u001c\u0002",
    "\u00f6\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f4\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u0011\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u0007F\u0002\u0002\u00fa\u00fb\u0005\u00b0Y\u0002\u00fb",
    "\u00fc\u0005V,\u0002\u00fc\u00fd\u0005\u00b2Z\u0002\u00fd\u00fe\u0007",
    "G\u0002\u0002\u00fe\u00ff\u0005\u00b2Z\u0002\u00ff\u0100\u0005\u0082",
    "B\u0002\u0100\u0013\u0003\u0002\u0002\u0002\u0101\u0102\u0007H\u0002",
    "\u0002\u0102\u0103\u0005\u00b0Y\u0002\u0103\u0109\u0005:\u001e\u0002",
    "\u0104\u0105\u0005\u00b2Z\u0002\u0105\u0106\u0005\u0016\f\u0002\u0106",
    "\u0108\u0003\u0002\u0002\u0002\u0107\u0104\u0003\u0002\u0002\u0002\u0108",
    "\u010b\u0003\u0002\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109",
    "\u010a\u0003\u0002\u0002\u0002\u010a\u0015\u0003\u0002\u0002\u0002\u010b",
    "\u0109\u0003\u0002\u0002\u0002\u010c\u010d\u0007I\u0002\u0002\u010d",
    "\u010e\u0005\u00b2Z\u0002\u010e\u010f\u0007E\u0002\u0002\u010f\u0110",
    "\u0005\u00b2Z\u0002\u0110\u0111\u0005\u001a\u000e\u0002\u0111\u0119",
    "\u0003\u0002\u0002\u0002\u0112\u0113\u0007I\u0002\u0002\u0113\u0114",
    "\u0005\u00b2Z\u0002\u0114\u0115\u0007J\u0002\u0002\u0115\u0116\u0005",
    "\u00b2Z\u0002\u0116\u0117\u0005\u001a\u000e\u0002\u0117\u0119\u0003",
    "\u0002\u0002\u0002\u0118\u010c\u0003\u0002\u0002\u0002\u0118\u0112\u0003",
    "\u0002\u0002\u0002\u0119\u0017\u0003\u0002\u0002\u0002\u011a\u011b\u0007",
    "J\u0002\u0002\u011b\u011c\u0005\u00b0Y\u0002\u011c\u011d\u00058\u001d",
    "\u0002\u011d\u0019\u0003\u0002\u0002\u0002\u011e\u011f\u0007K\u0002",
    "\u0002\u011f\u0124\u0005\u001c\u000f\u0002\u0120\u0121\u0007\u0004\u0002",
    "\u0002\u0121\u0123\u0005\u001c\u000f\u0002\u0122\u0120\u0003\u0002\u0002",
    "\u0002\u0123\u0126\u0003\u0002\u0002\u0002\u0124\u0122\u0003\u0002\u0002",
    "\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125\u001b\u0003\u0002\u0002",
    "\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0127\u0128\u0005\u008aF",
    "\u0002\u0128\u0129\u0007\u0005\u0002\u0002\u0129\u012a\u0005V,\u0002",
    "\u012a\u0137\u0003\u0002\u0002\u0002\u012b\u012c\u0005\u0082B\u0002",
    "\u012c\u012d\u0007\u0005\u0002\u0002\u012d\u012e\u0005V,\u0002\u012e",
    "\u0137\u0003\u0002\u0002\u0002\u012f\u0130\u0005\u0082B\u0002\u0130",
    "\u0131\u0007\u0006\u0002\u0002\u0131\u0132\u0005V,\u0002\u0132\u0137",
    "\u0003\u0002\u0002\u0002\u0133\u0134\u0005\u0082B\u0002\u0134\u0135",
    "\u0005L\'\u0002\u0135\u0137\u0003\u0002\u0002\u0002\u0136\u0127\u0003",
    "\u0002\u0002\u0002\u0136\u012b\u0003\u0002\u0002\u0002\u0136\u012f\u0003",
    "\u0002\u0002\u0002\u0136\u0133\u0003\u0002\u0002\u0002\u0137\u001d\u0003",
    "\u0002\u0002\u0002\u0138\u0139\u0007L\u0002\u0002\u0139\u013e\u0005",
    "V,\u0002\u013a\u013b\u0007\u0004\u0002\u0002\u013b\u013d\u0005V,\u0002",
    "\u013c\u013a\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002",
    "\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u014d\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0007M\u0002\u0002\u0142\u0143\u0005\u00b2Z\u0002\u0143",
    "\u0144\u0007L\u0002\u0002\u0144\u0149\u0005V,\u0002\u0145\u0146\u0007",
    "\u0004\u0002\u0002\u0146\u0148\u0005V,\u0002\u0147\u0145\u0003\u0002",
    "\u0002\u0002\u0148\u014b\u0003\u0002\u0002\u0002\u0149\u0147\u0003\u0002",
    "\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014d\u0003\u0002",
    "\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014c\u0138\u0003\u0002",
    "\u0002\u0002\u014c\u0141\u0003\u0002\u0002\u0002\u014d\u001f\u0003\u0002",
    "\u0002\u0002\u014e\u014f\u0007N\u0002\u0002\u014f\u0150\u0005\u00b2",
    "Z\u0002\u0150\u0158\u0005\"\u0012\u0002\u0151\u0152\u0005\u00b0Y\u0002",
    "\u0152\u0153\u0007\u0004\u0002\u0002\u0153\u0154\u0005\u00b0Y\u0002",
    "\u0154\u0155\u0005\"\u0012\u0002\u0155\u0157\u0003\u0002\u0002\u0002",
    "\u0156\u0151\u0003\u0002\u0002\u0002\u0157\u015a\u0003\u0002\u0002\u0002",
    "\u0158\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002",
    "\u0159!\u0003\u0002\u0002\u0002\u015a\u0158\u0003\u0002\u0002\u0002",
    "\u015b\u015c\u0005\u0082B\u0002\u015c\u015d\u0005L\'\u0002\u015d\u0160",
    "\u0003\u0002\u0002\u0002\u015e\u0160\u0005\u008aF\u0002\u015f\u015b",
    "\u0003\u0002\u0002\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u0160#",
    "\u0003\u0002\u0002\u0002\u0161\u0162\u0007O\u0002\u0002\u0162\u0163",
    "\u0007P\u0002\u0002\u0163\u0164\u0005\u00b2Z\u0002\u0164\u0166\u0005",
    "(\u0015\u0002\u0165\u0167\u00056\u001c\u0002\u0166\u0165\u0003\u0002",
    "\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u016f\u0003\u0002",
    "\u0002\u0002\u0168\u0169\u0007O\u0002\u0002\u0169\u016a\u0005\u00b2",
    "Z\u0002\u016a\u016c\u0005(\u0015\u0002\u016b\u016d\u00056\u001c\u0002",
    "\u016c\u016b\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002",
    "\u016d\u016f\u0003\u0002\u0002\u0002\u016e\u0161\u0003\u0002\u0002\u0002",
    "\u016e\u0168\u0003\u0002\u0002\u0002\u016f%\u0003\u0002\u0002\u0002",
    "\u0170\u0171\u0007Q\u0002\u0002\u0171\u0172\u0005\u00b2Z\u0002\u0172",
    "\u0173\u0007P\u0002\u0002\u0173\u0174\u0005\u00b2Z\u0002\u0174\u0175",
    "\u0005(\u0015\u0002\u0175\u017b\u0003\u0002\u0002\u0002\u0176\u0177",
    "\u0007Q\u0002\u0002\u0177\u0178\u0005\u00b2Z\u0002\u0178\u0179\u0005",
    "(\u0015\u0002\u0179\u017b\u0003\u0002\u0002\u0002\u017a\u0170\u0003",
    "\u0002\u0002\u0002\u017a\u0176\u0003\u0002\u0002\u0002\u017b\'\u0003",
    "\u0002\u0002\u0002\u017c\u0180\u0005*\u0016\u0002\u017d\u017e\u0005",
    "\u00b2Z\u0002\u017e\u017f\u0005.\u0018\u0002\u017f\u0181\u0003\u0002",
    "\u0002\u0002\u0180\u017d\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002",
    "\u0002\u0002\u0181\u0185\u0003\u0002\u0002\u0002\u0182\u0183\u0005\u00b2",
    "Z\u0002\u0183\u0184\u00050\u0019\u0002\u0184\u0186\u0003\u0002\u0002",
    "\u0002\u0185\u0182\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002",
    "\u0002\u0186\u018a\u0003\u0002\u0002\u0002\u0187\u0188\u0005\u00b2Z",
    "\u0002\u0188\u0189\u00052\u001a\u0002\u0189\u018b\u0003\u0002\u0002",
    "\u0002\u018a\u0187\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002",
    "\u0002\u018b)\u0003\u0002\u0002\u0002\u018c\u0194\u0007\u0007\u0002",
    "\u0002\u018d\u018e\u0005\u00b0Y\u0002\u018e\u018f\u0007\u0004\u0002",
    "\u0002\u018f\u0190\u0005\u00b0Y\u0002\u0190\u0191\u0005,\u0017\u0002",
    "\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u018d\u0003\u0002\u0002\u0002",
    "\u0193\u0196\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002\u0002\u0002",
    "\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u01a3\u0003\u0002\u0002\u0002",
    "\u0196\u0194\u0003\u0002\u0002\u0002\u0197\u019f\u0005,\u0017\u0002",
    "\u0198\u0199\u0005\u00b0Y\u0002\u0199\u019a\u0007\u0004\u0002\u0002",
    "\u019a\u019b\u0005\u00b0Y\u0002\u019b\u019c\u0005,\u0017\u0002\u019c",
    "\u019e\u0003\u0002\u0002\u0002\u019d\u0198\u0003\u0002\u0002\u0002\u019e",
    "\u01a1\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a3\u0003\u0002\u0002\u0002\u01a1",
    "\u019f\u0003\u0002\u0002\u0002\u01a2\u018c\u0003\u0002\u0002\u0002\u01a2",
    "\u0197\u0003\u0002\u0002\u0002\u01a3+\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0005V,\u0002\u01a5\u01a6\u0005\u00b2Z\u0002\u01a6\u01a7\u0007",
    "G\u0002\u0002\u01a7\u01a8\u0005\u00b2Z\u0002\u01a8\u01a9\u0005\u0082",
    "B\u0002\u01a9\u01ac\u0003\u0002\u0002\u0002\u01aa\u01ac\u0005V,\u0002",
    "\u01ab\u01a4\u0003\u0002\u0002\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002",
    "\u01ac-\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007R\u0002\u0002\u01ae",
    "\u01af\u0005\u00b2Z\u0002\u01af\u01b0\u0007S\u0002\u0002\u01b0\u01b1",
    "\u0005\u00b2Z\u0002\u01b1\u01b8\u00054\u001b\u0002\u01b2\u01b3\u0007",
    "\u0004\u0002\u0002\u01b3\u01b4\u0005\u00b0Y\u0002\u01b4\u01b5\u0005",
    "4\u001b\u0002\u01b5\u01b7\u0003\u0002\u0002\u0002\u01b6\u01b2\u0003",
    "\u0002\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003",
    "\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9/\u0003",
    "\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007",
    "T\u0002\u0002\u01bc\u01bd\u0005\u00b2Z\u0002\u01bd\u01be\u0005V,\u0002",
    "\u01be1\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007U\u0002\u0002\u01c0",
    "\u01c1\u0005\u00b2Z\u0002\u01c1\u01c2\u0005V,\u0002\u01c23\u0003\u0002",
    "\u0002\u0002\u01c3\u01c4\u0005V,\u0002\u01c4\u01c5\t\u0002\u0002\u0002",
    "\u01c5\u01cb\u0003\u0002\u0002\u0002\u01c6\u01c8\u0005V,\u0002\u01c7",
    "\u01c9\t\u0003\u0002\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c8",
    "\u01c9\u0003\u0002\u0002\u0002\u01c9\u01cb\u0003\u0002\u0002\u0002\u01ca",
    "\u01c3\u0003\u0002\u0002\u0002\u01ca\u01c6\u0003\u0002\u0002\u0002\u01cb",
    "5\u0003\u0002\u0002\u0002\u01cc\u01cd\u0007Z\u0002\u0002\u01cd\u01ce",
    "\u0005\u00b2Z\u0002\u01ce\u01cf\u0005V,\u0002\u01cf7\u0003\u0002\u0002",
    "\u0002\u01d0\u01d5\u0005:\u001e\u0002\u01d1\u01d2\u0007\u0004\u0002",
    "\u0002\u01d2\u01d4\u0005:\u001e\u0002\u01d3\u01d1\u0003\u0002\u0002",
    "\u0002\u01d4\u01d7\u0003\u0002\u0002\u0002\u01d5\u01d3\u0003\u0002\u0002",
    "\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d69\u0003\u0002\u0002",
    "\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d8\u01d9\u0005\u0082B",
    "\u0002\u01d9\u01da\u0005\u00b0Y\u0002\u01da\u01db\u0007\u0005\u0002",
    "\u0002\u01db\u01dc\u0005\u00b0Y\u0002\u01dc\u01dd\u0005<\u001f\u0002",
    "\u01dd\u01e0\u0003\u0002\u0002\u0002\u01de\u01e0\u0005<\u001f\u0002",
    "\u01df\u01d8\u0003\u0002\u0002\u0002\u01df\u01de\u0003\u0002\u0002\u0002",
    "\u01e0;\u0003\u0002\u0002\u0002\u01e1\u01e2\u0005> \u0002\u01e2=\u0003",
    "\u0002\u0002\u0002\u01e3\u01e9\u0005@!\u0002\u01e4\u01e5\u0005\u00b0",
    "Y\u0002\u01e5\u01e6\u0005B\"\u0002\u01e6\u01e8\u0003\u0002\u0002\u0002",
    "\u01e7\u01e4\u0003\u0002\u0002\u0002\u01e8\u01eb\u0003\u0002\u0002\u0002",
    "\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002",
    "\u01ea\u01f1\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0007\b\u0002\u0002\u01ed\u01ee\u0005> \u0002\u01ee\u01ef",
    "\u0007\t\u0002\u0002\u01ef\u01f1\u0003\u0002\u0002\u0002\u01f0\u01e3",
    "\u0003\u0002\u0002\u0002\u01f0\u01ec\u0003\u0002\u0002\u0002\u01f1?",
    "\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007\b\u0002\u0002\u01f3\u01f7",
    "\u0005\u00b0Y\u0002\u01f4\u01f5\u0005\u0082B\u0002\u01f5\u01f6\u0005",
    "\u00b0Y\u0002\u01f6\u01f8\u0003\u0002\u0002\u0002\u01f7\u01f4\u0003",
    "\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01fc\u0003",
    "\u0002\u0002\u0002\u01f9\u01fa\u0005L\'\u0002\u01fa\u01fb\u0005\u00b0",
    "Y\u0002\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc\u01f9\u0003\u0002",
    "\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u0201\u0003\u0002",
    "\u0002\u0002\u01fe\u01ff\u0005H%\u0002\u01ff\u0200\u0005\u00b0Y\u0002",
    "\u0200\u0202\u0003\u0002\u0002\u0002\u0201\u01fe\u0003\u0002\u0002\u0002",
    "\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002\u0002\u0002",
    "\u0203\u0204\u0007\t\u0002\u0002\u0204A\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0005D#\u0002\u0206\u0207\u0005\u00b0Y\u0002\u0207\u0208\u0005",
    "@!\u0002\u0208C\u0003\u0002\u0002\u0002\u0209\u020a\u0005\u00b4[\u0002",
    "\u020a\u020b\u0005\u00b0Y\u0002\u020b\u020c\u0005\u00b8]\u0002\u020c",
    "\u020e\u0005\u00b0Y\u0002\u020d\u020f\u0005F$\u0002\u020e\u020d\u0003",
    "\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u0003",
    "\u0002\u0002\u0002\u0210\u0211\u0005\u00b0Y\u0002\u0211\u0212\u0005",
    "\u00b8]\u0002\u0212\u0213\u0005\u00b0Y\u0002\u0213\u0214\u0005\u00b6",
    "\\\u0002\u0214\u0232\u0003\u0002\u0002\u0002\u0215\u0216\u0005\u00b4",
    "[\u0002\u0216\u0217\u0005\u00b0Y\u0002\u0217\u0218\u0005\u00b8]\u0002",
    "\u0218\u021a\u0005\u00b0Y\u0002\u0219\u021b\u0005F$\u0002\u021a\u0219",
    "\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b\u021c",
    "\u0003\u0002\u0002\u0002\u021c\u021d\u0005\u00b0Y\u0002\u021d\u021e",
    "\u0005\u00b8]\u0002\u021e\u0232\u0003\u0002\u0002\u0002\u021f\u0220",
    "\u0005\u00b8]\u0002\u0220\u0222\u0005\u00b0Y\u0002\u0221\u0223\u0005",
    "F$\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002",
    "\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0225\u0005\u00b0",
    "Y\u0002\u0225\u0226\u0005\u00b8]\u0002\u0226\u0227\u0005\u00b0Y\u0002",
    "\u0227\u0228\u0005\u00b6\\\u0002\u0228\u0232\u0003\u0002\u0002\u0002",
    "\u0229\u022a\u0005\u00b8]\u0002\u022a\u022c\u0005\u00b0Y\u0002\u022b",
    "\u022d\u0005F$\u0002\u022c\u022b\u0003\u0002\u0002\u0002\u022c\u022d",
    "\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f",
    "\u0005\u00b0Y\u0002\u022f\u0230\u0005\u00b8]\u0002\u0230\u0232\u0003",
    "\u0002\u0002\u0002\u0231\u0209\u0003\u0002\u0002\u0002\u0231\u0215\u0003",
    "\u0002\u0002\u0002\u0231\u021f\u0003\u0002\u0002\u0002\u0231\u0229\u0003",
    "\u0002\u0002\u0002\u0232E\u0003\u0002\u0002\u0002\u0233\u0235\u0007",
    "\n\u0002\u0002\u0234\u0236\u0005\u0082B\u0002\u0235\u0234\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0238\u0003\u0002",
    "\u0002\u0002\u0237\u0239\u0007\u000b\u0002\u0002\u0238\u0237\u0003\u0002",
    "\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023b\u0003\u0002",
    "\u0002\u0002\u023a\u023c\u0005J&\u0002\u023b\u023a\u0003\u0002\u0002",
    "\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u0241\u0003\u0002\u0002",
    "\u0002\u023d\u023f\u0007\u0007\u0002\u0002\u023e\u0240\u0005P)\u0002",
    "\u023f\u023e\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002",
    "\u0240\u0242\u0003\u0002\u0002\u0002\u0241\u023d\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0244\u0003\u0002\u0002\u0002",
    "\u0243\u0245\u0005H%\u0002\u0244\u0243\u0003\u0002\u0002\u0002\u0244",
    "\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246",
    "\u0247\u0007\f\u0002\u0002\u0247G\u0003\u0002\u0002\u0002\u0248\u024b",
    "\u0005\u0086D\u0002\u0249\u024b\u0005\u0088E\u0002\u024a\u0248\u0003",
    "\u0002\u0002\u0002\u024a\u0249\u0003\u0002\u0002\u0002\u024bI\u0003",
    "\u0002\u0002\u0002\u024c\u024d\u0007\r\u0002\u0002\u024d\u0258\u0005",
    "T+\u0002\u024e\u024f\u0005\u00b0Y\u0002\u024f\u0251\u0007\u000e\u0002",
    "\u0002\u0250\u0252\u0007\r\u0002\u0002\u0251\u0250\u0003\u0002\u0002",
    "\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002",
    "\u0002\u0253\u0254\u0005\u00b0Y\u0002\u0254\u0255\u0005T+\u0002\u0255",
    "\u0257\u0003\u0002\u0002\u0002\u0256\u024e\u0003\u0002\u0002\u0002\u0257",
    "\u025a\u0003\u0002\u0002\u0002\u0258\u0256\u0003\u0002\u0002\u0002\u0258",
    "\u0259\u0003\u0002\u0002\u0002\u0259K\u0003\u0002\u0002\u0002\u025a",
    "\u0258\u0003\u0002\u0002\u0002\u025b\u0261\u0005N(\u0002\u025c\u025d",
    "\u0005\u00b0Y\u0002\u025d\u025e\u0005N(\u0002\u025e\u0260\u0003\u0002",
    "\u0002\u0002\u025f\u025c\u0003\u0002\u0002\u0002\u0260\u0263\u0003\u0002",
    "\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002\u0261\u0262\u0003\u0002",
    "\u0002\u0002\u0262M\u0003\u0002\u0002\u0002\u0263\u0261\u0003\u0002",
    "\u0002\u0002\u0264\u0265\u0007\r\u0002\u0002\u0265\u0266\u0005R*\u0002",
    "\u0266O\u0003\u0002\u0002\u0002\u0267\u0268\u0005\u0090I\u0002\u0268",
    "\u0269\u0005\u00b0Y\u0002\u0269\u026b\u0003\u0002\u0002\u0002\u026a",
    "\u0267\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0003\u0002\u0002\u0002\u026c\u0270\u0007\u000f\u0002\u0002\u026d",
    "\u026e\u0005\u00b0Y\u0002\u026e\u026f\u0005\u0090I\u0002\u026f\u0271",
    "\u0003\u0002\u0002\u0002\u0270\u026d\u0003\u0002\u0002\u0002\u0270\u0271",
    "\u0003\u0002\u0002\u0002\u0271Q\u0003\u0002\u0002\u0002\u0272\u0273",
    "\u0005\u00aeX\u0002\u0273S\u0003\u0002\u0002\u0002\u0274\u0275\u0005",
    "\u00aeX\u0002\u0275U\u0003\u0002\u0002\u0002\u0276\u0277\u0005X-\u0002",
    "\u0277W\u0003\u0002\u0002\u0002\u0278\u0280\u0005Z.\u0002\u0279\u027a",
    "\u0005\u00b2Z\u0002\u027a\u027b\u0007[\u0002\u0002\u027b\u027c\u0005",
    "\u00b2Z\u0002\u027c\u027d\u0005Z.\u0002\u027d\u027f\u0003\u0002\u0002",
    "\u0002\u027e\u0279\u0003\u0002\u0002\u0002\u027f\u0282\u0003\u0002\u0002",
    "\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002",
    "\u0002\u0281Y\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002\u0002",
    "\u0002\u0283\u028b\u0005\\/\u0002\u0284\u0285\u0005\u00b2Z\u0002\u0285",
    "\u0286\u0007\\\u0002\u0002\u0286\u0287\u0005\u00b2Z\u0002\u0287\u0288",
    "\u0005\\/\u0002\u0288\u028a\u0003\u0002\u0002\u0002\u0289\u0284\u0003",
    "\u0002\u0002\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003",
    "\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c[\u0003",
    "\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0296\u0005",
    "^0\u0002\u028f\u0290\u0005\u00b2Z\u0002\u0290\u0291\u0007]\u0002\u0002",
    "\u0291\u0292\u0005\u00b2Z\u0002\u0292\u0293\u0005^0\u0002\u0293\u0295",
    "\u0003\u0002\u0002\u0002\u0294\u028f\u0003\u0002\u0002\u0002\u0295\u0298",
    "\u0003\u0002\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0003\u0002\u0002\u0002\u0297]\u0003\u0002\u0002\u0002\u0298\u0296",
    "\u0003\u0002\u0002\u0002\u0299\u029a\u0005\u00b2Z\u0002\u029a\u029b",
    "\u0007^\u0002\u0002\u029b\u029c\u0005\u00b2Z\u0002\u029c\u029e\u0003",
    "\u0002\u0002\u0002\u029d\u0299\u0003\u0002\u0002\u0002\u029e\u02a1\u0003",
    "\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u029f\u02a0\u0003",
    "\u0002\u0002\u0002\u02a0\u02a2\u0003\u0002\u0002\u0002\u02a1\u029f\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\u0005`1\u0002\u02a3_\u0003\u0002\u0002",
    "\u0002\u02a4\u02aa\u0005b2\u0002\u02a5\u02a6\u0005\u00b0Y\u0002\u02a6",
    "\u02a7\u0005p9\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u02a5",
    "\u0003\u0002\u0002\u0002\u02a9\u02ac\u0003\u0002\u0002\u0002\u02aa\u02a8",
    "\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02aba",
    "\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad\u02ba",
    "\u0005d3\u0002\u02ae\u02af\u0005\u00b0Y\u0002\u02af\u02b0\u0007\u0010",
    "\u0002\u0002\u02b0\u02b1\u0005\u00b0Y\u0002\u02b1\u02b2\u0005d3\u0002",
    "\u02b2\u02b9\u0003\u0002\u0002\u0002\u02b3\u02b4\u0005\u00b0Y\u0002",
    "\u02b4\u02b5\u0007\u0011\u0002\u0002\u02b5\u02b6\u0005\u00b0Y\u0002",
    "\u02b6\u02b7\u0005d3\u0002\u02b7\u02b9\u0003\u0002\u0002\u0002\u02b8",
    "\u02ae\u0003\u0002\u0002\u0002\u02b8\u02b3\u0003\u0002\u0002\u0002\u02b9",
    "\u02bc\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba",
    "\u02bb\u0003\u0002\u0002\u0002\u02bbc\u0003\u0002\u0002\u0002\u02bc",
    "\u02ba\u0003\u0002\u0002\u0002\u02bd\u02cf\u0005f4\u0002\u02be\u02bf",
    "\u0005\u00b0Y\u0002\u02bf\u02c0\u0007\u0007\u0002\u0002\u02c0\u02c1",
    "\u0005\u00b0Y\u0002\u02c1\u02c2\u0005f4\u0002\u02c2\u02ce\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0005\u00b0Y\u0002\u02c4\u02c5\u0007\u0012",
    "\u0002\u0002\u02c5\u02c6\u0005\u00b0Y\u0002\u02c6\u02c7\u0005f4\u0002",
    "\u02c7\u02ce\u0003\u0002\u0002\u0002\u02c8\u02c9\u0005\u00b0Y\u0002",
    "\u02c9\u02ca\u0007\u0013\u0002\u0002\u02ca\u02cb\u0005\u00b0Y\u0002",
    "\u02cb\u02cc\u0005f4\u0002\u02cc\u02ce\u0003\u0002\u0002\u0002\u02cd",
    "\u02be\u0003\u0002\u0002\u0002\u02cd\u02c3\u0003\u0002\u0002\u0002\u02cd",
    "\u02c8\u0003\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002\u0002\u02cf",
    "\u02cd\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0",
    "e\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d2",
    "\u02da\u0005h5\u0002\u02d3\u02d4\u0005\u00b0Y\u0002\u02d4\u02d5\u0007",
    "\u0014\u0002\u0002\u02d5\u02d6\u0005\u00b0Y\u0002\u02d6\u02d7\u0005",
    "h5\u0002\u02d7\u02d9\u0003\u0002\u0002\u0002\u02d8\u02d3\u0003\u0002",
    "\u0002\u0002\u02d9\u02dc\u0003\u0002\u0002\u0002\u02da\u02d8\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02dbg\u0003\u0002",
    "\u0002\u0002\u02dc\u02da\u0003\u0002\u0002\u0002\u02dd\u02de\t\u0004",
    "\u0002\u0002\u02de\u02e0\u0005\u00b0Y\u0002\u02df\u02dd\u0003\u0002",
    "\u0002\u0002\u02e0\u02e3\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002",
    "\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e4\u0003\u0002",
    "\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e4\u02e5\u0005j",
    "6\u0002\u02e5i\u0003\u0002\u0002\u0002\u02e6\u031d\u0005l7\u0002\u02e7",
    "\u02e8\u0005\u00b0Y\u0002\u02e8\u02e9\u0007\n\u0002\u0002\u02e9\u02ea",
    "\u0005V,\u0002\u02ea\u02eb\u0007\f\u0002\u0002\u02eb\u031c\u0003\u0002",
    "\u0002\u0002\u02ec\u02ed\u0005\u00b0Y\u0002\u02ed\u02ef\u0007\n\u0002",
    "\u0002\u02ee\u02f0\u0005V,\u0002\u02ef\u02ee\u0003\u0002\u0002\u0002",
    "\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002",
    "\u02f1\u02f3\u0007\u000f\u0002\u0002\u02f2\u02f4\u0005V,\u0002\u02f3",
    "\u02f2\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4",
    "\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f6\u0007\f\u0002\u0002\u02f6",
    "\u031c\u0003\u0002\u0002\u0002\u02f7\u02f8\u0005\u00b0Y\u0002\u02f8",
    "\u02f9\u0007\u0015\u0002\u0002\u02f9\u030b\u0003\u0002\u0002\u0002\u02fa",
    "\u02fb\u0005\u00b2Z\u0002\u02fb\u02fc\u0007_\u0002\u0002\u02fc\u030b",
    "\u0003\u0002\u0002\u0002\u02fd\u02fe\u0005\u00b2Z\u0002\u02fe\u02ff",
    "\u0007`\u0002\u0002\u02ff\u0300\u0005\u00b2Z\u0002\u0300\u0301\u0007",
    "O\u0002\u0002\u0301\u030b\u0003\u0002\u0002\u0002\u0302\u0303\u0005",
    "\u00b2Z\u0002\u0303\u0304\u0007a\u0002\u0002\u0304\u0305\u0005\u00b2",
    "Z\u0002\u0305\u0306\u0007O\u0002\u0002\u0306\u030b\u0003\u0002\u0002",
    "\u0002\u0307\u0308\u0005\u00b2Z\u0002\u0308\u0309\u0007b\u0002\u0002",
    "\u0309\u030b\u0003\u0002\u0002\u0002\u030a\u02f7\u0003\u0002\u0002\u0002",
    "\u030a\u02fa\u0003\u0002\u0002\u0002\u030a\u02fd\u0003\u0002\u0002\u0002",
    "\u030a\u0302\u0003\u0002\u0002\u0002\u030a\u0307\u0003\u0002\u0002\u0002",
    "\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030d\u0005\u00b0Y\u0002",
    "\u030d\u030e\u0005l7\u0002\u030e\u031c\u0003\u0002\u0002\u0002\u030f",
    "\u0310\u0005\u00b2Z\u0002\u0310\u0311\u0007c\u0002\u0002\u0311\u0312",
    "\u0005\u00b2Z\u0002\u0312\u0313\u0007d\u0002\u0002\u0313\u031c\u0003",
    "\u0002\u0002\u0002\u0314\u0315\u0005\u00b2Z\u0002\u0315\u0316\u0007",
    "c\u0002\u0002\u0316\u0317\u0005\u00b2Z\u0002\u0317\u0318\u0007^\u0002",
    "\u0002\u0318\u0319\u0005\u00b2Z\u0002\u0319\u031a\u0007d\u0002\u0002",
    "\u031a\u031c\u0003\u0002\u0002\u0002\u031b\u02e7\u0003\u0002\u0002\u0002",
    "\u031b\u02ec\u0003\u0002\u0002\u0002\u031b\u030a\u0003\u0002\u0002\u0002",
    "\u031b\u030f\u0003\u0002\u0002\u0002\u031b\u0314\u0003\u0002\u0002\u0002",
    "\u031c\u031f\u0003\u0002\u0002\u0002\u031d\u031b\u0003\u0002\u0002\u0002",
    "\u031d\u031e\u0003\u0002\u0002\u0002\u031ek\u0003\u0002\u0002\u0002",
    "\u031f\u031d\u0003\u0002\u0002\u0002\u0320\u0325\u0005n8\u0002\u0321",
    "\u0324\u0005\u0080A\u0002\u0322\u0324\u0005L\'\u0002\u0323\u0321\u0003",
    "\u0002\u0002\u0002\u0323\u0322\u0003\u0002\u0002\u0002\u0324\u0327\u0003",
    "\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003",
    "\u0002\u0002\u0002\u0326m\u0003\u0002\u0002\u0002\u0327\u0325\u0003",
    "\u0002\u0002\u0002\u0328\u037f\u0005\u0084C\u0002\u0329\u037f\u0007",
    "?\u0002\u0002\u032a\u037f\u0005\u0088E\u0002\u032b\u037f\u0007e\u0002",
    "\u0002\u032c\u037f\u0007f\u0002\u0002\u032d\u037f\u0007d\u0002\u0002",
    "\u032e\u032f\u0007g\u0002\u0002\u032f\u0330\u0007\b\u0002\u0002\u0330",
    "\u0331\u0007\u0007\u0002\u0002\u0331\u037f\u0007\t\u0002\u0002\u0332",
    "\u037f\u0005\u0086D\u0002\u0333\u037f\u0005~@\u0002\u0334\u0335\u0007",
    "\n\u0002\u0002\u0335\u0336\u0005\u00b0Y\u0002\u0336\u0337\u0005V,\u0002",
    "\u0337\u033f\u0005\u00b0Y\u0002\u0338\u0339\u0007\u0004\u0002\u0002",
    "\u0339\u033a\u0005\u00b0Y\u0002\u033a\u033b\u0005V,\u0002\u033b\u033c",
    "\u0005\u00b0Y\u0002\u033c\u033e\u0003\u0002\u0002\u0002\u033d\u0338",
    "\u0003\u0002\u0002\u0002\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0342",
    "\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u0343",
    "\u0007\f\u0002\u0002\u0343\u037f\u0003\u0002\u0002\u0002\u0344\u0345",
    "\u0007h\u0002\u0002\u0345\u0346\u0005\u00b0Y\u0002\u0346\u0347\u0007",
    "\b\u0002\u0002\u0347\u0348\u0005\u00b0Y\u0002\u0348\u0349\u0005v<\u0002",
    "\u0349\u034a\u0005\u00b0Y\u0002\u034a\u034b\u0007\t\u0002\u0002\u034b",
    "\u037f\u0003\u0002\u0002\u0002\u034c\u034d\u0007i\u0002\u0002\u034d",
    "\u034e\u0005\u00b0Y\u0002\u034e\u034f\u0007\b\u0002\u0002\u034f\u0350",
    "\u0005\u00b0Y\u0002\u0350\u0351\u0005v<\u0002\u0351\u0356\u0005\u00b0",
    "Y\u0002\u0352\u0353\u0005\u00b0Y\u0002\u0353\u0354\u0007\u000e\u0002",
    "\u0002\u0354\u0355\u0005V,\u0002\u0355\u0357\u0003\u0002\u0002\u0002",
    "\u0356\u0352\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002",
    "\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u0359\u0007\t\u0002\u0002",
    "\u0359\u037f\u0003\u0002\u0002\u0002\u035a\u035b\u0007C\u0002\u0002",
    "\u035b\u035c\u0005\u00b0Y\u0002\u035c\u035d\u0007\b\u0002\u0002\u035d",
    "\u035e\u0005\u00b0Y\u0002\u035e\u035f\u0005v<\u0002\u035f\u0360\u0005",
    "\u00b0Y\u0002\u0360\u0361\u0007\t\u0002\u0002\u0361\u037f\u0003\u0002",
    "\u0002\u0002\u0362\u0363\u0007j\u0002\u0002\u0363\u0364\u0005\u00b0",
    "Y\u0002\u0364\u0365\u0007\b\u0002\u0002\u0365\u0366\u0005\u00b0Y\u0002",
    "\u0366\u0367\u0005v<\u0002\u0367\u0368\u0005\u00b0Y\u0002\u0368\u0369",
    "\u0007\t\u0002\u0002\u0369\u037f\u0003\u0002\u0002\u0002\u036a\u036b",
    "\u0007k\u0002\u0002\u036b\u036c\u0005\u00b0Y\u0002\u036c\u036d\u0007",
    "\b\u0002\u0002\u036d\u036e\u0005\u00b0Y\u0002\u036e\u036f\u0005v<\u0002",
    "\u036f\u0370\u0005\u00b0Y\u0002\u0370\u0371\u0007\t\u0002\u0002\u0371",
    "\u037f\u0003\u0002\u0002\u0002\u0372\u0373\u0007l\u0002\u0002\u0373",
    "\u0374\u0005\u00b0Y\u0002\u0374\u0375\u0007\b\u0002\u0002\u0375\u0376",
    "\u0005\u00b0Y\u0002\u0376\u0377\u0005v<\u0002\u0377\u0378\u0005\u00b0",
    "Y\u0002\u0378\u0379\u0007\t\u0002\u0002\u0379\u037f\u0003\u0002\u0002",
    "\u0002\u037a\u037f\u0005t;\u0002\u037b\u037f\u0005r:\u0002\u037c\u037f",
    "\u0005z>\u0002\u037d\u037f\u0005\u0082B\u0002\u037e\u0328\u0003\u0002",
    "\u0002\u0002\u037e\u0329\u0003\u0002\u0002\u0002\u037e\u032a\u0003\u0002",
    "\u0002\u0002\u037e\u032b\u0003\u0002\u0002\u0002\u037e\u032c\u0003\u0002",
    "\u0002\u0002\u037e\u032d\u0003\u0002\u0002\u0002\u037e\u032e\u0003\u0002",
    "\u0002\u0002\u037e\u0332\u0003\u0002\u0002\u0002\u037e\u0333\u0003\u0002",
    "\u0002\u0002\u037e\u0334\u0003\u0002\u0002\u0002\u037e\u0344\u0003\u0002",
    "\u0002\u0002\u037e\u034c\u0003\u0002\u0002\u0002\u037e\u035a\u0003\u0002",
    "\u0002\u0002\u037e\u0362\u0003\u0002\u0002\u0002\u037e\u036a\u0003\u0002",
    "\u0002\u0002\u037e\u0372\u0003\u0002\u0002\u0002\u037e\u037a\u0003\u0002",
    "\u0002\u0002\u037e\u037b\u0003\u0002\u0002\u0002\u037e\u037c\u0003\u0002",
    "\u0002\u0002\u037e\u037d\u0003\u0002\u0002\u0002\u037fo\u0003\u0002",
    "\u0002\u0002\u0380\u0381\u0007\u0005\u0002\u0002\u0381\u0382\u0005\u00b0",
    "Y\u0002\u0382\u0383\u0005b2\u0002\u0383\u039d\u0003\u0002\u0002\u0002",
    "\u0384\u0385\u0007\u0016\u0002\u0002\u0385\u0386\u0005\u00b0Y\u0002",
    "\u0386\u0387\u0005b2\u0002\u0387\u039d\u0003\u0002\u0002\u0002\u0388",
    "\u0389\u0007\u0017\u0002\u0002\u0389\u038a\u0005\u00b0Y\u0002\u038a",
    "\u038b\u0005b2\u0002\u038b\u039d\u0003\u0002\u0002\u0002\u038c\u038d",
    "\u0007\u0018\u0002\u0002\u038d\u038e\u0005\u00b0Y\u0002\u038e\u038f",
    "\u0005b2\u0002\u038f\u039d\u0003\u0002\u0002\u0002\u0390\u0391\u0007",
    "\u0019\u0002\u0002\u0391\u0392\u0005\u00b0Y\u0002\u0392\u0393\u0005",
    "b2\u0002\u0393\u039d\u0003\u0002\u0002\u0002\u0394\u0395\u0007\u001a",
    "\u0002\u0002\u0395\u0396\u0005\u00b0Y\u0002\u0396\u0397\u0005b2\u0002",
    "\u0397\u039d\u0003\u0002\u0002\u0002\u0398\u0399\u0007\u001b\u0002\u0002",
    "\u0399\u039a\u0005\u00b0Y\u0002\u039a\u039b\u0005b2\u0002\u039b\u039d",
    "\u0003\u0002\u0002\u0002\u039c\u0380\u0003\u0002\u0002\u0002\u039c\u0384",
    "\u0003\u0002\u0002\u0002\u039c\u0388\u0003\u0002\u0002\u0002\u039c\u038c",
    "\u0003\u0002\u0002\u0002\u039c\u0390\u0003\u0002\u0002\u0002\u039c\u0394",
    "\u0003\u0002\u0002\u0002\u039c\u0398\u0003\u0002\u0002\u0002\u039dq",
    "\u0003\u0002\u0002\u0002\u039e\u039f\u0007\b\u0002\u0002\u039f\u03a0",
    "\u0005V,\u0002\u03a0\u03a1\u0007\t\u0002\u0002\u03a1s\u0003\u0002\u0002",
    "\u0002\u03a2\u03a6\u0005@!\u0002\u03a3\u03a4\u0005\u00b0Y\u0002\u03a4",
    "\u03a5\u0005B\"\u0002\u03a5\u03a7\u0003\u0002\u0002\u0002\u03a6\u03a3",
    "\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8\u03a6",
    "\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9u",
    "\u0003\u0002\u0002\u0002\u03aa\u03ae\u0005x=\u0002\u03ab\u03ac\u0005",
    "\u00b0Y\u0002\u03ac\u03ad\u00056\u001c\u0002\u03ad\u03af\u0003\u0002",
    "\u0002\u0002\u03ae\u03ab\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002",
    "\u0002\u0002\u03afw\u0003\u0002\u0002\u0002\u03b0\u03b1\u0005\u0082",
    "B\u0002\u03b1\u03b2\u0005\u00b2Z\u0002\u03b2\u03b3\u0007_\u0002\u0002",
    "\u03b3\u03b4\u0005\u00b2Z\u0002\u03b4\u03b5\u0005V,\u0002\u03b5y\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0005|?\u0002\u03b7\u03b8\u0005\u00b0",
    "Y\u0002\u03b8\u03b9\u0007\b\u0002\u0002\u03b9\u03bb\u0005\u00b0Y\u0002",
    "\u03ba\u03bc\u0007P\u0002\u0002\u03bb\u03ba\u0003\u0002\u0002\u0002",
    "\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03c7\u0003\u0002\u0002\u0002",
    "\u03bd\u03c4\u0005V,\u0002\u03be\u03bf\u0007\u0004\u0002\u0002\u03bf",
    "\u03c0\u0005\u00b0Y\u0002\u03c0\u03c1\u0005V,\u0002\u03c1\u03c3\u0003",
    "\u0002\u0002\u0002\u03c2\u03be\u0003\u0002\u0002\u0002\u03c3\u03c6\u0003",
    "\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003",
    "\u0002\u0002\u0002\u03c5\u03c8\u0003\u0002\u0002\u0002\u03c6\u03c4\u0003",
    "\u0002\u0002\u0002\u03c7\u03bd\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003",
    "\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9\u03ca\u0005",
    "\u00b0Y\u0002\u03ca\u03cb\u0007\t\u0002\u0002\u03cb{\u0003\u0002\u0002",
    "\u0002\u03cc\u03cd\u0005\u00aeX\u0002\u03cd}\u0003\u0002\u0002\u0002",
    "\u03ce\u03cf\u0007\n\u0002\u0002\u03cf\u03d4\u0005v<\u0002\u03d0\u03d1",
    "\u0005\u00b0Y\u0002\u03d1\u03d2\u0007\u000e\u0002\u0002\u03d2\u03d3",
    "\u0005V,\u0002\u03d3\u03d5\u0003\u0002\u0002\u0002\u03d4\u03d0\u0003",
    "\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003",
    "\u0002\u0002\u0002\u03d6\u03d7\u0007\f\u0002\u0002\u03d7\u007f\u0003",
    "\u0002\u0002\u0002\u03d8\u03d9\u0005\u00b0Y\u0002\u03d9\u03da\u0007",
    "\u001c\u0002\u0002\u03da\u03df\u0005\u00b0Y\u0002\u03db\u03dc\u0005",
    "\u008cG\u0002\u03dc\u03dd\t\u0005\u0002\u0002\u03dd\u03e0\u0003\u0002",
    "\u0002\u0002\u03de\u03e0\u0005\u008cG\u0002\u03df\u03db\u0003\u0002",
    "\u0002\u0002\u03df\u03de\u0003\u0002\u0002\u0002\u03e0\u0081\u0003\u0002",
    "\u0002\u0002\u03e1\u03e2\u0005\u00aeX\u0002\u03e2\u0083\u0003\u0002",
    "\u0002\u0002\u03e3\u03e6\u0005\u00a8U\u0002\u03e4\u03e6\u0005\u008e",
    "H\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e4\u0003\u0002",
    "\u0002\u0002\u03e6\u0085\u0003\u0002\u0002\u0002\u03e7\u03e8\u0007\u001e",
    "\u0002\u0002\u03e8\u03fd\u0005\u00b0Y\u0002\u03e9\u03ea\u0005\u008c",
    "G\u0002\u03ea\u03eb\u0005\u00b0Y\u0002\u03eb\u03ec\u0007\r\u0002\u0002",
    "\u03ec\u03ed\u0005\u00b0Y\u0002\u03ed\u03ee\u0005V,\u0002\u03ee\u03fa",
    "\u0005\u00b0Y\u0002\u03ef\u03f0\u0007\u0004\u0002\u0002\u03f0\u03f1",
    "\u0005\u00b0Y\u0002\u03f1\u03f2\u0005\u008cG\u0002\u03f2\u03f3\u0005",
    "\u00b0Y\u0002\u03f3\u03f4\u0007\r\u0002\u0002\u03f4\u03f5\u0005\u00b0",
    "Y\u0002\u03f5\u03f6\u0005V,\u0002\u03f6\u03f7\u0005\u00b0Y\u0002\u03f7",
    "\u03f9\u0003\u0002\u0002\u0002\u03f8\u03ef\u0003\u0002\u0002\u0002\u03f9",
    "\u03fc\u0003\u0002\u0002\u0002\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002\u03fc",
    "\u03fa\u0003\u0002\u0002\u0002\u03fd\u03e9\u0003\u0002\u0002\u0002\u03fd",
    "\u03fe\u0003\u0002\u0002\u0002\u03fe\u03ff\u0003\u0002\u0002\u0002\u03ff",
    "\u0400\u0007\u001f\u0002\u0002\u0400\u0087\u0003\u0002\u0002\u0002\u0401",
    "\u0402\u0007\u001e\u0002\u0002\u0402\u0405\u0005\u00b0Y\u0002\u0403",
    "\u0406\u0005\u00aeX\u0002\u0404\u0406\u0005\u009aN\u0002\u0405\u0403",
    "\u0003\u0002\u0002\u0002\u0405\u0404\u0003\u0002\u0002\u0002\u0406\u0407",
    "\u0003\u0002\u0002\u0002\u0407\u0408\u0005\u00b0Y\u0002\u0408\u0409",
    "\u0007\u001f\u0002\u0002\u0409\u0089\u0003\u0002\u0002\u0002\u040a\u040e",
    "\u0005n8\u0002\u040b\u040c\u0005\u00b0Y\u0002\u040c\u040d\u0005\u0080",
    "A\u0002\u040d\u040f\u0003\u0002\u0002\u0002\u040e\u040b\u0003\u0002",
    "\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u040e\u0003\u0002",
    "\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u008b\u0003\u0002",
    "\u0002\u0002\u0412\u0413\u0005\u00aeX\u0002\u0413\u008d\u0003\u0002",
    "\u0002\u0002\u0414\u0418\u0005\u0092J\u0002\u0415\u0418\u0005\u0096",
    "L\u0002\u0416\u0418\u0005\u0094K\u0002\u0417\u0414\u0003\u0002\u0002",
    "\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0417\u0416\u0003\u0002\u0002",
    "\u0002\u0418\u008f\u0003\u0002\u0002\u0002\u0419\u041a\u0005\u009aN",
    "\u0002\u041a\u0091\u0003\u0002\u0002\u0002\u041b\u041d\u0007\u0011\u0002",
    "\u0002\u041c\u041b\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002\u0002",
    "\u0002\u041d\u041e\u0003\u0002\u0002\u0002\u041e\u041f\u0005\u0098M",
    "\u0002\u041f\u0093\u0003\u0002\u0002\u0002\u0420\u0422\u0007\u0011\u0002",
    "\u0002\u0421\u0420\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002",
    "\u0002\u0422\u0423\u0003\u0002\u0002\u0002\u0423\u0424\u0005\u009aN",
    "\u0002\u0424\u0095\u0003\u0002\u0002\u0002\u0425\u0427\u0007\u0011\u0002",
    "\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002",
    "\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u0429\u0005\u009cO",
    "\u0002\u0429\u0097\u0003\u0002\u0002\u0002\u042a\u042b\u0007m\u0002",
    "\u0002\u042b\u042c\u0005\u009eP\u0002\u042c\u0099\u0003\u0002\u0002",
    "\u0002\u042d\u042f\t\u0006\u0002\u0002\u042e\u0430\u0005\u00a0Q\u0002",
    "\u042f\u042e\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002",
    "\u0430\u0433\u0003\u0002\u0002\u0002\u0431\u0433\u0007)\u0002\u0002",
    "\u0432\u042d\u0003\u0002\u0002\u0002\u0432\u0431\u0003\u0002\u0002\u0002",
    "\u0433\u009b\u0003\u0002\u0002\u0002\u0434\u0435\u0007)\u0002\u0002",
    "\u0435\u0436\u0005\u00a2R\u0002\u0436\u009d\u0003\u0002\u0002\u0002",
    "\u0437\u0439\u0007A\u0002\u0002\u0438\u0437\u0003\u0002\u0002\u0002",
    "\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u0438\u0003\u0002\u0002\u0002",
    "\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u009f\u0003\u0002\u0002\u0002",
    "\u043c\u043e\u0005\u00a4S\u0002\u043d\u043c\u0003\u0002\u0002\u0002",
    "\u043e\u043f\u0003\u0002\u0002\u0002\u043f\u043d\u0003\u0002\u0002\u0002",
    "\u043f\u0440\u0003\u0002\u0002\u0002\u0440\u00a1\u0003\u0002\u0002\u0002",
    "\u0441\u0443\u0005\u00a6T\u0002\u0442\u0441\u0003\u0002\u0002\u0002",
    "\u0443\u0444\u0003\u0002\u0002\u0002\u0444\u0442\u0003\u0002\u0002\u0002",
    "\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u00a3\u0003\u0002\u0002\u0002",
    "\u0446\u0447\t\u0007\u0002\u0002\u0447\u00a5\u0003\u0002\u0002\u0002",
    "\u0448\u0449\t\b\u0002\u0002\u0449\u00a7\u0003\u0002\u0002\u0002\u044a",
    "\u044d\u0005\u00aaV\u0002\u044b\u044d\u0005\u00acW\u0002\u044c\u044a",
    "\u0003\u0002\u0002\u0002\u044c\u044b\u0003\u0002\u0002\u0002\u044d\u00a9",
    "\u0003\u0002\u0002\u0002\u044e\u0450\u0007\u0011\u0002\u0002\u044f\u044e",
    "\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450\u0453",
    "\u0003\u0002\u0002\u0002\u0451\u0454\u0005\u00a4S\u0002\u0452\u0454",
    "\u0007\u001c\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0453\u0452",
    "\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002\u0002\u0002\u0455\u0453",
    "\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u0459",
    "\u0003\u0002\u0002\u0002\u0457\u045a\t\t\u0002\u0002\u0458\u045a\t\t",
    "\u0002\u0002\u0459\u0457\u0003\u0002\u0002\u0002\u0459\u0458\u0003\u0002",
    "\u0002\u0002\u045a\u045c\u0003\u0002\u0002\u0002\u045b\u045d\u0007\u0011",
    "\u0002\u0002\u045c\u045b\u0003\u0002\u0002\u0002\u045c\u045d\u0003\u0002",
    "\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002\u045e\u045f\u0005\u00a0",
    "Q\u0002\u045f\u00ab\u0003\u0002\u0002\u0002\u0460\u0462\u0007\u0011",
    "\u0002\u0002\u0461\u0460\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002",
    "\u0002\u0002\u0462\u0466\u0003\u0002\u0002\u0002\u0463\u0465\u0005\u00a4",
    "S\u0002\u0464\u0463\u0003\u0002\u0002\u0002\u0465\u0468\u0003\u0002",
    "\u0002\u0002\u0466\u0464\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002",
    "\u0002\u0002\u0467\u0469\u0003\u0002\u0002\u0002\u0468\u0466\u0003\u0002",
    "\u0002\u0002\u0469\u046a\u0007\u001c\u0002\u0002\u046a\u046b\u0005\u00a0",
    "Q\u0002\u046b\u00ad\u0003\u0002\u0002\u0002\u046c\u046d\t\n\u0002\u0002",
    "\u046d\u00af\u0003\u0002\u0002\u0002\u046e\u0470\u0007r\u0002\u0002",
    "\u046f\u046e\u0003\u0002\u0002\u0002\u0470\u0473\u0003\u0002\u0002\u0002",
    "\u0471\u046f\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002",
    "\u0472\u00b1\u0003\u0002\u0002\u0002\u0473\u0471\u0003\u0002\u0002\u0002",
    "\u0474\u0476\u0007r\u0002\u0002\u0475\u0474\u0003\u0002\u0002\u0002",
    "\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0475\u0003\u0002\u0002\u0002",
    "\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u00b3\u0003\u0002\u0002\u0002",
    "\u0479\u047a\t\u000b\u0002\u0002\u047a\u00b5\u0003\u0002\u0002\u0002",
    "\u047b\u047c\t\f\u0002\u0002\u047c\u00b7\u0003\u0002\u0002\u0002\u047d",
    "\u047e\t\r\u0002\u0002\u047e\u00b9\u0003\u0002\u0002\u0002m\u00bf\u00cd",
    "\u00d6\u00e0\u00eb\u00ef\u00f7\u0109\u0118\u0124\u0136\u013e\u0149\u014c",
    "\u0158\u015f\u0166\u016c\u016e\u017a\u0180\u0185\u018a\u0194\u019f\u01a2",
    "\u01ab\u01b8\u01c8\u01ca\u01d5\u01df\u01e9\u01f0\u01f7\u01fc\u0201\u020e",
    "\u021a\u0222\u022c\u0231\u0235\u0238\u023b\u023f\u0241\u0244\u024a\u0251",
    "\u0258\u0261\u026a\u0270\u0280\u028b\u0296\u029f\u02aa\u02b8\u02ba\u02cd",
    "\u02cf\u02da\u02e1\u02ef\u02f3\u030a\u031b\u031d\u0323\u0325\u033f\u0356",
    "\u037e\u039c\u03a8\u03ae\u03bb\u03c4\u03c7\u03d4\u03df\u03e5\u03fa\u03fd",
    "\u0405\u0410\u0417\u041c\u0421\u0426\u042f\u0432\u043a\u043f\u0444\u044c",
    "\u044f\u0453\u0455\u0459\u045c\u0461\u0466\u0471\u0477"].join("");


  var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

  var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
  });

  var sharedContextCache = new antlr4.PredictionContextCache();

  var literalNames = [null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'",
    "'['", "'?'", "']'", "':'", "'|'", "'..'", "'+'", "'-'",
    "'/'", "'%'", "'^'", "'=~'", "'<>'", "'!='", "'<'",
    "'>'", "'<='", "'>='", "'.'", "'!'", "'{'", "'}'",
    "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'",
    "'9'", "'0'", "'E'", "'e'", "'⟨'", "'〈'", "'﹤'", "'＜'",
    "'⟩'", "'〉'", "'﹥'", "'＞'", "'­'", "'‐'", "'‑'", "'‒'",
    "'–'", "'—'", "'―'", "'−'", "'﹘'", "'﹣'", "'－'"];

  var symbolicNames = [null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, "StringLiteral",
    "EscapedChar", "HexDigit", "UNION", "ALL", "OPTIONAL",
    "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE",
    "SET", "DELETE", "DETACH", "REMOVE", "WITH", "DISTINCT",
    "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "DESCENDING",
    "DESC", "ASCENDING", "ASC", "WHERE", "OR", "XOR",
    "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS",
    "IS", "NULL", "TRUE", "FALSE", "COUNT", "FILTER",
    "EXTRACT", "ANY", "NONE", "SINGLE", "L_0X", "UnescapedSymbolicName",
    "IdentifierStart", "IdentifierPart", "EscapedSymbolicName",
    "WHITESPACE", "Comment"];

  var ruleNames = ["cypher", "statement", "query", "regularQuery", "singleQuery",
    "union", "clause", "c_match", "unwind", "c_merge", "c_mergeAction",
    "create", "c_set", "setItem", "c_delete", "remove", "removeItem",
    "c_with", "c_return", "c_returnBody", "c_returnItems",
    "c_returnItem", "order", "skip", "limit", "sortItem",
    "where", "pattern", "patternPart", "anonymousPatternPart",
    "patternElement", "nodePattern", "patternElementChain",
    "relationshipPattern", "relationshipDetail", "properties",
    "relationshipTypes", "nodeLabels", "nodeLabel", "rangeLiteral",
    "labelName", "relTypeName", "expression", "expression12",
    "expression11", "expression10", "expression9", "expression8",
    "expression7", "expression6", "expression5", "expression4",
    "expression3", "expression2", "atom", "partialComparisonExpression",
    "parenthesizedExpression", "relationshipsPattern", "filterExpression",
    "idInColl", "functionInvocation", "functionName", "listComprehension",
    "propertyLookup", "variable", "numberLiteral", "mapLiteral",
    "parameter", "propertyExpression", "propertyKeyName",
    "signedIntegerLiteral", "unsignedIntegerLiteral", "hexInteger",
    "decimalInteger", "octalInteger", "unsignedHexInteger",
    "unsignedDecimalInteger", "unsignedOctalInteger", "hexString",
    "digitString", "octalString", "digit", "octDigit", "doubleLiteral",
    "exponentDecimalReal", "regularDecimalReal", "symbolicName",
    "ws", "sp", "leftArrowHead", "rightArrowHead", "dash"];

  function CypherParser(input) {


    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    var sharedContextCache = new antlr4.PredictionContextCache();
    this.atn = atn;
    
    antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
  }

  CypherParser.prototype = Object.create(antlr4.Parser.prototype);
  CypherParser.prototype.constructor = CypherParser;

  /*
  Object.defineProperty(CypherParser.prototype, "atn", {
    get: function () {
      return atn;
    }
  });
  */

  CypherParser.EOF = antlr4.Token.EOF;
  CypherParser.T__0 = 1;
  CypherParser.T__1 = 2;
  CypherParser.T__2 = 3;
  CypherParser.T__3 = 4;
  CypherParser.T__4 = 5;
  CypherParser.T__5 = 6;
  CypherParser.T__6 = 7;
  CypherParser.T__7 = 8;
  CypherParser.T__8 = 9;
  CypherParser.T__9 = 10;
  CypherParser.T__10 = 11;
  CypherParser.T__11 = 12;
  CypherParser.T__12 = 13;
  CypherParser.T__13 = 14;
  CypherParser.T__14 = 15;
  CypherParser.T__15 = 16;
  CypherParser.T__16 = 17;
  CypherParser.T__17 = 18;
  CypherParser.T__18 = 19;
  CypherParser.T__19 = 20;
  CypherParser.T__20 = 21;
  CypherParser.T__21 = 22;
  CypherParser.T__22 = 23;
  CypherParser.T__23 = 24;
  CypherParser.T__24 = 25;
  CypherParser.T__25 = 26;
  CypherParser.T__26 = 27;
  CypherParser.T__27 = 28;
  CypherParser.T__28 = 29;
  CypherParser.T__29 = 30;
  CypherParser.T__30 = 31;
  CypherParser.T__31 = 32;
  CypherParser.T__32 = 33;
  CypherParser.T__33 = 34;
  CypherParser.T__34 = 35;
  CypherParser.T__35 = 36;
  CypherParser.T__36 = 37;
  CypherParser.T__37 = 38;
  CypherParser.T__38 = 39;
  CypherParser.T__39 = 40;
  CypherParser.T__40 = 41;
  CypherParser.T__41 = 42;
  CypherParser.T__42 = 43;
  CypherParser.T__43 = 44;
  CypherParser.T__44 = 45;
  CypherParser.T__45 = 46;
  CypherParser.T__46 = 47;
  CypherParser.T__47 = 48;
  CypherParser.T__48 = 49;
  CypherParser.T__49 = 50;
  CypherParser.T__50 = 51;
  CypherParser.T__51 = 52;
  CypherParser.T__52 = 53;
  CypherParser.T__53 = 54;
  CypherParser.T__54 = 55;
  CypherParser.T__55 = 56;
  CypherParser.T__56 = 57;
  CypherParser.T__57 = 58;
  CypherParser.T__58 = 59;
  CypherParser.T__59 = 60;
  CypherParser.StringLiteral = 61;
  CypherParser.EscapedChar = 62;
  CypherParser.HexDigit = 63;
  CypherParser.UNION = 64;
  CypherParser.ALL = 65;
  CypherParser.OPTIONAL = 66;
  CypherParser.MATCH = 67;
  CypherParser.UNWIND = 68;
  CypherParser.AS = 69;
  CypherParser.MERGE = 70;
  CypherParser.ON = 71;
  CypherParser.CREATE = 72;
  CypherParser.SET = 73;
  CypherParser.DELETE = 74;
  CypherParser.DETACH = 75;
  CypherParser.REMOVE = 76;
  CypherParser.WITH = 77;
  CypherParser.DISTINCT = 78;
  CypherParser.RETURN = 79;
  CypherParser.ORDER = 80;
  CypherParser.BY = 81;
  CypherParser.L_SKIP = 82;
  CypherParser.LIMIT = 83;
  CypherParser.DESCENDING = 84;
  CypherParser.DESC = 85;
  CypherParser.ASCENDING = 86;
  CypherParser.ASC = 87;
  CypherParser.WHERE = 88;
  CypherParser.OR = 89;
  CypherParser.XOR = 90;
  CypherParser.AND = 91;
  CypherParser.NOT = 92;
  CypherParser.IN = 93;
  CypherParser.STARTS = 94;
  CypherParser.ENDS = 95;
  CypherParser.CONTAINS = 96;
  CypherParser.IS = 97;
  CypherParser.NULL = 98;
  CypherParser.TRUE = 99;
  CypherParser.FALSE = 100;
  CypherParser.COUNT = 101;
  CypherParser.FILTER = 102;
  CypherParser.EXTRACT = 103;
  CypherParser.ANY = 104;
  CypherParser.NONE = 105;
  CypherParser.SINGLE = 106;
  CypherParser.L_0X = 107;
  CypherParser.UnescapedSymbolicName = 108;
  CypherParser.IdentifierStart = 109;
  CypherParser.IdentifierPart = 110;
  CypherParser.EscapedSymbolicName = 111;
  CypherParser.WHITESPACE = 112;
  CypherParser.Comment = 113;

  CypherParser.RULE_cypher = 0;
  CypherParser.RULE_statement = 1;
  CypherParser.RULE_query = 2;
  CypherParser.RULE_regularQuery = 3;
  CypherParser.RULE_singleQuery = 4;
  CypherParser.RULE_union = 5;
  CypherParser.RULE_clause = 6;
  CypherParser.RULE_c_match = 7;
  CypherParser.RULE_unwind = 8;
  CypherParser.RULE_c_merge = 9;
  CypherParser.RULE_c_mergeAction = 10;
  CypherParser.RULE_create = 11;
  CypherParser.RULE_c_set = 12;
  CypherParser.RULE_setItem = 13;
  CypherParser.RULE_c_delete = 14;
  CypherParser.RULE_remove = 15;
  CypherParser.RULE_removeItem = 16;
  CypherParser.RULE_c_with = 17;
  CypherParser.RULE_c_return = 18;
  CypherParser.RULE_c_returnBody = 19;
  CypherParser.RULE_c_returnItems = 20;
  CypherParser.RULE_c_returnItem = 21;
  CypherParser.RULE_order = 22;
  CypherParser.RULE_skip = 23;
  CypherParser.RULE_limit = 24;
  CypherParser.RULE_sortItem = 25;
  CypherParser.RULE_where = 26;
  CypherParser.RULE_pattern = 27;
  CypherParser.RULE_patternPart = 28;
  CypherParser.RULE_anonymousPatternPart = 29;
  CypherParser.RULE_patternElement = 30;
  CypherParser.RULE_nodePattern = 31;
  CypherParser.RULE_patternElementChain = 32;
  CypherParser.RULE_relationshipPattern = 33;
  CypherParser.RULE_relationshipDetail = 34;
  CypherParser.RULE_properties = 35;
  CypherParser.RULE_relationshipTypes = 36;
  CypherParser.RULE_nodeLabels = 37;
  CypherParser.RULE_nodeLabel = 38;
  CypherParser.RULE_rangeLiteral = 39;
  CypherParser.RULE_labelName = 40;
  CypherParser.RULE_relTypeName = 41;
  CypherParser.RULE_expression = 42;
  CypherParser.RULE_expression12 = 43;
  CypherParser.RULE_expression11 = 44;
  CypherParser.RULE_expression10 = 45;
  CypherParser.RULE_expression9 = 46;
  CypherParser.RULE_expression8 = 47;
  CypherParser.RULE_expression7 = 48;
  CypherParser.RULE_expression6 = 49;
  CypherParser.RULE_expression5 = 50;
  CypherParser.RULE_expression4 = 51;
  CypherParser.RULE_expression3 = 52;
  CypherParser.RULE_expression2 = 53;
  CypherParser.RULE_atom = 54;
  CypherParser.RULE_partialComparisonExpression = 55;
  CypherParser.RULE_parenthesizedExpression = 56;
  CypherParser.RULE_relationshipsPattern = 57;
  CypherParser.RULE_filterExpression = 58;
  CypherParser.RULE_idInColl = 59;
  CypherParser.RULE_functionInvocation = 60;
  CypherParser.RULE_functionName = 61;
  CypherParser.RULE_listComprehension = 62;
  CypherParser.RULE_propertyLookup = 63;
  CypherParser.RULE_variable = 64;
  CypherParser.RULE_numberLiteral = 65;
  CypherParser.RULE_mapLiteral = 66;
  CypherParser.RULE_parameter = 67;
  CypherParser.RULE_propertyExpression = 68;
  CypherParser.RULE_propertyKeyName = 69;
  CypherParser.RULE_signedIntegerLiteral = 70;
  CypherParser.RULE_unsignedIntegerLiteral = 71;
  CypherParser.RULE_hexInteger = 72;
  CypherParser.RULE_decimalInteger = 73;
  CypherParser.RULE_octalInteger = 74;
  CypherParser.RULE_unsignedHexInteger = 75;
  CypherParser.RULE_unsignedDecimalInteger = 76;
  CypherParser.RULE_unsignedOctalInteger = 77;
  CypherParser.RULE_hexString = 78;
  CypherParser.RULE_digitString = 79;
  CypherParser.RULE_octalString = 80;
  CypherParser.RULE_digit = 81;
  CypherParser.RULE_octDigit = 82;
  CypherParser.RULE_doubleLiteral = 83;
  CypherParser.RULE_exponentDecimalReal = 84;
  CypherParser.RULE_regularDecimalReal = 85;
  CypherParser.RULE_symbolicName = 86;
  CypherParser.RULE_ws = 87;
  CypherParser.RULE_sp = 88;
  CypherParser.RULE_leftArrowHead = 89;
  CypherParser.RULE_rightArrowHead = 90;
  CypherParser.RULE_dash = 91;

  function CypherContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypher;
    return this;
  }

  CypherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  CypherContext.prototype.constructor = CypherContext;

  CypherContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  CypherContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
  };

  CypherContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypher(this);
    }
  };

  CypherContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypher(this);
    }
  };


  CypherParser.CypherContext = CypherContext;

  CypherParser.prototype.cypher = function () {

    var localctx = new CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CypherParser.RULE_cypher);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 184;
      this.ws();
      this.state = 185;
      this.statement();
      this.state = 189;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
      if (la_ === 1) {
        this.state = 186;
        this.ws();
        this.state = 187;
        this.match(CypherParser.T__0);

      }
      this.state = 191;
      this.ws();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function StatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_statement;
    return this;
  }

  StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  StatementContext.prototype.constructor = StatementContext;

  StatementContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
  };

  StatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterStatement(this);
    }
  };

  StatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitStatement(this);
    }
  };


  CypherParser.StatementContext = StatementContext;

  CypherParser.prototype.statement = function () {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CypherParser.RULE_statement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 193;
      this.query();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function QueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_query;
    return this;
  }

  QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  QueryContext.prototype.constructor = QueryContext;

  QueryContext.prototype.regularQuery = function () {
    return this.getTypedRuleContext(RegularQueryContext, 0);
  };

  QueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterQuery(this);
    }
  };

  QueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitQuery(this);
    }
  };


  CypherParser.QueryContext = QueryContext;

  CypherParser.prototype.query = function () {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CypherParser.RULE_query);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 195;
      this.regularQuery();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RegularQueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularQuery;
    return this;
  }

  RegularQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RegularQueryContext.prototype.constructor = RegularQueryContext;

  RegularQueryContext.prototype.singleQuery = function () {
    return this.getTypedRuleContext(SingleQueryContext, 0);
  };

  RegularQueryContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RegularQueryContext.prototype.union = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(UnionContext);
    } else {
      return this.getTypedRuleContext(UnionContext, i);
    }
  };

  RegularQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRegularQuery(this);
    }
  };

  RegularQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRegularQuery(this);
    }
  };


  CypherParser.RegularQueryContext = RegularQueryContext;

  CypherParser.prototype.regularQuery = function () {

    var localctx = new RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CypherParser.RULE_regularQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 197;
      this.singleQuery();
      this.state = 203;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 1, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 198;
          this.ws();
          this.state = 199;
          this.union();
        }
        this.state = 205;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 1, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SingleQueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleQuery;
    return this;
  }

  SingleQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SingleQueryContext.prototype.constructor = SingleQueryContext;

  SingleQueryContext.prototype.clause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClauseContext);
    } else {
      return this.getTypedRuleContext(ClauseContext, i);
    }
  };

  SingleQueryContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  SingleQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSingleQuery(this);
    }
  };

  SingleQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSingleQuery(this);
    }
  };


  CypherParser.SingleQueryContext = SingleQueryContext;

  CypherParser.prototype.singleQuery = function () {

    var localctx = new SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CypherParser.RULE_singleQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 206;
      this.clause();
      this.state = 212;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 2, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 207;
          this.ws();
          this.state = 208;
          this.clause();
        }
        this.state = 214;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 2, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_union;
    return this;
  }

  UnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnionContext.prototype.constructor = UnionContext;

  UnionContext.prototype.UNION = function () {
    return this.getToken(CypherParser.UNION, 0);
  };

  UnionContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  UnionContext.prototype.ALL = function () {
    return this.getToken(CypherParser.ALL, 0);
  };

  UnionContext.prototype.singleQuery = function () {
    return this.getTypedRuleContext(SingleQueryContext, 0);
  };

  UnionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnion(this);
    }
  };

  UnionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnion(this);
    }
  };


  CypherParser.UnionContext = UnionContext;

  CypherParser.prototype.union = function () {

    var localctx = new UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CypherParser.RULE_union);
    try {
      this.state = 222;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 215;
          this.match(CypherParser.UNION);
          this.state = 216;
          this.sp();
          this.state = 217;
          this.match(CypherParser.ALL);
          this.state = 218;
          this.singleQuery();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 220;
          this.match(CypherParser.UNION);
          this.state = 221;
          this.singleQuery();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ClauseContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_clause;
    return this;
  }

  ClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ClauseContext.prototype.constructor = ClauseContext;

  ClauseContext.prototype.c_match = function () {
    return this.getTypedRuleContext(C_matchContext, 0);
  };

  ClauseContext.prototype.unwind = function () {
    return this.getTypedRuleContext(UnwindContext, 0);
  };

  ClauseContext.prototype.c_merge = function () {
    return this.getTypedRuleContext(C_mergeContext, 0);
  };

  ClauseContext.prototype.create = function () {
    return this.getTypedRuleContext(CreateContext, 0);
  };

  ClauseContext.prototype.c_set = function () {
    return this.getTypedRuleContext(C_setContext, 0);
  };

  ClauseContext.prototype.c_delete = function () {
    return this.getTypedRuleContext(C_deleteContext, 0);
  };

  ClauseContext.prototype.remove = function () {
    return this.getTypedRuleContext(RemoveContext, 0);
  };

  ClauseContext.prototype.c_with = function () {
    return this.getTypedRuleContext(C_withContext, 0);
  };

  ClauseContext.prototype.c_return = function () {
    return this.getTypedRuleContext(C_returnContext, 0);
  };

  ClauseContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterClause(this);
    }
  };

  ClauseContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitClause(this);
    }
  };


  CypherParser.ClauseContext = ClauseContext;

  CypherParser.prototype.clause = function () {

    var localctx = new ClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CypherParser.RULE_clause);
    try {
      this.state = 233;
      switch (this._input.LA(1)) {
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
          this.enterOuterAlt(localctx, 1);
          this.state = 224;
          this.c_match();
          break;
        case CypherParser.UNWIND:
          this.enterOuterAlt(localctx, 2);
          this.state = 225;
          this.unwind();
          break;
        case CypherParser.MERGE:
          this.enterOuterAlt(localctx, 3);
          this.state = 226;
          this.c_merge();
          break;
        case CypherParser.CREATE:
          this.enterOuterAlt(localctx, 4);
          this.state = 227;
          this.create();
          break;
        case CypherParser.SET:
          this.enterOuterAlt(localctx, 5);
          this.state = 228;
          this.c_set();
          break;
        case CypherParser.DELETE:
        case CypherParser.DETACH:
          this.enterOuterAlt(localctx, 6);
          this.state = 229;
          this.c_delete();
          break;
        case CypherParser.REMOVE:
          this.enterOuterAlt(localctx, 7);
          this.state = 230;
          this.remove();
          break;
        case CypherParser.WITH:
          this.enterOuterAlt(localctx, 8);
          this.state = 231;
          this.c_with();
          break;
        case CypherParser.RETURN:
          this.enterOuterAlt(localctx, 9);
          this.state = 232;
          this.c_return();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_matchContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_match;
    return this;
  }

  C_matchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_matchContext.prototype.constructor = C_matchContext;

  C_matchContext.prototype.MATCH = function () {
    return this.getToken(CypherParser.MATCH, 0);
  };

  C_matchContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  C_matchContext.prototype.pattern = function () {
    return this.getTypedRuleContext(PatternContext, 0);
  };

  C_matchContext.prototype.OPTIONAL = function () {
    return this.getToken(CypherParser.OPTIONAL, 0);
  };

  C_matchContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  C_matchContext.prototype.where = function () {
    return this.getTypedRuleContext(WhereContext, 0);
  };

  C_matchContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_match(this);
    }
  };

  C_matchContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_match(this);
    }
  };


  CypherParser.C_matchContext = C_matchContext;

  CypherParser.prototype.c_match = function () {

    var localctx = new C_matchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CypherParser.RULE_c_match);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 237;
      _la = this._input.LA(1);
      if (_la === CypherParser.OPTIONAL) {
        this.state = 235;
        this.match(CypherParser.OPTIONAL);
        this.state = 236;
        this.sp();
      }

      this.state = 239;
      this.match(CypherParser.MATCH);
      this.state = 240;
      this.ws();
      this.state = 241;
      this.pattern();
      this.state = 245;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
      if (la_ === 1) {
        this.state = 242;
        this.ws();
        this.state = 243;
        this.where();

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnwindContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unwind;
    return this;
  }

  UnwindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnwindContext.prototype.constructor = UnwindContext;

  UnwindContext.prototype.UNWIND = function () {
    return this.getToken(CypherParser.UNWIND, 0);
  };

  UnwindContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  UnwindContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  UnwindContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  UnwindContext.prototype.AS = function () {
    return this.getToken(CypherParser.AS, 0);
  };

  UnwindContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  UnwindContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnwind(this);
    }
  };

  UnwindContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnwind(this);
    }
  };


  CypherParser.UnwindContext = UnwindContext;

  CypherParser.prototype.unwind = function () {

    var localctx = new UnwindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CypherParser.RULE_unwind);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 247;
      this.match(CypherParser.UNWIND);
      this.state = 248;
      this.ws();
      this.state = 249;
      this.expression();
      this.state = 250;
      this.sp();
      this.state = 251;
      this.match(CypherParser.AS);
      this.state = 252;
      this.sp();
      this.state = 253;
      this.variable();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_mergeContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_merge;
    return this;
  }

  C_mergeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_mergeContext.prototype.constructor = C_mergeContext;

  C_mergeContext.prototype.MERGE = function () {
    return this.getToken(CypherParser.MERGE, 0);
  };

  C_mergeContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  C_mergeContext.prototype.patternPart = function () {
    return this.getTypedRuleContext(PatternPartContext, 0);
  };

  C_mergeContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_mergeContext.prototype.c_mergeAction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(C_mergeActionContext);
    } else {
      return this.getTypedRuleContext(C_mergeActionContext, i);
    }
  };

  C_mergeContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_merge(this);
    }
  };

  C_mergeContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_merge(this);
    }
  };


  CypherParser.C_mergeContext = C_mergeContext;

  CypherParser.prototype.c_merge = function () {

    var localctx = new C_mergeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CypherParser.RULE_c_merge);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 255;
      this.match(CypherParser.MERGE);
      this.state = 256;
      this.ws();
      this.state = 257;
      this.patternPart();
      this.state = 263;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 7, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 258;
          this.sp();
          this.state = 259;
          this.c_mergeAction();
        }
        this.state = 265;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_mergeActionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_mergeAction;
    return this;
  }

  C_mergeActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_mergeActionContext.prototype.constructor = C_mergeActionContext;

  C_mergeActionContext.prototype.ON = function () {
    return this.getToken(CypherParser.ON, 0);
  };

  C_mergeActionContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_mergeActionContext.prototype.MATCH = function () {
    return this.getToken(CypherParser.MATCH, 0);
  };

  C_mergeActionContext.prototype.c_set = function () {
    return this.getTypedRuleContext(C_setContext, 0);
  };

  C_mergeActionContext.prototype.CREATE = function () {
    return this.getToken(CypherParser.CREATE, 0);
  };

  C_mergeActionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_mergeAction(this);
    }
  };

  C_mergeActionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_mergeAction(this);
    }
  };


  CypherParser.C_mergeActionContext = C_mergeActionContext;

  CypherParser.prototype.c_mergeAction = function () {

    var localctx = new C_mergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CypherParser.RULE_c_mergeAction);
    try {
      this.state = 278;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 266;
          this.match(CypherParser.ON);
          this.state = 267;
          this.sp();
          this.state = 268;
          this.match(CypherParser.MATCH);
          this.state = 269;
          this.sp();
          this.state = 270;
          this.c_set();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 272;
          this.match(CypherParser.ON);
          this.state = 273;
          this.sp();
          this.state = 274;
          this.match(CypherParser.CREATE);
          this.state = 275;
          this.sp();
          this.state = 276;
          this.c_set();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function CreateContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_create;
    return this;
  }

  CreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  CreateContext.prototype.constructor = CreateContext;

  CreateContext.prototype.CREATE = function () {
    return this.getToken(CypherParser.CREATE, 0);
  };

  CreateContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  CreateContext.prototype.pattern = function () {
    return this.getTypedRuleContext(PatternContext, 0);
  };

  CreateContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreate(this);
    }
  };

  CreateContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreate(this);
    }
  };


  CypherParser.CreateContext = CreateContext;

  CypherParser.prototype.create = function () {

    var localctx = new CreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CypherParser.RULE_create);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 280;
      this.match(CypherParser.CREATE);
      this.state = 281;
      this.ws();
      this.state = 282;
      this.pattern();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_setContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_set;
    return this;
  }

  C_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_setContext.prototype.constructor = C_setContext;

  C_setContext.prototype.SET = function () {
    return this.getToken(CypherParser.SET, 0);
  };

  C_setContext.prototype.setItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SetItemContext);
    } else {
      return this.getTypedRuleContext(SetItemContext, i);
    }
  };

  C_setContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_set(this);
    }
  };

  C_setContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_set(this);
    }
  };


  CypherParser.C_setContext = C_setContext;

  CypherParser.prototype.c_set = function () {

    var localctx = new C_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CypherParser.RULE_c_set);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 284;
      this.match(CypherParser.SET);
      this.state = 285;
      this.setItem();
      this.state = 290;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__1) {
        this.state = 286;
        this.match(CypherParser.T__1);
        this.state = 287;
        this.setItem();
        this.state = 292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SetItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setItem;
    return this;
  }

  SetItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SetItemContext.prototype.constructor = SetItemContext;

  SetItemContext.prototype.propertyExpression = function () {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  };

  SetItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  SetItemContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  SetItemContext.prototype.nodeLabels = function () {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  };

  SetItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSetItem(this);
    }
  };

  SetItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSetItem(this);
    }
  };


  CypherParser.SetItemContext = SetItemContext;

  CypherParser.prototype.setItem = function () {

    var localctx = new SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CypherParser.RULE_setItem);
    try {
      this.state = 308;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 293;
          this.propertyExpression();
          this.state = 294;
          this.match(CypherParser.T__2);
          this.state = 295;
          this.expression();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 297;
          this.variable();
          this.state = 298;
          this.match(CypherParser.T__2);
          this.state = 299;
          this.expression();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 301;
          this.variable();
          this.state = 302;
          this.match(CypherParser.T__3);
          this.state = 303;
          this.expression();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 305;
          this.variable();
          this.state = 306;
          this.nodeLabels();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_deleteContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_delete;
    return this;
  }

  C_deleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_deleteContext.prototype.constructor = C_deleteContext;

  C_deleteContext.prototype.DELETE = function () {
    return this.getToken(CypherParser.DELETE, 0);
  };

  C_deleteContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  C_deleteContext.prototype.DETACH = function () {
    return this.getToken(CypherParser.DETACH, 0);
  };

  C_deleteContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  C_deleteContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_delete(this);
    }
  };

  C_deleteContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_delete(this);
    }
  };


  CypherParser.C_deleteContext = C_deleteContext;

  CypherParser.prototype.c_delete = function () {

    var localctx = new C_deleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CypherParser.RULE_c_delete);
    var _la = 0; // Token type
    try {
      this.state = 330;
      switch (this._input.LA(1)) {
        case CypherParser.DELETE:
          this.enterOuterAlt(localctx, 1);
          this.state = 310;
          this.match(CypherParser.DELETE);
          this.state = 311;
          this.expression();
          this.state = 316;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CypherParser.T__1) {
            this.state = 312;
            this.match(CypherParser.T__1);
            this.state = 313;
            this.expression();
            this.state = 318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        case CypherParser.DETACH:
          this.enterOuterAlt(localctx, 2);
          this.state = 319;
          this.match(CypherParser.DETACH);
          this.state = 320;
          this.sp();
          this.state = 321;
          this.match(CypherParser.DELETE);
          this.state = 322;
          this.expression();
          this.state = 327;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CypherParser.T__1) {
            this.state = 323;
            this.match(CypherParser.T__1);
            this.state = 324;
            this.expression();
            this.state = 329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RemoveContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_remove;
    return this;
  }

  RemoveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RemoveContext.prototype.constructor = RemoveContext;

  RemoveContext.prototype.REMOVE = function () {
    return this.getToken(CypherParser.REMOVE, 0);
  };

  RemoveContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  RemoveContext.prototype.removeItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RemoveItemContext);
    } else {
      return this.getTypedRuleContext(RemoveItemContext, i);
    }
  };

  RemoveContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RemoveContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRemove(this);
    }
  };

  RemoveContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRemove(this);
    }
  };


  CypherParser.RemoveContext = RemoveContext;

  CypherParser.prototype.remove = function () {

    var localctx = new RemoveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CypherParser.RULE_remove);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 332;
      this.match(CypherParser.REMOVE);
      this.state = 333;
      this.sp();
      this.state = 334;
      this.removeItem();
      this.state = 342;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 14, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 335;
          this.ws();
          this.state = 336;
          this.match(CypherParser.T__1);
          this.state = 337;
          this.ws();
          this.state = 338;
          this.removeItem();
        }
        this.state = 344;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 14, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RemoveItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeItem;
    return this;
  }

  RemoveItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RemoveItemContext.prototype.constructor = RemoveItemContext;

  RemoveItemContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  RemoveItemContext.prototype.nodeLabels = function () {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  };

  RemoveItemContext.prototype.propertyExpression = function () {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  };

  RemoveItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRemoveItem(this);
    }
  };

  RemoveItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRemoveItem(this);
    }
  };


  CypherParser.RemoveItemContext = RemoveItemContext;

  CypherParser.prototype.removeItem = function () {

    var localctx = new RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CypherParser.RULE_removeItem);
    try {
      this.state = 349;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 345;
          this.variable();
          this.state = 346;
          this.nodeLabels();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 348;
          this.propertyExpression();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_withContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_with;
    return this;
  }

  C_withContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_withContext.prototype.constructor = C_withContext;

  C_withContext.prototype.WITH = function () {
    return this.getToken(CypherParser.WITH, 0);
  };

  C_withContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  C_withContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  C_withContext.prototype.c_returnBody = function () {
    return this.getTypedRuleContext(C_returnBodyContext, 0);
  };

  C_withContext.prototype.where = function () {
    return this.getTypedRuleContext(WhereContext, 0);
  };

  C_withContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_with(this);
    }
  };

  C_withContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_with(this);
    }
  };


  CypherParser.C_withContext = C_withContext;

  CypherParser.prototype.c_with = function () {

    var localctx = new C_withContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CypherParser.RULE_c_with);
    var _la = 0; // Token type
    try {
      this.state = 364;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 351;
          this.match(CypherParser.WITH);
          this.state = 352;
          this.match(CypherParser.DISTINCT);
          this.state = 353;
          this.sp();
          this.state = 354;
          this.c_returnBody();
          this.state = 356;
          _la = this._input.LA(1);
          if (_la === CypherParser.WHERE) {
            this.state = 355;
            this.where();
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 358;
          this.match(CypherParser.WITH);
          this.state = 359;
          this.sp();
          this.state = 360;
          this.c_returnBody();
          this.state = 362;
          _la = this._input.LA(1);
          if (_la === CypherParser.WHERE) {
            this.state = 361;
            this.where();
          }

          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_return;
    return this;
  }

  C_returnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnContext.prototype.constructor = C_returnContext;

  C_returnContext.prototype.RETURN = function () {
    return this.getToken(CypherParser.RETURN, 0);
  };

  C_returnContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_returnContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  C_returnContext.prototype.c_returnBody = function () {
    return this.getTypedRuleContext(C_returnBodyContext, 0);
  };

  C_returnContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_return(this);
    }
  };

  C_returnContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_return(this);
    }
  };


  CypherParser.C_returnContext = C_returnContext;

  CypherParser.prototype.c_return = function () {

    var localctx = new C_returnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CypherParser.RULE_c_return);
    try {
      this.state = 376;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 366;
          this.match(CypherParser.RETURN);
          this.state = 367;
          this.sp();
          this.state = 368;
          this.match(CypherParser.DISTINCT);
          this.state = 369;
          this.sp();
          this.state = 370;
          this.c_returnBody();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 372;
          this.match(CypherParser.RETURN);
          this.state = 373;
          this.sp();
          this.state = 374;
          this.c_returnBody();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnBodyContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_returnBody;
    return this;
  }

  C_returnBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnBodyContext.prototype.constructor = C_returnBodyContext;

  C_returnBodyContext.prototype.c_returnItems = function () {
    return this.getTypedRuleContext(C_returnItemsContext, 0);
  };

  C_returnBodyContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_returnBodyContext.prototype.order = function () {
    return this.getTypedRuleContext(OrderContext, 0);
  };

  C_returnBodyContext.prototype.skip = function () {
    return this.getTypedRuleContext(SkipContext, 0);
  };

  C_returnBodyContext.prototype.limit = function () {
    return this.getTypedRuleContext(LimitContext, 0);
  };

  C_returnBodyContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_returnBody(this);
    }
  };

  C_returnBodyContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_returnBody(this);
    }
  };


  CypherParser.C_returnBodyContext = C_returnBodyContext;

  CypherParser.prototype.c_returnBody = function () {

    var localctx = new C_returnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CypherParser.RULE_c_returnBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 378;
      this.c_returnItems();
      this.state = 382;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
      if (la_ === 1) {
        this.state = 379;
        this.sp();
        this.state = 380;
        this.order();

      }
      this.state = 387;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
      if (la_ === 1) {
        this.state = 384;
        this.sp();
        this.state = 385;
        this.skip();

      }
      this.state = 392;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
      if (la_ === 1) {
        this.state = 389;
        this.sp();
        this.state = 390;
        this.limit();

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnItemsContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_returnItems;
    return this;
  }

  C_returnItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnItemsContext.prototype.constructor = C_returnItemsContext;

  C_returnItemsContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  C_returnItemsContext.prototype.c_returnItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(C_returnItemContext);
    } else {
      return this.getTypedRuleContext(C_returnItemContext, i);
    }
  };

  C_returnItemsContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_returnItems(this);
    }
  };

  C_returnItemsContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_returnItems(this);
    }
  };


  CypherParser.C_returnItemsContext = C_returnItemsContext;

  CypherParser.prototype.c_returnItems = function () {

    var localctx = new C_returnItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CypherParser.RULE_c_returnItems);
    try {
      this.state = 416;
      switch (this._input.LA(1)) {
        case CypherParser.T__4:
          this.enterOuterAlt(localctx, 1);
          this.state = 394;
          this.match(CypherParser.T__4);
          this.state = 402;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 23, this._ctx)
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 395;
              this.ws();
              this.state = 396;
              this.match(CypherParser.T__1);
              this.state = 397;
              this.ws();
              this.state = 398;
              this.c_returnItem();
            }
            this.state = 404;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 23, this._ctx);
          }

          break;
        case CypherParser.T__5:
        case CypherParser.T__7:
        case CypherParser.T__13:
        case CypherParser.T__14:
        case CypherParser.T__25:
        case CypherParser.T__27:
        case CypherParser.T__29:
        case CypherParser.T__30:
        case CypherParser.T__31:
        case CypherParser.T__32:
        case CypherParser.T__33:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
        case CypherParser.T__38:
        case CypherParser.StringLiteral:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DELETE:
        case CypherParser.DETACH:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.L_0X:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
        case CypherParser.WHITESPACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 405;
          this.c_returnItem();
          this.state = 413;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 24, this._ctx)
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 406;
              this.ws();
              this.state = 407;
              this.match(CypherParser.T__1);
              this.state = 408;
              this.ws();
              this.state = 409;
              this.c_returnItem();
            }
            this.state = 415;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_returnItem;
    return this;
  }

  C_returnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnItemContext.prototype.constructor = C_returnItemContext;

  C_returnItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  C_returnItemContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_returnItemContext.prototype.AS = function () {
    return this.getToken(CypherParser.AS, 0);
  };

  C_returnItemContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  C_returnItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_returnItem(this);
    }
  };

  C_returnItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_returnItem(this);
    }
  };


  CypherParser.C_returnItemContext = C_returnItemContext;

  CypherParser.prototype.c_returnItem = function () {

    var localctx = new C_returnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CypherParser.RULE_c_returnItem);
    try {
      this.state = 425;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 418;
          this.expression();
          this.state = 419;
          this.sp();
          this.state = 420;
          this.match(CypherParser.AS);
          this.state = 421;
          this.sp();
          this.state = 422;
          this.variable();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 424;
          this.expression();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OrderContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_order;
    return this;
  }

  OrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OrderContext.prototype.constructor = OrderContext;

  OrderContext.prototype.ORDER = function () {
    return this.getToken(CypherParser.ORDER, 0);
  };

  OrderContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  OrderContext.prototype.BY = function () {
    return this.getToken(CypherParser.BY, 0);
  };

  OrderContext.prototype.sortItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SortItemContext);
    } else {
      return this.getTypedRuleContext(SortItemContext, i);
    }
  };

  OrderContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  OrderContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOrder(this);
    }
  };

  OrderContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOrder(this);
    }
  };


  CypherParser.OrderContext = OrderContext;

  CypherParser.prototype.order = function () {

    var localctx = new OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CypherParser.RULE_order);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 427;
      this.match(CypherParser.ORDER);
      this.state = 428;
      this.sp();
      this.state = 429;
      this.match(CypherParser.BY);
      this.state = 430;
      this.sp();
      this.state = 431;
      this.sortItem();
      this.state = 438;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__1) {
        this.state = 432;
        this.match(CypherParser.T__1);
        this.state = 433;
        this.ws();
        this.state = 434;
        this.sortItem();
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SkipContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_skip;
    return this;
  }

  SkipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SkipContext.prototype.constructor = SkipContext;

  SkipContext.prototype.L_SKIP = function () {
    return this.getToken(CypherParser.L_SKIP, 0);
  };

  SkipContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  SkipContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  SkipContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSkip(this);
    }
  };

  SkipContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSkip(this);
    }
  };


  CypherParser.SkipContext = SkipContext;

  CypherParser.prototype.skip = function () {

    var localctx = new SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CypherParser.RULE_skip);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 441;
      this.match(CypherParser.L_SKIP);
      this.state = 442;
      this.sp();
      this.state = 443;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function LimitContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_limit;
    return this;
  }

  LimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  LimitContext.prototype.constructor = LimitContext;

  LimitContext.prototype.LIMIT = function () {
    return this.getToken(CypherParser.LIMIT, 0);
  };

  LimitContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  LimitContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  LimitContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterLimit(this);
    }
  };

  LimitContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitLimit(this);
    }
  };


  CypherParser.LimitContext = LimitContext;

  CypherParser.prototype.limit = function () {

    var localctx = new LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CypherParser.RULE_limit);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 445;
      this.match(CypherParser.LIMIT);
      this.state = 446;
      this.sp();
      this.state = 447;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SortItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sortItem;
    return this;
  }

  SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SortItemContext.prototype.constructor = SortItemContext;

  SortItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  SortItemContext.prototype.DESCENDING = function () {
    return this.getToken(CypherParser.DESCENDING, 0);
  };

  SortItemContext.prototype.DESC = function () {
    return this.getToken(CypherParser.DESC, 0);
  };

  SortItemContext.prototype.ASCENDING = function () {
    return this.getToken(CypherParser.ASCENDING, 0);
  };

  SortItemContext.prototype.ASC = function () {
    return this.getToken(CypherParser.ASC, 0);
  };

  SortItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSortItem(this);
    }
  };

  SortItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSortItem(this);
    }
  };


  CypherParser.SortItemContext = SortItemContext;

  CypherParser.prototype.sortItem = function () {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CypherParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
      this.state = 456;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 449;
          this.expression();
          this.state = 450;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.DESCENDING || _la === CypherParser.DESC)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 452;
          this.expression();
          this.state = 454;
          _la = this._input.LA(1);
          if (_la === CypherParser.ASCENDING || _la === CypherParser.ASC) {
            this.state = 453;
            _la = this._input.LA(1);
            if (!(_la === CypherParser.ASCENDING || _la === CypherParser.ASC)) {
              this._errHandler.recoverInline(this);
            }
            else {
              this.consume();
            }
          }

          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function WhereContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_where;
    return this;
  }

  WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  WhereContext.prototype.constructor = WhereContext;

  WhereContext.prototype.WHERE = function () {
    return this.getToken(CypherParser.WHERE, 0);
  };

  WhereContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  WhereContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  WhereContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterWhere(this);
    }
  };

  WhereContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitWhere(this);
    }
  };


  CypherParser.WhereContext = WhereContext;

  CypherParser.prototype.where = function () {

    var localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CypherParser.RULE_where);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 458;
      this.match(CypherParser.WHERE);
      this.state = 459;
      this.sp();
      this.state = 460;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pattern;
    return this;
  }

  PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternContext.prototype.constructor = PatternContext;

  PatternContext.prototype.patternPart = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PatternPartContext);
    } else {
      return this.getTypedRuleContext(PatternPartContext, i);
    }
  };

  PatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPattern(this);
    }
  };

  PatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPattern(this);
    }
  };


  CypherParser.PatternContext = PatternContext;

  CypherParser.prototype.pattern = function () {

    var localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CypherParser.RULE_pattern);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 462;
      this.patternPart();
      this.state = 467;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__1) {
        this.state = 463;
        this.match(CypherParser.T__1);
        this.state = 464;
        this.patternPart();
        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternPartContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternPart;
    return this;
  }

  PatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternPartContext.prototype.constructor = PatternPartContext;

  PatternPartContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  PatternPartContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PatternPartContext.prototype.anonymousPatternPart = function () {
    return this.getTypedRuleContext(AnonymousPatternPartContext, 0);
  };

  PatternPartContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternPart(this);
    }
  };

  PatternPartContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternPart(this);
    }
  };


  CypherParser.PatternPartContext = PatternPartContext;

  CypherParser.prototype.patternPart = function () {

    var localctx = new PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CypherParser.RULE_patternPart);
    try {
      this.state = 477;
      switch (this._input.LA(1)) {
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DELETE:
        case CypherParser.DETACH:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.L_0X:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 1);
          this.state = 470;
          this.variable();
          this.state = 471;
          this.ws();
          this.state = 472;
          this.match(CypherParser.T__2);
          this.state = 473;
          this.ws();
          this.state = 474;
          this.anonymousPatternPart();
          break;
        case CypherParser.T__5:
          this.enterOuterAlt(localctx, 2);
          this.state = 476;
          this.anonymousPatternPart();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function AnonymousPatternPartContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anonymousPatternPart;
    return this;
  }

  AnonymousPatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  AnonymousPatternPartContext.prototype.constructor = AnonymousPatternPartContext;

  AnonymousPatternPartContext.prototype.patternElement = function () {
    return this.getTypedRuleContext(PatternElementContext, 0);
  };

  AnonymousPatternPartContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterAnonymousPatternPart(this);
    }
  };

  AnonymousPatternPartContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitAnonymousPatternPart(this);
    }
  };


  CypherParser.AnonymousPatternPartContext = AnonymousPatternPartContext;

  CypherParser.prototype.anonymousPatternPart = function () {

    var localctx = new AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CypherParser.RULE_anonymousPatternPart);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 479;
      this.patternElement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternElementContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElement;
    return this;
  }

  PatternElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternElementContext.prototype.constructor = PatternElementContext;

  PatternElementContext.prototype.nodePattern = function () {
    return this.getTypedRuleContext(NodePatternContext, 0);
  };

  PatternElementContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PatternElementContext.prototype.patternElementChain = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
      return this.getTypedRuleContext(PatternElementChainContext, i);
    }
  };

  PatternElementContext.prototype.patternElement = function () {
    return this.getTypedRuleContext(PatternElementContext, 0);
  };

  PatternElementContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternElement(this);
    }
  };

  PatternElementContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternElement(this);
    }
  };


  CypherParser.PatternElementContext = PatternElementContext;

  CypherParser.prototype.patternElement = function () {

    var localctx = new PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CypherParser.RULE_patternElement);
    try {
      this.state = 494;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 481;
          this.nodePattern();
          this.state = 487;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 32, this._ctx)
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 482;
              this.ws();
              this.state = 483;
              this.patternElementChain();
            }
            this.state = 489;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 32, this._ctx);
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 490;
          this.match(CypherParser.T__5);
          this.state = 491;
          this.patternElement();
          this.state = 492;
          this.match(CypherParser.T__6);
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NodePatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePattern;
    return this;
  }

  NodePatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NodePatternContext.prototype.constructor = NodePatternContext;

  NodePatternContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  NodePatternContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  NodePatternContext.prototype.nodeLabels = function () {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  };

  NodePatternContext.prototype.properties = function () {
    return this.getTypedRuleContext(PropertiesContext, 0);
  };

  NodePatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodePattern(this);
    }
  };

  NodePatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodePattern(this);
    }
  };


  CypherParser.NodePatternContext = NodePatternContext;

  CypherParser.prototype.nodePattern = function () {

    var localctx = new NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CypherParser.RULE_nodePattern);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 496;
      this.match(CypherParser.T__5);
      this.state = 497;
      this.ws();
      this.state = 501;
      _la = this._input.LA(1);
      if (((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0)) {
        this.state = 498;
        this.variable();
        this.state = 499;
        this.ws();
      }

      this.state = 506;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__10) {
        this.state = 503;
        this.nodeLabels();
        this.state = 504;
        this.ws();
      }

      this.state = 511;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__27) {
        this.state = 508;
        this.properties();
        this.state = 509;
        this.ws();
      }

      this.state = 513;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternElementChainContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElementChain;
    return this;
  }

  PatternElementChainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternElementChainContext.prototype.constructor = PatternElementChainContext;

  PatternElementChainContext.prototype.relationshipPattern = function () {
    return this.getTypedRuleContext(RelationshipPatternContext, 0);
  };

  PatternElementChainContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  PatternElementChainContext.prototype.nodePattern = function () {
    return this.getTypedRuleContext(NodePatternContext, 0);
  };

  PatternElementChainContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternElementChain(this);
    }
  };

  PatternElementChainContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternElementChain(this);
    }
  };


  CypherParser.PatternElementChainContext = PatternElementChainContext;

  CypherParser.prototype.patternElementChain = function () {

    var localctx = new PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CypherParser.RULE_patternElementChain);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 515;
      this.relationshipPattern();
      this.state = 516;
      this.ws();
      this.state = 517;
      this.nodePattern();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipPatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPattern;
    return this;
  }

  RelationshipPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipPatternContext.prototype.constructor = RelationshipPatternContext;

  RelationshipPatternContext.prototype.leftArrowHead = function () {
    return this.getTypedRuleContext(LeftArrowHeadContext, 0);
  };

  RelationshipPatternContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RelationshipPatternContext.prototype.dash = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DashContext);
    } else {
      return this.getTypedRuleContext(DashContext, i);
    }
  };

  RelationshipPatternContext.prototype.rightArrowHead = function () {
    return this.getTypedRuleContext(RightArrowHeadContext, 0);
  };

  RelationshipPatternContext.prototype.relationshipDetail = function () {
    return this.getTypedRuleContext(RelationshipDetailContext, 0);
  };

  RelationshipPatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPattern(this);
    }
  };

  RelationshipPatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPattern(this);
    }
  };


  CypherParser.RelationshipPatternContext = RelationshipPatternContext;

  CypherParser.prototype.relationshipPattern = function () {

    var localctx = new RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CypherParser.RULE_relationshipPattern);
    var _la = 0; // Token type
    try {
      this.state = 559;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 519;
          this.leftArrowHead();
          this.state = 520;
          this.ws();
          this.state = 521;
          this.dash();
          this.state = 522;
          this.ws();
          this.state = 524;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 523;
            this.relationshipDetail();
          }

          this.state = 526;
          this.ws();
          this.state = 527;
          this.dash();
          this.state = 528;
          this.ws();
          this.state = 529;
          this.rightArrowHead();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 531;
          this.leftArrowHead();
          this.state = 532;
          this.ws();
          this.state = 533;
          this.dash();
          this.state = 534;
          this.ws();
          this.state = 536;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 535;
            this.relationshipDetail();
          }

          this.state = 538;
          this.ws();
          this.state = 539;
          this.dash();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 541;
          this.dash();
          this.state = 542;
          this.ws();
          this.state = 544;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 543;
            this.relationshipDetail();
          }

          this.state = 546;
          this.ws();
          this.state = 547;
          this.dash();
          this.state = 548;
          this.ws();
          this.state = 549;
          this.rightArrowHead();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 551;
          this.dash();
          this.state = 552;
          this.ws();
          this.state = 554;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 553;
            this.relationshipDetail();
          }

          this.state = 556;
          this.ws();
          this.state = 557;
          this.dash();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipDetailContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipDetail;
    return this;
  }

  RelationshipDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipDetailContext.prototype.constructor = RelationshipDetailContext;

  RelationshipDetailContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  RelationshipDetailContext.prototype.relationshipTypes = function () {
    return this.getTypedRuleContext(RelationshipTypesContext, 0);
  };

  RelationshipDetailContext.prototype.properties = function () {
    return this.getTypedRuleContext(PropertiesContext, 0);
  };

  RelationshipDetailContext.prototype.rangeLiteral = function () {
    return this.getTypedRuleContext(RangeLiteralContext, 0);
  };

  RelationshipDetailContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipDetail(this);
    }
  };

  RelationshipDetailContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipDetail(this);
    }
  };


  CypherParser.RelationshipDetailContext = RelationshipDetailContext;

  CypherParser.prototype.relationshipDetail = function () {

    var localctx = new RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CypherParser.RULE_relationshipDetail);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 561;
      this.match(CypherParser.T__7);
      this.state = 563;
      _la = this._input.LA(1);
      if (((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0)) {
        this.state = 562;
        this.variable();
      }

      this.state = 566;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__8) {
        this.state = 565;
        this.match(CypherParser.T__8);
      }

      this.state = 569;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__10) {
        this.state = 568;
        this.relationshipTypes();
      }

      this.state = 575;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__4) {
        this.state = 571;
        this.match(CypherParser.T__4);
        this.state = 573;
        _la = this._input.LA(1);
        if (((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (CypherParser.T__12 - 13)) | (1 << (CypherParser.T__29 - 13)) | (1 << (CypherParser.T__30 - 13)) | (1 << (CypherParser.T__31 - 13)) | (1 << (CypherParser.T__32 - 13)) | (1 << (CypherParser.T__33 - 13)) | (1 << (CypherParser.T__34 - 13)) | (1 << (CypherParser.T__35 - 13)) | (1 << (CypherParser.T__36 - 13)) | (1 << (CypherParser.T__37 - 13)) | (1 << (CypherParser.T__38 - 13)))) !== 0)) {
          this.state = 572;
          this.rangeLiteral();
        }

      }

      this.state = 578;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__27) {
        this.state = 577;
        this.properties();
      }

      this.state = 580;
      this.match(CypherParser.T__9);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertiesContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_properties;
    return this;
  }

  PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertiesContext.prototype.constructor = PropertiesContext;

  PropertiesContext.prototype.mapLiteral = function () {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  };

  PropertiesContext.prototype.parameter = function () {
    return this.getTypedRuleContext(ParameterContext, 0);
  };

  PropertiesContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterProperties(this);
    }
  };

  PropertiesContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitProperties(this);
    }
  };


  CypherParser.PropertiesContext = PropertiesContext;

  CypherParser.prototype.properties = function () {

    var localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CypherParser.RULE_properties);
    try {
      this.state = 584;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 582;
          this.mapLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 583;
          this.parameter();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipTypesContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypes;
    return this;
  }

  RelationshipTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipTypesContext.prototype.constructor = RelationshipTypesContext;

  RelationshipTypesContext.prototype.relTypeName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RelTypeNameContext);
    } else {
      return this.getTypedRuleContext(RelTypeNameContext, i);
    }
  };

  RelationshipTypesContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RelationshipTypesContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipTypes(this);
    }
  };

  RelationshipTypesContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipTypes(this);
    }
  };


  CypherParser.RelationshipTypesContext = RelationshipTypesContext;

  CypherParser.prototype.relationshipTypes = function () {

    var localctx = new RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CypherParser.RULE_relationshipTypes);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 586;
      this.match(CypherParser.T__10);
      this.state = 587;
      this.relTypeName();
      this.state = 598;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__11 || _la === CypherParser.WHITESPACE) {
        this.state = 588;
        this.ws();
        this.state = 589;
        this.match(CypherParser.T__11);
        this.state = 591;
        _la = this._input.LA(1);
        if (_la === CypherParser.T__10) {
          this.state = 590;
          this.match(CypherParser.T__10);
        }

        this.state = 593;
        this.ws();
        this.state = 594;
        this.relTypeName();
        this.state = 600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NodeLabelsContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabels;
    return this;
  }

  NodeLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NodeLabelsContext.prototype.constructor = NodeLabelsContext;

  NodeLabelsContext.prototype.nodeLabel = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NodeLabelContext);
    } else {
      return this.getTypedRuleContext(NodeLabelContext, i);
    }
  };

  NodeLabelsContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  NodeLabelsContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLabels(this);
    }
  };

  NodeLabelsContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLabels(this);
    }
  };


  CypherParser.NodeLabelsContext = NodeLabelsContext;

  CypherParser.prototype.nodeLabels = function () {

    var localctx = new NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CypherParser.RULE_nodeLabels);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 601;
      this.nodeLabel();
      this.state = 607;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 602;
          this.ws();
          this.state = 603;
          this.nodeLabel();
        }
        this.state = 609;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NodeLabelContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabel;
    return this;
  }

  NodeLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NodeLabelContext.prototype.constructor = NodeLabelContext;

  NodeLabelContext.prototype.labelName = function () {
    return this.getTypedRuleContext(LabelNameContext, 0);
  };

  NodeLabelContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLabel(this);
    }
  };

  NodeLabelContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLabel(this);
    }
  };


  CypherParser.NodeLabelContext = NodeLabelContext;

  CypherParser.prototype.nodeLabel = function () {

    var localctx = new NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CypherParser.RULE_nodeLabel);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 610;
      this.match(CypherParser.T__10);
      this.state = 611;
      this.labelName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RangeLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rangeLiteral;
    return this;
  }

  RangeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RangeLiteralContext.prototype.constructor = RangeLiteralContext;

  RangeLiteralContext.prototype.unsignedIntegerLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(UnsignedIntegerLiteralContext);
    } else {
      return this.getTypedRuleContext(UnsignedIntegerLiteralContext, i);
    }
  };

  RangeLiteralContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RangeLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRangeLiteral(this);
    }
  };

  RangeLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRangeLiteral(this);
    }
  };


  CypherParser.RangeLiteralContext = RangeLiteralContext;

  CypherParser.prototype.rangeLiteral = function () {

    var localctx = new RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CypherParser.RULE_rangeLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 616;
      _la = this._input.LA(1);
      if (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0)) {
        this.state = 613;
        this.unsignedIntegerLiteral();
        this.state = 614;
        this.ws();
      }

      this.state = 618;
      this.match(CypherParser.T__12);
      this.state = 622;
      _la = this._input.LA(1);
      if (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0) || _la === CypherParser.WHITESPACE) {
        this.state = 619;
        this.ws();
        this.state = 620;
        this.unsignedIntegerLiteral();
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function LabelNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_labelName;
    return this;
  }

  LabelNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  LabelNameContext.prototype.constructor = LabelNameContext;

  LabelNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  LabelNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterLabelName(this);
    }
  };

  LabelNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitLabelName(this);
    }
  };


  CypherParser.LabelNameContext = LabelNameContext;

  CypherParser.prototype.labelName = function () {

    var localctx = new LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CypherParser.RULE_labelName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 624;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelTypeNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relTypeName;
    return this;
  }

  RelTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelTypeNameContext.prototype.constructor = RelTypeNameContext;

  RelTypeNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  RelTypeNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelTypeName(this);
    }
  };

  RelTypeNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelTypeName(this);
    }
  };


  CypherParser.RelTypeNameContext = RelTypeNameContext;

  CypherParser.prototype.relTypeName = function () {

    var localctx = new RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CypherParser.RULE_relTypeName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 626;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression;
    return this;
  }

  ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ExpressionContext.prototype.constructor = ExpressionContext;

  ExpressionContext.prototype.expression12 = function () {
    return this.getTypedRuleContext(Expression12Context, 0);
  };

  ExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression(this);
    }
  };

  ExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression(this);
    }
  };


  CypherParser.ExpressionContext = ExpressionContext;

  CypherParser.prototype.expression = function () {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CypherParser.RULE_expression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 628;
      this.expression12();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression12Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression12;
    return this;
  }

  Expression12Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression12Context.prototype.constructor = Expression12Context;

  Expression12Context.prototype.expression11 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression11Context);
    } else {
      return this.getTypedRuleContext(Expression11Context, i);
    }
  };

  Expression12Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression12Context.prototype.OR = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.OR);
    } else {
      return this.getToken(CypherParser.OR, i);
    }
  };


  Expression12Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression12(this);
    }
  };

  Expression12Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression12(this);
    }
  };


  CypherParser.Expression12Context = Expression12Context;

  CypherParser.prototype.expression12 = function () {

    var localctx = new Expression12Context(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CypherParser.RULE_expression12);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 630;
      this.expression11();
      this.state = 638;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 54, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 631;
          this.sp();
          this.state = 632;
          this.match(CypherParser.OR);
          this.state = 633;
          this.sp();
          this.state = 634;
          this.expression11();
        }
        this.state = 640;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression11Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression11;
    return this;
  }

  Expression11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression11Context.prototype.constructor = Expression11Context;

  Expression11Context.prototype.expression10 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression10Context);
    } else {
      return this.getTypedRuleContext(Expression10Context, i);
    }
  };

  Expression11Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression11Context.prototype.XOR = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.XOR);
    } else {
      return this.getToken(CypherParser.XOR, i);
    }
  };


  Expression11Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression11(this);
    }
  };

  Expression11Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression11(this);
    }
  };


  CypherParser.Expression11Context = Expression11Context;

  CypherParser.prototype.expression11 = function () {

    var localctx = new Expression11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CypherParser.RULE_expression11);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 641;
      this.expression10();
      this.state = 649;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 55, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 642;
          this.sp();
          this.state = 643;
          this.match(CypherParser.XOR);
          this.state = 644;
          this.sp();
          this.state = 645;
          this.expression10();
        }
        this.state = 651;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression10Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression10;
    return this;
  }

  Expression10Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression10Context.prototype.constructor = Expression10Context;

  Expression10Context.prototype.expression9 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression9Context);
    } else {
      return this.getTypedRuleContext(Expression9Context, i);
    }
  };

  Expression10Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression10Context.prototype.AND = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.AND);
    } else {
      return this.getToken(CypherParser.AND, i);
    }
  };


  Expression10Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression10(this);
    }
  };

  Expression10Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression10(this);
    }
  };


  CypherParser.Expression10Context = Expression10Context;

  CypherParser.prototype.expression10 = function () {

    var localctx = new Expression10Context(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CypherParser.RULE_expression10);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 652;
      this.expression9();
      this.state = 660;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 56, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 653;
          this.sp();
          this.state = 654;
          this.match(CypherParser.AND);
          this.state = 655;
          this.sp();
          this.state = 656;
          this.expression9();
        }
        this.state = 662;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 56, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression9Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression9;
    return this;
  }

  Expression9Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression9Context.prototype.constructor = Expression9Context;

  Expression9Context.prototype.expression8 = function () {
    return this.getTypedRuleContext(Expression8Context, 0);
  };

  Expression9Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression9Context.prototype.NOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.NOT);
    } else {
      return this.getToken(CypherParser.NOT, i);
    }
  };


  Expression9Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression9(this);
    }
  };

  Expression9Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression9(this);
    }
  };


  CypherParser.Expression9Context = Expression9Context;

  CypherParser.prototype.expression9 = function () {

    var localctx = new Expression9Context(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CypherParser.RULE_expression9);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 669;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.WHITESPACE) {
        this.state = 663;
        this.sp();
        this.state = 664;
        this.match(CypherParser.NOT);
        this.state = 665;
        this.sp();
        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 672;
      this.expression8();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression8Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression8;
    return this;
  }

  Expression8Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression8Context.prototype.constructor = Expression8Context;

  Expression8Context.prototype.expression7 = function () {
    return this.getTypedRuleContext(Expression7Context, 0);
  };

  Expression8Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression8Context.prototype.partialComparisonExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartialComparisonExpressionContext);
    } else {
      return this.getTypedRuleContext(PartialComparisonExpressionContext, i);
    }
  };

  Expression8Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression8(this);
    }
  };

  Expression8Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression8(this);
    }
  };


  CypherParser.Expression8Context = Expression8Context;

  CypherParser.prototype.expression8 = function () {

    var localctx = new Expression8Context(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CypherParser.RULE_expression8);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 674;
      this.expression7();
      this.state = 680;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 675;
          this.ws();
          this.state = 676;
          this.partialComparisonExpression();
        }
        this.state = 682;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression7Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression7;
    return this;
  }

  Expression7Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression7Context.prototype.constructor = Expression7Context;

  Expression7Context.prototype.expression6 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression6Context);
    } else {
      return this.getTypedRuleContext(Expression6Context, i);
    }
  };

  Expression7Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression7Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression7(this);
    }
  };

  Expression7Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression7(this);
    }
  };


  CypherParser.Expression7Context = Expression7Context;

  CypherParser.prototype.expression7 = function () {

    var localctx = new Expression7Context(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CypherParser.RULE_expression7);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 683;
      this.expression6();
      this.state = 696;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 60, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 694;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
          switch (la_) {
            case 1:
              this.state = 684;
              this.ws();
              this.state = 685;
              this.match(CypherParser.T__13);
              this.state = 686;
              this.ws();
              this.state = 687;
              this.expression6();
              break;

            case 2:
              this.state = 689;
              this.ws();
              this.state = 690;
              this.match(CypherParser.T__14);
              this.state = 691;
              this.ws();
              this.state = 692;
              this.expression6();
              break;

          }
        }
        this.state = 698;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 60, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression6Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression6;
    return this;
  }

  Expression6Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression6Context.prototype.constructor = Expression6Context;

  Expression6Context.prototype.expression5 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression5Context);
    } else {
      return this.getTypedRuleContext(Expression5Context, i);
    }
  };

  Expression6Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression6Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression6(this);
    }
  };

  Expression6Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression6(this);
    }
  };


  CypherParser.Expression6Context = Expression6Context;

  CypherParser.prototype.expression6 = function () {

    var localctx = new Expression6Context(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CypherParser.RULE_expression6);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 699;
      this.expression5();
      this.state = 717;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 62, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 715;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
          switch (la_) {
            case 1:
              this.state = 700;
              this.ws();
              this.state = 701;
              this.match(CypherParser.T__4);
              this.state = 702;
              this.ws();
              this.state = 703;
              this.expression5();
              break;

            case 2:
              this.state = 705;
              this.ws();
              this.state = 706;
              this.match(CypherParser.T__15);
              this.state = 707;
              this.ws();
              this.state = 708;
              this.expression5();
              break;

            case 3:
              this.state = 710;
              this.ws();
              this.state = 711;
              this.match(CypherParser.T__16);
              this.state = 712;
              this.ws();
              this.state = 713;
              this.expression5();
              break;

          }
        }
        this.state = 719;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression5Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression5;
    return this;
  }

  Expression5Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression5Context.prototype.constructor = Expression5Context;

  Expression5Context.prototype.expression4 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression4Context);
    } else {
      return this.getTypedRuleContext(Expression4Context, i);
    }
  };

  Expression5Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression5Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression5(this);
    }
  };

  Expression5Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression5(this);
    }
  };


  CypherParser.Expression5Context = Expression5Context;

  CypherParser.prototype.expression5 = function () {

    var localctx = new Expression5Context(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CypherParser.RULE_expression5);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 720;
      this.expression4();
      this.state = 728;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 63, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 721;
          this.ws();
          this.state = 722;
          this.match(CypherParser.T__17);
          this.state = 723;
          this.ws();
          this.state = 724;
          this.expression4();
        }
        this.state = 730;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression4Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression4;
    return this;
  }

  Expression4Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression4Context.prototype.constructor = Expression4Context;

  Expression4Context.prototype.expression3 = function () {
    return this.getTypedRuleContext(Expression3Context, 0);
  };

  Expression4Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression4Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression4(this);
    }
  };

  Expression4Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression4(this);
    }
  };


  CypherParser.Expression4Context = Expression4Context;

  CypherParser.prototype.expression4 = function () {

    var localctx = new Expression4Context(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CypherParser.RULE_expression4);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 735;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 64, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 731;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__13 || _la === CypherParser.T__14)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          this.state = 732;
          this.ws();
        }
        this.state = 737;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
      }

      this.state = 738;
      this.expression3();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression3Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression3;
    return this;
  }

  Expression3Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression3Context.prototype.constructor = Expression3Context;

  Expression3Context.prototype.expression2 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression2Context);
    } else {
      return this.getTypedRuleContext(Expression2Context, i);
    }
  };

  Expression3Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression3Context.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  Expression3Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression3Context.prototype.IS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.IS);
    } else {
      return this.getToken(CypherParser.IS, i);
    }
  };


  Expression3Context.prototype.NULL = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.NULL);
    } else {
      return this.getToken(CypherParser.NULL, i);
    }
  };


  Expression3Context.prototype.NOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.NOT);
    } else {
      return this.getToken(CypherParser.NOT, i);
    }
  };


  Expression3Context.prototype.IN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.IN);
    } else {
      return this.getToken(CypherParser.IN, i);
    }
  };


  Expression3Context.prototype.STARTS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.STARTS);
    } else {
      return this.getToken(CypherParser.STARTS, i);
    }
  };


  Expression3Context.prototype.WITH = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.WITH);
    } else {
      return this.getToken(CypherParser.WITH, i);
    }
  };


  Expression3Context.prototype.ENDS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.ENDS);
    } else {
      return this.getToken(CypherParser.ENDS, i);
    }
  };


  Expression3Context.prototype.CONTAINS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.CONTAINS);
    } else {
      return this.getToken(CypherParser.CONTAINS, i);
    }
  };


  Expression3Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression3(this);
    }
  };

  Expression3Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression3(this);
    }
  };


  CypherParser.Expression3Context = Expression3Context;

  CypherParser.prototype.expression3 = function () {

    var localctx = new Expression3Context(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CypherParser.RULE_expression3);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 740;
      this.expression2();
      this.state = 795;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 69, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 793;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
          switch (la_) {
            case 1:
              this.state = 741;
              this.ws();
              this.state = 742;
              this.match(CypherParser.T__7);
              this.state = 743;
              this.expression();
              this.state = 744;
              this.match(CypherParser.T__9);
              break;

            case 2:
              this.state = 746;
              this.ws();
              this.state = 747;
              this.match(CypherParser.T__7);
              this.state = 749;
              _la = this._input.LA(1);
              if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__13) | (1 << CypherParser.T__14) | (1 << CypherParser.T__25) | (1 << CypherParser.T__27) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.T__31 - 32)) | (1 << (CypherParser.T__32 - 32)) | (1 << (CypherParser.T__33 - 32)) | (1 << (CypherParser.T__34 - 32)) | (1 << (CypherParser.T__35 - 32)) | (1 << (CypherParser.T__36 - 32)) | (1 << (CypherParser.T__37 - 32)) | (1 << (CypherParser.T__38 - 32)) | (1 << (CypherParser.StringLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)) | (1 << (CypherParser.WHITESPACE - 96)))) !== 0)) {
                this.state = 748;
                this.expression();
              }

              this.state = 751;
              this.match(CypherParser.T__12);
              this.state = 753;
              _la = this._input.LA(1);
              if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__13) | (1 << CypherParser.T__14) | (1 << CypherParser.T__25) | (1 << CypherParser.T__27) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.T__31 - 32)) | (1 << (CypherParser.T__32 - 32)) | (1 << (CypherParser.T__33 - 32)) | (1 << (CypherParser.T__34 - 32)) | (1 << (CypherParser.T__35 - 32)) | (1 << (CypherParser.T__36 - 32)) | (1 << (CypherParser.T__37 - 32)) | (1 << (CypherParser.T__38 - 32)) | (1 << (CypherParser.StringLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)) | (1 << (CypherParser.WHITESPACE - 96)))) !== 0)) {
                this.state = 752;
                this.expression();
              }

              this.state = 755;
              this.match(CypherParser.T__9);
              break;

            case 3:
              this.state = 776;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 757;
                  this.ws();
                  this.state = 758;
                  this.match(CypherParser.T__18);
                  break;

                case 2:
                  this.state = 760;
                  this.sp();
                  this.state = 761;
                  this.match(CypherParser.IN);
                  break;

                case 3:
                  this.state = 763;
                  this.sp();
                  this.state = 764;
                  this.match(CypherParser.STARTS);
                  this.state = 765;
                  this.sp();
                  this.state = 766;
                  this.match(CypherParser.WITH);
                  break;

                case 4:
                  this.state = 768;
                  this.sp();
                  this.state = 769;
                  this.match(CypherParser.ENDS);
                  this.state = 770;
                  this.sp();
                  this.state = 771;
                  this.match(CypherParser.WITH);
                  break;

                case 5:
                  this.state = 773;
                  this.sp();
                  this.state = 774;
                  this.match(CypherParser.CONTAINS);
                  break;

              }
              this.state = 778;
              this.ws();
              this.state = 779;
              this.expression2();
              break;

            case 4:
              this.state = 781;
              this.sp();
              this.state = 782;
              this.match(CypherParser.IS);
              this.state = 783;
              this.sp();
              this.state = 784;
              this.match(CypherParser.NULL);
              break;

            case 5:
              this.state = 786;
              this.sp();
              this.state = 787;
              this.match(CypherParser.IS);
              this.state = 788;
              this.sp();
              this.state = 789;
              this.match(CypherParser.NOT);
              this.state = 790;
              this.sp();
              this.state = 791;
              this.match(CypherParser.NULL);
              break;

          }
        }
        this.state = 797;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression2Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression2;
    return this;
  }

  Expression2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression2Context.prototype.constructor = Expression2Context;

  Expression2Context.prototype.atom = function () {
    return this.getTypedRuleContext(AtomContext, 0);
  };

  Expression2Context.prototype.propertyLookup = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
      return this.getTypedRuleContext(PropertyLookupContext, i);
    }
  };

  Expression2Context.prototype.nodeLabels = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NodeLabelsContext);
    } else {
      return this.getTypedRuleContext(NodeLabelsContext, i);
    }
  };

  Expression2Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression2(this);
    }
  };

  Expression2Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression2(this);
    }
  };


  CypherParser.Expression2Context = Expression2Context;

  CypherParser.prototype.expression2 = function () {

    var localctx = new Expression2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CypherParser.RULE_expression2);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 798;
      this.atom();
      this.state = 803;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 71, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 801;
          switch (this._input.LA(1)) {
            case CypherParser.T__25:
            case CypherParser.WHITESPACE:
              this.state = 799;
              this.propertyLookup();
              break;
            case CypherParser.T__10:
              this.state = 800;
              this.nodeLabels();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        }
        this.state = 805;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function AtomContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_atom;
    return this;
  }

  AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  AtomContext.prototype.constructor = AtomContext;

  AtomContext.prototype.numberLiteral = function () {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
  };

  AtomContext.prototype.StringLiteral = function () {
    return this.getToken(CypherParser.StringLiteral, 0);
  };

  AtomContext.prototype.parameter = function () {
    return this.getTypedRuleContext(ParameterContext, 0);
  };

  AtomContext.prototype.TRUE = function () {
    return this.getToken(CypherParser.TRUE, 0);
  };

  AtomContext.prototype.FALSE = function () {
    return this.getToken(CypherParser.FALSE, 0);
  };

  AtomContext.prototype.NULL = function () {
    return this.getToken(CypherParser.NULL, 0);
  };

  AtomContext.prototype.COUNT = function () {
    return this.getToken(CypherParser.COUNT, 0);
  };

  AtomContext.prototype.mapLiteral = function () {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  };

  AtomContext.prototype.listComprehension = function () {
    return this.getTypedRuleContext(ListComprehensionContext, 0);
  };

  AtomContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  AtomContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  AtomContext.prototype.FILTER = function () {
    return this.getToken(CypherParser.FILTER, 0);
  };

  AtomContext.prototype.filterExpression = function () {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  };

  AtomContext.prototype.EXTRACT = function () {
    return this.getToken(CypherParser.EXTRACT, 0);
  };

  AtomContext.prototype.ALL = function () {
    return this.getToken(CypherParser.ALL, 0);
  };

  AtomContext.prototype.ANY = function () {
    return this.getToken(CypherParser.ANY, 0);
  };

  AtomContext.prototype.NONE = function () {
    return this.getToken(CypherParser.NONE, 0);
  };

  AtomContext.prototype.SINGLE = function () {
    return this.getToken(CypherParser.SINGLE, 0);
  };

  AtomContext.prototype.relationshipsPattern = function () {
    return this.getTypedRuleContext(RelationshipsPatternContext, 0);
  };

  AtomContext.prototype.parenthesizedExpression = function () {
    return this.getTypedRuleContext(ParenthesizedExpressionContext, 0);
  };

  AtomContext.prototype.functionInvocation = function () {
    return this.getTypedRuleContext(FunctionInvocationContext, 0);
  };

  AtomContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  AtomContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterAtom(this);
    }
  };

  AtomContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitAtom(this);
    }
  };


  CypherParser.AtomContext = AtomContext;

  CypherParser.prototype.atom = function () {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CypherParser.RULE_atom);
    var _la = 0; // Token type
    try {
      this.state = 892;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 806;
          this.numberLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 807;
          this.match(CypherParser.StringLiteral);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 808;
          this.parameter();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 809;
          this.match(CypherParser.TRUE);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 810;
          this.match(CypherParser.FALSE);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 811;
          this.match(CypherParser.NULL);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 812;
          this.match(CypherParser.COUNT);
          this.state = 813;
          this.match(CypherParser.T__5);
          this.state = 814;
          this.match(CypherParser.T__4);
          this.state = 815;
          this.match(CypherParser.T__6);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 816;
          this.mapLiteral();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 817;
          this.listComprehension();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 818;
          this.match(CypherParser.T__7);
          this.state = 819;
          this.ws();
          this.state = 820;
          this.expression();
          this.state = 821;
          this.ws();
          this.state = 829;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CypherParser.T__1) {
            this.state = 822;
            this.match(CypherParser.T__1);
            this.state = 823;
            this.ws();
            this.state = 824;
            this.expression();
            this.state = 825;
            this.ws();
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 832;
          this.match(CypherParser.T__9);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 834;
          this.match(CypherParser.FILTER);
          this.state = 835;
          this.ws();
          this.state = 836;
          this.match(CypherParser.T__5);
          this.state = 837;
          this.ws();
          this.state = 838;
          this.filterExpression();
          this.state = 839;
          this.ws();
          this.state = 840;
          this.match(CypherParser.T__6);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 842;
          this.match(CypherParser.EXTRACT);
          this.state = 843;
          this.ws();
          this.state = 844;
          this.match(CypherParser.T__5);
          this.state = 845;
          this.ws();
          this.state = 846;
          this.filterExpression();
          this.state = 847;
          this.ws();
          this.state = 852;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__11 || _la === CypherParser.WHITESPACE) {
            this.state = 848;
            this.ws();
            this.state = 849;
            this.match(CypherParser.T__11);
            this.state = 850;
            this.expression();
          }

          this.state = 854;
          this.match(CypherParser.T__6);
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 856;
          this.match(CypherParser.ALL);
          this.state = 857;
          this.ws();
          this.state = 858;
          this.match(CypherParser.T__5);
          this.state = 859;
          this.ws();
          this.state = 860;
          this.filterExpression();
          this.state = 861;
          this.ws();
          this.state = 862;
          this.match(CypherParser.T__6);
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 864;
          this.match(CypherParser.ANY);
          this.state = 865;
          this.ws();
          this.state = 866;
          this.match(CypherParser.T__5);
          this.state = 867;
          this.ws();
          this.state = 868;
          this.filterExpression();
          this.state = 869;
          this.ws();
          this.state = 870;
          this.match(CypherParser.T__6);
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 872;
          this.match(CypherParser.NONE);
          this.state = 873;
          this.ws();
          this.state = 874;
          this.match(CypherParser.T__5);
          this.state = 875;
          this.ws();
          this.state = 876;
          this.filterExpression();
          this.state = 877;
          this.ws();
          this.state = 878;
          this.match(CypherParser.T__6);
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 880;
          this.match(CypherParser.SINGLE);
          this.state = 881;
          this.ws();
          this.state = 882;
          this.match(CypherParser.T__5);
          this.state = 883;
          this.ws();
          this.state = 884;
          this.filterExpression();
          this.state = 885;
          this.ws();
          this.state = 886;
          this.match(CypherParser.T__6);
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 888;
          this.relationshipsPattern();
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 889;
          this.parenthesizedExpression();
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 890;
          this.functionInvocation();
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 891;
          this.variable();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PartialComparisonExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_partialComparisonExpression;
    return this;
  }

  PartialComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PartialComparisonExpressionContext.prototype.constructor = PartialComparisonExpressionContext;

  PartialComparisonExpressionContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  PartialComparisonExpressionContext.prototype.expression7 = function () {
    return this.getTypedRuleContext(Expression7Context, 0);
  };

  PartialComparisonExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPartialComparisonExpression(this);
    }
  };

  PartialComparisonExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPartialComparisonExpression(this);
    }
  };


  CypherParser.PartialComparisonExpressionContext = PartialComparisonExpressionContext;

  CypherParser.prototype.partialComparisonExpression = function () {

    var localctx = new PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CypherParser.RULE_partialComparisonExpression);
    try {
      this.state = 922;
      switch (this._input.LA(1)) {
        case CypherParser.T__2:
          this.enterOuterAlt(localctx, 1);
          this.state = 894;
          this.match(CypherParser.T__2);
          this.state = 895;
          this.ws();
          this.state = 896;
          this.expression7();
          break;
        case CypherParser.T__19:
          this.enterOuterAlt(localctx, 2);
          this.state = 898;
          this.match(CypherParser.T__19);
          this.state = 899;
          this.ws();
          this.state = 900;
          this.expression7();
          break;
        case CypherParser.T__20:
          this.enterOuterAlt(localctx, 3);
          this.state = 902;
          this.match(CypherParser.T__20);
          this.state = 903;
          this.ws();
          this.state = 904;
          this.expression7();
          break;
        case CypherParser.T__21:
          this.enterOuterAlt(localctx, 4);
          this.state = 906;
          this.match(CypherParser.T__21);
          this.state = 907;
          this.ws();
          this.state = 908;
          this.expression7();
          break;
        case CypherParser.T__22:
          this.enterOuterAlt(localctx, 5);
          this.state = 910;
          this.match(CypherParser.T__22);
          this.state = 911;
          this.ws();
          this.state = 912;
          this.expression7();
          break;
        case CypherParser.T__23:
          this.enterOuterAlt(localctx, 6);
          this.state = 914;
          this.match(CypherParser.T__23);
          this.state = 915;
          this.ws();
          this.state = 916;
          this.expression7();
          break;
        case CypherParser.T__24:
          this.enterOuterAlt(localctx, 7);
          this.state = 918;
          this.match(CypherParser.T__24);
          this.state = 919;
          this.ws();
          this.state = 920;
          this.expression7();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ParenthesizedExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
    return this;
  }

  ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

  ParenthesizedExpressionContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  ParenthesizedExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterParenthesizedExpression(this);
    }
  };

  ParenthesizedExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitParenthesizedExpression(this);
    }
  };


  CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

  CypherParser.prototype.parenthesizedExpression = function () {

    var localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CypherParser.RULE_parenthesizedExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 924;
      this.match(CypherParser.T__5);
      this.state = 925;
      this.expression();
      this.state = 926;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipsPatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipsPattern;
    return this;
  }

  RelationshipsPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipsPatternContext.prototype.constructor = RelationshipsPatternContext;

  RelationshipsPatternContext.prototype.nodePattern = function () {
    return this.getTypedRuleContext(NodePatternContext, 0);
  };

  RelationshipsPatternContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RelationshipsPatternContext.prototype.patternElementChain = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
      return this.getTypedRuleContext(PatternElementChainContext, i);
    }
  };

  RelationshipsPatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipsPattern(this);
    }
  };

  RelationshipsPatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipsPattern(this);
    }
  };


  CypherParser.RelationshipsPatternContext = RelationshipsPatternContext;

  CypherParser.prototype.relationshipsPattern = function () {

    var localctx = new RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CypherParser.RULE_relationshipsPattern);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 928;
      this.nodePattern();
      this.state = 932;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 929;
            this.ws();
            this.state = 930;
            this.patternElementChain();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 934;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 76, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function FilterExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterExpression;
    return this;
  }

  FilterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  FilterExpressionContext.prototype.constructor = FilterExpressionContext;

  FilterExpressionContext.prototype.idInColl = function () {
    return this.getTypedRuleContext(IdInCollContext, 0);
  };

  FilterExpressionContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  FilterExpressionContext.prototype.where = function () {
    return this.getTypedRuleContext(WhereContext, 0);
  };

  FilterExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterFilterExpression(this);
    }
  };

  FilterExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitFilterExpression(this);
    }
  };


  CypherParser.FilterExpressionContext = FilterExpressionContext;

  CypherParser.prototype.filterExpression = function () {

    var localctx = new FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CypherParser.RULE_filterExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 936;
      this.idInColl();
      this.state = 940;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
      if (la_ === 1) {
        this.state = 937;
        this.ws();
        this.state = 938;
        this.where();

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function IdInCollContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idInColl;
    return this;
  }

  IdInCollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  IdInCollContext.prototype.constructor = IdInCollContext;

  IdInCollContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  IdInCollContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  IdInCollContext.prototype.IN = function () {
    return this.getToken(CypherParser.IN, 0);
  };

  IdInCollContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  IdInCollContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterIdInColl(this);
    }
  };

  IdInCollContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitIdInColl(this);
    }
  };


  CypherParser.IdInCollContext = IdInCollContext;

  CypherParser.prototype.idInColl = function () {

    var localctx = new IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CypherParser.RULE_idInColl);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 942;
      this.variable();
      this.state = 943;
      this.sp();
      this.state = 944;
      this.match(CypherParser.IN);
      this.state = 945;
      this.sp();
      this.state = 946;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function FunctionInvocationContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocation;
    return this;
  }

  FunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  FunctionInvocationContext.prototype.constructor = FunctionInvocationContext;

  FunctionInvocationContext.prototype.functionName = function () {
    return this.getTypedRuleContext(FunctionNameContext, 0);
  };

  FunctionInvocationContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  FunctionInvocationContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  FunctionInvocationContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  FunctionInvocationContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionInvocation(this);
    }
  };

  FunctionInvocationContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionInvocation(this);
    }
  };


  CypherParser.FunctionInvocationContext = FunctionInvocationContext;

  CypherParser.prototype.functionInvocation = function () {

    var localctx = new FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CypherParser.RULE_functionInvocation);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 948;
      this.functionName();
      this.state = 949;
      this.ws();
      this.state = 950;
      this.match(CypherParser.T__5);
      this.state = 951;
      this.ws();
      this.state = 953;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
      if (la_ === 1) {
        this.state = 952;
        this.match(CypherParser.DISTINCT);

      }
      this.state = 965;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
      if (la_ === 1) {
        this.state = 955;
        this.expression();
        this.state = 962;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CypherParser.T__1) {
          this.state = 956;
          this.match(CypherParser.T__1);
          this.state = 957;
          this.ws();
          this.state = 958;
          this.expression();
          this.state = 964;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }

      }
      this.state = 967;
      this.ws();
      this.state = 968;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function FunctionNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionName;
    return this;
  }

  FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  FunctionNameContext.prototype.constructor = FunctionNameContext;

  FunctionNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  FunctionNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionName(this);
    }
  };

  FunctionNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionName(this);
    }
  };


  CypherParser.FunctionNameContext = FunctionNameContext;

  CypherParser.prototype.functionName = function () {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CypherParser.RULE_functionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 970;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ListComprehensionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listComprehension;
    return this;
  }

  ListComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ListComprehensionContext.prototype.constructor = ListComprehensionContext;

  ListComprehensionContext.prototype.filterExpression = function () {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  };

  ListComprehensionContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  ListComprehensionContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  ListComprehensionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterListComprehension(this);
    }
  };

  ListComprehensionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitListComprehension(this);
    }
  };


  CypherParser.ListComprehensionContext = ListComprehensionContext;

  CypherParser.prototype.listComprehension = function () {

    var localctx = new ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CypherParser.RULE_listComprehension);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 972;
      this.match(CypherParser.T__7);
      this.state = 973;
      this.filterExpression();
      this.state = 978;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__11 || _la === CypherParser.WHITESPACE) {
        this.state = 974;
        this.ws();
        this.state = 975;
        this.match(CypherParser.T__11);
        this.state = 976;
        this.expression();
      }

      this.state = 980;
      this.match(CypherParser.T__9);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertyLookupContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyLookup;
    return this;
  }

  PropertyLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertyLookupContext.prototype.constructor = PropertyLookupContext;

  PropertyLookupContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PropertyLookupContext.prototype.propertyKeyName = function () {
    return this.getTypedRuleContext(PropertyKeyNameContext, 0);
  };

  PropertyLookupContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyLookup(this);
    }
  };

  PropertyLookupContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyLookup(this);
    }
  };


  CypherParser.PropertyLookupContext = PropertyLookupContext;

  CypherParser.prototype.propertyLookup = function () {

    var localctx = new PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CypherParser.RULE_propertyLookup);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 982;
      this.ws();
      this.state = 983;
      this.match(CypherParser.T__25);
      this.state = 984;
      this.ws();
      this.state = 989;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
      switch (la_) {
        case 1:
          this.state = 985;
          this.propertyKeyName();
          this.state = 986;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__8 || _la === CypherParser.T__26)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

        case 2:
          this.state = 988;
          this.propertyKeyName();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function VariableContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variable;
    return this;
  }

  VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  VariableContext.prototype.constructor = VariableContext;

  VariableContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  VariableContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterVariable(this);
    }
  };

  VariableContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitVariable(this);
    }
  };


  CypherParser.VariableContext = VariableContext;

  CypherParser.prototype.variable = function () {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CypherParser.RULE_variable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 991;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NumberLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_numberLiteral;
    return this;
  }

  NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NumberLiteralContext.prototype.constructor = NumberLiteralContext;

  NumberLiteralContext.prototype.doubleLiteral = function () {
    return this.getTypedRuleContext(DoubleLiteralContext, 0);
  };

  NumberLiteralContext.prototype.signedIntegerLiteral = function () {
    return this.getTypedRuleContext(SignedIntegerLiteralContext, 0);
  };

  NumberLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNumberLiteral(this);
    }
  };

  NumberLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNumberLiteral(this);
    }
  };


  CypherParser.NumberLiteralContext = NumberLiteralContext;

  CypherParser.prototype.numberLiteral = function () {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CypherParser.RULE_numberLiteral);
    try {
      this.state = 995;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 993;
          this.doubleLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 994;
          this.signedIntegerLiteral();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function MapLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapLiteral;
    return this;
  }

  MapLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  MapLiteralContext.prototype.constructor = MapLiteralContext;

  MapLiteralContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  MapLiteralContext.prototype.propertyKeyName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyKeyNameContext);
    } else {
      return this.getTypedRuleContext(PropertyKeyNameContext, i);
    }
  };

  MapLiteralContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  MapLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterMapLiteral(this);
    }
  };

  MapLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitMapLiteral(this);
    }
  };


  CypherParser.MapLiteralContext = MapLiteralContext;

  CypherParser.prototype.mapLiteral = function () {

    var localctx = new MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CypherParser.RULE_mapLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 997;
      this.match(CypherParser.T__27);
      this.state = 998;
      this.ws();
      this.state = 1019;
      _la = this._input.LA(1);
      if (((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0)) {
        this.state = 999;
        this.propertyKeyName();
        this.state = 1000;
        this.ws();
        this.state = 1001;
        this.match(CypherParser.T__10);
        this.state = 1002;
        this.ws();
        this.state = 1003;
        this.expression();
        this.state = 1004;
        this.ws();
        this.state = 1016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CypherParser.T__1) {
          this.state = 1005;
          this.match(CypherParser.T__1);
          this.state = 1006;
          this.ws();
          this.state = 1007;
          this.propertyKeyName();
          this.state = 1008;
          this.ws();
          this.state = 1009;
          this.match(CypherParser.T__10);
          this.state = 1010;
          this.ws();
          this.state = 1011;
          this.expression();
          this.state = 1012;
          this.ws();
          this.state = 1018;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 1021;
      this.match(CypherParser.T__28);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ParameterContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameter;
    return this;
  }

  ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ParameterContext.prototype.constructor = ParameterContext;

  ParameterContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  ParameterContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  ParameterContext.prototype.unsignedDecimalInteger = function () {
    return this.getTypedRuleContext(UnsignedDecimalIntegerContext, 0);
  };

  ParameterContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterParameter(this);
    }
  };

  ParameterContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitParameter(this);
    }
  };


  CypherParser.ParameterContext = ParameterContext;

  CypherParser.prototype.parameter = function () {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CypherParser.RULE_parameter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1023;
      this.match(CypherParser.T__27);
      this.state = 1024;
      this.ws();
      this.state = 1027;
      switch (this._input.LA(1)) {
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DELETE:
        case CypherParser.DETACH:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.L_0X:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.state = 1025;
          this.symbolicName();
          break;
        case CypherParser.T__29:
        case CypherParser.T__30:
        case CypherParser.T__31:
        case CypherParser.T__32:
        case CypherParser.T__33:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
        case CypherParser.T__38:
          this.state = 1026;
          this.unsignedDecimalInteger();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1029;
      this.ws();
      this.state = 1030;
      this.match(CypherParser.T__28);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertyExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpression;
    return this;
  }

  PropertyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertyExpressionContext.prototype.constructor = PropertyExpressionContext;

  PropertyExpressionContext.prototype.atom = function () {
    return this.getTypedRuleContext(AtomContext, 0);
  };

  PropertyExpressionContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PropertyExpressionContext.prototype.propertyLookup = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
      return this.getTypedRuleContext(PropertyLookupContext, i);
    }
  };

  PropertyExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyExpression(this);
    }
  };

  PropertyExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyExpression(this);
    }
  };


  CypherParser.PropertyExpressionContext = PropertyExpressionContext;

  CypherParser.prototype.propertyExpression = function () {

    var localctx = new PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CypherParser.RULE_propertyExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1032;
      this.atom();
      this.state = 1036;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1033;
            this.ws();
            this.state = 1034;
            this.propertyLookup();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1038;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertyKeyNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeyName;
    return this;
  }

  PropertyKeyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertyKeyNameContext.prototype.constructor = PropertyKeyNameContext;

  PropertyKeyNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  PropertyKeyNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyKeyName(this);
    }
  };

  PropertyKeyNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyKeyName(this);
    }
  };


  CypherParser.PropertyKeyNameContext = PropertyKeyNameContext;

  CypherParser.prototype.propertyKeyName = function () {

    var localctx = new PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CypherParser.RULE_propertyKeyName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1040;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SignedIntegerLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_signedIntegerLiteral;
    return this;
  }

  SignedIntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SignedIntegerLiteralContext.prototype.constructor = SignedIntegerLiteralContext;

  SignedIntegerLiteralContext.prototype.hexInteger = function () {
    return this.getTypedRuleContext(HexIntegerContext, 0);
  };

  SignedIntegerLiteralContext.prototype.octalInteger = function () {
    return this.getTypedRuleContext(OctalIntegerContext, 0);
  };

  SignedIntegerLiteralContext.prototype.decimalInteger = function () {
    return this.getTypedRuleContext(DecimalIntegerContext, 0);
  };

  SignedIntegerLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSignedIntegerLiteral(this);
    }
  };

  SignedIntegerLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSignedIntegerLiteral(this);
    }
  };


  CypherParser.SignedIntegerLiteralContext = SignedIntegerLiteralContext;

  CypherParser.prototype.signedIntegerLiteral = function () {

    var localctx = new SignedIntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CypherParser.RULE_signedIntegerLiteral);
    try {
      this.state = 1045;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1042;
          this.hexInteger();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1043;
          this.octalInteger();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1044;
          this.decimalInteger();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedIntegerLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedIntegerLiteral;
    return this;
  }

  UnsignedIntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedIntegerLiteralContext.prototype.constructor = UnsignedIntegerLiteralContext;

  UnsignedIntegerLiteralContext.prototype.unsignedDecimalInteger = function () {
    return this.getTypedRuleContext(UnsignedDecimalIntegerContext, 0);
  };

  UnsignedIntegerLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedIntegerLiteral(this);
    }
  };

  UnsignedIntegerLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedIntegerLiteral(this);
    }
  };


  CypherParser.UnsignedIntegerLiteralContext = UnsignedIntegerLiteralContext;

  CypherParser.prototype.unsignedIntegerLiteral = function () {

    var localctx = new UnsignedIntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CypherParser.RULE_unsignedIntegerLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1047;
      this.unsignedDecimalInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function HexIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hexInteger;
    return this;
  }

  HexIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  HexIntegerContext.prototype.constructor = HexIntegerContext;

  HexIntegerContext.prototype.unsignedHexInteger = function () {
    return this.getTypedRuleContext(UnsignedHexIntegerContext, 0);
  };

  HexIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterHexInteger(this);
    }
  };

  HexIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitHexInteger(this);
    }
  };


  CypherParser.HexIntegerContext = HexIntegerContext;

  CypherParser.prototype.hexInteger = function () {

    var localctx = new HexIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CypherParser.RULE_hexInteger);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1050;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1049;
        this.match(CypherParser.T__14);
      }

      this.state = 1052;
      this.unsignedHexInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DecimalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_decimalInteger;
    return this;
  }

  DecimalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DecimalIntegerContext.prototype.constructor = DecimalIntegerContext;

  DecimalIntegerContext.prototype.unsignedDecimalInteger = function () {
    return this.getTypedRuleContext(UnsignedDecimalIntegerContext, 0);
  };

  DecimalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDecimalInteger(this);
    }
  };

  DecimalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDecimalInteger(this);
    }
  };


  CypherParser.DecimalIntegerContext = DecimalIntegerContext;

  CypherParser.prototype.decimalInteger = function () {

    var localctx = new DecimalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CypherParser.RULE_decimalInteger);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1055;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1054;
        this.match(CypherParser.T__14);
      }

      this.state = 1057;
      this.unsignedDecimalInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OctalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_octalInteger;
    return this;
  }

  OctalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OctalIntegerContext.prototype.constructor = OctalIntegerContext;

  OctalIntegerContext.prototype.unsignedOctalInteger = function () {
    return this.getTypedRuleContext(UnsignedOctalIntegerContext, 0);
  };

  OctalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOctalInteger(this);
    }
  };

  OctalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOctalInteger(this);
    }
  };


  CypherParser.OctalIntegerContext = OctalIntegerContext;

  CypherParser.prototype.octalInteger = function () {

    var localctx = new OctalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CypherParser.RULE_octalInteger);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1060;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1059;
        this.match(CypherParser.T__14);
      }

      this.state = 1062;
      this.unsignedOctalInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedHexIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedHexInteger;
    return this;
  }

  UnsignedHexIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedHexIntegerContext.prototype.constructor = UnsignedHexIntegerContext;

  UnsignedHexIntegerContext.prototype.L_0X = function () {
    return this.getToken(CypherParser.L_0X, 0);
  };

  UnsignedHexIntegerContext.prototype.hexString = function () {
    return this.getTypedRuleContext(HexStringContext, 0);
  };

  UnsignedHexIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedHexInteger(this);
    }
  };

  UnsignedHexIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedHexInteger(this);
    }
  };


  CypherParser.UnsignedHexIntegerContext = UnsignedHexIntegerContext;

  CypherParser.prototype.unsignedHexInteger = function () {

    var localctx = new UnsignedHexIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CypherParser.RULE_unsignedHexInteger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1064;
      this.match(CypherParser.L_0X);
      this.state = 1065;
      this.hexString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedDecimalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedDecimalInteger;
    return this;
  }

  UnsignedDecimalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedDecimalIntegerContext.prototype.constructor = UnsignedDecimalIntegerContext;

  UnsignedDecimalIntegerContext.prototype.digitString = function () {
    return this.getTypedRuleContext(DigitStringContext, 0);
  };

  UnsignedDecimalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedDecimalInteger(this);
    }
  };

  UnsignedDecimalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedDecimalInteger(this);
    }
  };


  CypherParser.UnsignedDecimalIntegerContext = UnsignedDecimalIntegerContext;

  CypherParser.prototype.unsignedDecimalInteger = function () {

    var localctx = new UnsignedDecimalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CypherParser.RULE_unsignedDecimalInteger);
    var _la = 0; // Token type
    try {
      this.state = 1072;
      switch (this._input.LA(1)) {
        case CypherParser.T__29:
        case CypherParser.T__30:
        case CypherParser.T__31:
        case CypherParser.T__32:
        case CypherParser.T__33:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
          this.enterOuterAlt(localctx, 1);
          this.state = 1067;
          _la = this._input.LA(1);
          if (!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          this.state = 1069;
          _la = this._input.LA(1);
          if (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0)) {
            this.state = 1068;
            this.digitString();
          }

          break;
        case CypherParser.T__38:
          this.enterOuterAlt(localctx, 2);
          this.state = 1071;
          this.match(CypherParser.T__38);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedOctalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedOctalInteger;
    return this;
  }

  UnsignedOctalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedOctalIntegerContext.prototype.constructor = UnsignedOctalIntegerContext;

  UnsignedOctalIntegerContext.prototype.octalString = function () {
    return this.getTypedRuleContext(OctalStringContext, 0);
  };

  UnsignedOctalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedOctalInteger(this);
    }
  };

  UnsignedOctalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedOctalInteger(this);
    }
  };


  CypherParser.UnsignedOctalIntegerContext = UnsignedOctalIntegerContext;

  CypherParser.prototype.unsignedOctalInteger = function () {

    var localctx = new UnsignedOctalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CypherParser.RULE_unsignedOctalInteger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1074;
      this.match(CypherParser.T__38);
      this.state = 1075;
      this.octalString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function HexStringContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hexString;
    return this;
  }

  HexStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  HexStringContext.prototype.constructor = HexStringContext;

  HexStringContext.prototype.HexDigit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.HexDigit);
    } else {
      return this.getToken(CypherParser.HexDigit, i);
    }
  };


  HexStringContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterHexString(this);
    }
  };

  HexStringContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitHexString(this);
    }
  };


  CypherParser.HexStringContext = HexStringContext;

  CypherParser.prototype.hexString = function () {

    var localctx = new HexStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CypherParser.RULE_hexString);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1078;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1077;
        this.match(CypherParser.HexDigit);
        this.state = 1080;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === CypherParser.HexDigit);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DigitStringContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_digitString;
    return this;
  }

  DigitStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DigitStringContext.prototype.constructor = DigitStringContext;

  DigitStringContext.prototype.digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  DigitStringContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDigitString(this);
    }
  };

  DigitStringContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDigitString(this);
    }
  };


  CypherParser.DigitStringContext = DigitStringContext;

  CypherParser.prototype.digitString = function () {

    var localctx = new DigitStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CypherParser.RULE_digitString);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1083;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1082;
        this.digit();
        this.state = 1085;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0));
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OctalStringContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_octalString;
    return this;
  }

  OctalStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OctalStringContext.prototype.constructor = OctalStringContext;

  OctalStringContext.prototype.octDigit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(OctDigitContext);
    } else {
      return this.getTypedRuleContext(OctDigitContext, i);
    }
  };

  OctalStringContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOctalString(this);
    }
  };

  OctalStringContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOctalString(this);
    }
  };


  CypherParser.OctalStringContext = OctalStringContext;

  CypherParser.prototype.octalString = function () {

    var localctx = new OctalStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CypherParser.RULE_octalString);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1088;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1087;
        this.octDigit();
        this.state = 1090;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0));
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DigitContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_digit;
    return this;
  }

  DigitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DigitContext.prototype.constructor = DigitContext;


  DigitContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDigit(this);
    }
  };

  DigitContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDigit(this);
    }
  };


  CypherParser.DigitContext = DigitContext;

  CypherParser.prototype.digit = function () {

    var localctx = new DigitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CypherParser.RULE_digit);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1092;
      _la = this._input.LA(1);
      if (!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OctDigitContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_octDigit;
    return this;
  }

  OctDigitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OctDigitContext.prototype.constructor = OctDigitContext;


  OctDigitContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOctDigit(this);
    }
  };

  OctDigitContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOctDigit(this);
    }
  };


  CypherParser.OctDigitContext = OctDigitContext;

  CypherParser.prototype.octDigit = function () {

    var localctx = new OctDigitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CypherParser.RULE_octDigit);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1094;
      _la = this._input.LA(1);
      if (!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DoubleLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_doubleLiteral;
    return this;
  }

  DoubleLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

  DoubleLiteralContext.prototype.exponentDecimalReal = function () {
    return this.getTypedRuleContext(ExponentDecimalRealContext, 0);
  };

  DoubleLiteralContext.prototype.regularDecimalReal = function () {
    return this.getTypedRuleContext(RegularDecimalRealContext, 0);
  };

  DoubleLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDoubleLiteral(this);
    }
  };

  DoubleLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDoubleLiteral(this);
    }
  };


  CypherParser.DoubleLiteralContext = DoubleLiteralContext;

  CypherParser.prototype.doubleLiteral = function () {

    var localctx = new DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CypherParser.RULE_doubleLiteral);
    try {
      this.state = 1098;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1096;
          this.exponentDecimalReal();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1097;
          this.regularDecimalReal();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ExponentDecimalRealContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_exponentDecimalReal;
    return this;
  }

  ExponentDecimalRealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ExponentDecimalRealContext.prototype.constructor = ExponentDecimalRealContext;

  ExponentDecimalRealContext.prototype.digitString = function () {
    return this.getTypedRuleContext(DigitStringContext, 0);
  };

  ExponentDecimalRealContext.prototype.digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  ExponentDecimalRealContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExponentDecimalReal(this);
    }
  };

  ExponentDecimalRealContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExponentDecimalReal(this);
    }
  };


  CypherParser.ExponentDecimalRealContext = ExponentDecimalRealContext;

  CypherParser.prototype.exponentDecimalReal = function () {

    var localctx = new ExponentDecimalRealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CypherParser.RULE_exponentDecimalReal);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1101;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1100;
        this.match(CypherParser.T__14);
      }

      this.state = 1105;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1105;
        switch (this._input.LA(1)) {
          case CypherParser.T__29:
          case CypherParser.T__30:
          case CypherParser.T__31:
          case CypherParser.T__32:
          case CypherParser.T__33:
          case CypherParser.T__34:
          case CypherParser.T__35:
          case CypherParser.T__36:
          case CypherParser.T__37:
          case CypherParser.T__38:
            this.state = 1103;
            this.digit();
            break;
          case CypherParser.T__25:
            this.state = 1104;
            this.match(CypherParser.T__25);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (((((_la - 26)) & ~0x1f) == 0 && ((1 << (_la - 26)) & ((1 << (CypherParser.T__25 - 26)) | (1 << (CypherParser.T__29 - 26)) | (1 << (CypherParser.T__30 - 26)) | (1 << (CypherParser.T__31 - 26)) | (1 << (CypherParser.T__32 - 26)) | (1 << (CypherParser.T__33 - 26)) | (1 << (CypherParser.T__34 - 26)) | (1 << (CypherParser.T__35 - 26)) | (1 << (CypherParser.T__36 - 26)) | (1 << (CypherParser.T__37 - 26)) | (1 << (CypherParser.T__38 - 26)))) !== 0));
      this.state = 1111;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1109;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__39 || _la === CypherParser.T__40)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

        case 2:
          this.state = 1110;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__39 || _la === CypherParser.T__40)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

      }
      this.state = 1114;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1113;
        this.match(CypherParser.T__14);
      }

      this.state = 1116;
      this.digitString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RegularDecimalRealContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularDecimalReal;
    return this;
  }

  RegularDecimalRealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RegularDecimalRealContext.prototype.constructor = RegularDecimalRealContext;

  RegularDecimalRealContext.prototype.digitString = function () {
    return this.getTypedRuleContext(DigitStringContext, 0);
  };

  RegularDecimalRealContext.prototype.digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  RegularDecimalRealContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRegularDecimalReal(this);
    }
  };

  RegularDecimalRealContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRegularDecimalReal(this);
    }
  };


  CypherParser.RegularDecimalRealContext = RegularDecimalRealContext;

  CypherParser.prototype.regularDecimalReal = function () {

    var localctx = new RegularDecimalRealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CypherParser.RULE_regularDecimalReal);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1119;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1118;
        this.match(CypherParser.T__14);
      }

      this.state = 1124;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0)) {
        this.state = 1121;
        this.digit();
        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1127;
      this.match(CypherParser.T__25);
      this.state = 1128;
      this.digitString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SymbolicNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_symbolicName;
    return this;
  }

  SymbolicNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SymbolicNameContext.prototype.constructor = SymbolicNameContext;

  SymbolicNameContext.prototype.UnescapedSymbolicName = function () {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
  };

  SymbolicNameContext.prototype.EscapedSymbolicName = function () {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
  };

  SymbolicNameContext.prototype.UNION = function () {
    return this.getToken(CypherParser.UNION, 0);
  };

  SymbolicNameContext.prototype.ALL = function () {
    return this.getToken(CypherParser.ALL, 0);
  };

  SymbolicNameContext.prototype.OPTIONAL = function () {
    return this.getToken(CypherParser.OPTIONAL, 0);
  };

  SymbolicNameContext.prototype.MATCH = function () {
    return this.getToken(CypherParser.MATCH, 0);
  };

  SymbolicNameContext.prototype.UNWIND = function () {
    return this.getToken(CypherParser.UNWIND, 0);
  };

  SymbolicNameContext.prototype.AS = function () {
    return this.getToken(CypherParser.AS, 0);
  };

  SymbolicNameContext.prototype.MERGE = function () {
    return this.getToken(CypherParser.MERGE, 0);
  };

  SymbolicNameContext.prototype.ON = function () {
    return this.getToken(CypherParser.ON, 0);
  };

  SymbolicNameContext.prototype.CREATE = function () {
    return this.getToken(CypherParser.CREATE, 0);
  };

  SymbolicNameContext.prototype.SET = function () {
    return this.getToken(CypherParser.SET, 0);
  };

  SymbolicNameContext.prototype.DELETE = function () {
    return this.getToken(CypherParser.DELETE, 0);
  };

  SymbolicNameContext.prototype.DETACH = function () {
    return this.getToken(CypherParser.DETACH, 0);
  };

  SymbolicNameContext.prototype.REMOVE = function () {
    return this.getToken(CypherParser.REMOVE, 0);
  };

  SymbolicNameContext.prototype.WITH = function () {
    return this.getToken(CypherParser.WITH, 0);
  };

  SymbolicNameContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  SymbolicNameContext.prototype.RETURN = function () {
    return this.getToken(CypherParser.RETURN, 0);
  };

  SymbolicNameContext.prototype.ORDER = function () {
    return this.getToken(CypherParser.ORDER, 0);
  };

  SymbolicNameContext.prototype.BY = function () {
    return this.getToken(CypherParser.BY, 0);
  };

  SymbolicNameContext.prototype.L_SKIP = function () {
    return this.getToken(CypherParser.L_SKIP, 0);
  };

  SymbolicNameContext.prototype.LIMIT = function () {
    return this.getToken(CypherParser.LIMIT, 0);
  };

  SymbolicNameContext.prototype.DESCENDING = function () {
    return this.getToken(CypherParser.DESCENDING, 0);
  };

  SymbolicNameContext.prototype.DESC = function () {
    return this.getToken(CypherParser.DESC, 0);
  };

  SymbolicNameContext.prototype.ASCENDING = function () {
    return this.getToken(CypherParser.ASCENDING, 0);
  };

  SymbolicNameContext.prototype.ASC = function () {
    return this.getToken(CypherParser.ASC, 0);
  };

  SymbolicNameContext.prototype.WHERE = function () {
    return this.getToken(CypherParser.WHERE, 0);
  };

  SymbolicNameContext.prototype.OR = function () {
    return this.getToken(CypherParser.OR, 0);
  };

  SymbolicNameContext.prototype.XOR = function () {
    return this.getToken(CypherParser.XOR, 0);
  };

  SymbolicNameContext.prototype.AND = function () {
    return this.getToken(CypherParser.AND, 0);
  };

  SymbolicNameContext.prototype.NOT = function () {
    return this.getToken(CypherParser.NOT, 0);
  };

  SymbolicNameContext.prototype.IN = function () {
    return this.getToken(CypherParser.IN, 0);
  };

  SymbolicNameContext.prototype.STARTS = function () {
    return this.getToken(CypherParser.STARTS, 0);
  };

  SymbolicNameContext.prototype.ENDS = function () {
    return this.getToken(CypherParser.ENDS, 0);
  };

  SymbolicNameContext.prototype.CONTAINS = function () {
    return this.getToken(CypherParser.CONTAINS, 0);
  };

  SymbolicNameContext.prototype.IS = function () {
    return this.getToken(CypherParser.IS, 0);
  };

  SymbolicNameContext.prototype.NULL = function () {
    return this.getToken(CypherParser.NULL, 0);
  };

  SymbolicNameContext.prototype.TRUE = function () {
    return this.getToken(CypherParser.TRUE, 0);
  };

  SymbolicNameContext.prototype.FALSE = function () {
    return this.getToken(CypherParser.FALSE, 0);
  };

  SymbolicNameContext.prototype.COUNT = function () {
    return this.getToken(CypherParser.COUNT, 0);
  };

  SymbolicNameContext.prototype.FILTER = function () {
    return this.getToken(CypherParser.FILTER, 0);
  };

  SymbolicNameContext.prototype.EXTRACT = function () {
    return this.getToken(CypherParser.EXTRACT, 0);
  };

  SymbolicNameContext.prototype.ANY = function () {
    return this.getToken(CypherParser.ANY, 0);
  };

  SymbolicNameContext.prototype.NONE = function () {
    return this.getToken(CypherParser.NONE, 0);
  };

  SymbolicNameContext.prototype.SINGLE = function () {
    return this.getToken(CypherParser.SINGLE, 0);
  };

  SymbolicNameContext.prototype.L_0X = function () {
    return this.getToken(CypherParser.L_0X, 0);
  };

  SymbolicNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSymbolicName(this);
    }
  };

  SymbolicNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSymbolicName(this);
    }
  };


  CypherParser.SymbolicNameContext = SymbolicNameContext;

  CypherParser.prototype.symbolicName = function () {

    var localctx = new SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CypherParser.RULE_symbolicName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1130;
      _la = this._input.LA(1);
      if (!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function WsContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_ws;
    return this;
  }

  WsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  WsContext.prototype.constructor = WsContext;

  WsContext.prototype.WHITESPACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.WHITESPACE);
    } else {
      return this.getToken(CypherParser.WHITESPACE, i);
    }
  };


  WsContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterWs(this);
    }
  };

  WsContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitWs(this);
    }
  };


  CypherParser.WsContext = WsContext;

  CypherParser.prototype.ws = function () {

    var localctx = new WsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CypherParser.RULE_ws);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1135;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 105, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1132;
          this.match(CypherParser.WHITESPACE);
        }
        this.state = 1137;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 105, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SpContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sp;
    return this;
  }

  SpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SpContext.prototype.constructor = SpContext;

  SpContext.prototype.WHITESPACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.WHITESPACE);
    } else {
      return this.getToken(CypherParser.WHITESPACE, i);
    }
  };


  SpContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSp(this);
    }
  };

  SpContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSp(this);
    }
  };


  CypherParser.SpContext = SpContext;

  CypherParser.prototype.sp = function () {

    var localctx = new SpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CypherParser.RULE_sp);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1139;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1138;
            this.match(CypherParser.WHITESPACE);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1141;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 106, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function LeftArrowHeadContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_leftArrowHead;
    return this;
  }

  LeftArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  LeftArrowHeadContext.prototype.constructor = LeftArrowHeadContext;


  LeftArrowHeadContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterLeftArrowHead(this);
    }
  };

  LeftArrowHeadContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitLeftArrowHead(this);
    }
  };


  CypherParser.LeftArrowHeadContext = LeftArrowHeadContext;

  CypherParser.prototype.leftArrowHead = function () {

    var localctx = new LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CypherParser.RULE_leftArrowHead);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1143;
      _la = this._input.LA(1);
      if (!(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (CypherParser.T__21 - 22)) | (1 << (CypherParser.T__41 - 22)) | (1 << (CypherParser.T__42 - 22)) | (1 << (CypherParser.T__43 - 22)) | (1 << (CypherParser.T__44 - 22)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RightArrowHeadContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rightArrowHead;
    return this;
  }

  RightArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RightArrowHeadContext.prototype.constructor = RightArrowHeadContext;


  RightArrowHeadContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRightArrowHead(this);
    }
  };

  RightArrowHeadContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRightArrowHead(this);
    }
  };


  CypherParser.RightArrowHeadContext = RightArrowHeadContext;

  CypherParser.prototype.rightArrowHead = function () {

    var localctx = new RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CypherParser.RULE_rightArrowHead);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1145;
      _la = this._input.LA(1);
      if (!(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CypherParser.T__22 - 23)) | (1 << (CypherParser.T__45 - 23)) | (1 << (CypherParser.T__46 - 23)) | (1 << (CypherParser.T__47 - 23)) | (1 << (CypherParser.T__48 - 23)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DashContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dash;
    return this;
  }

  DashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DashContext.prototype.constructor = DashContext;


  DashContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDash(this);
    }
  };

  DashContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDash(this);
    }
  };


  CypherParser.DashContext = DashContext;

  CypherParser.prototype.dash = function () {

    var localctx = new DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CypherParser.RULE_dash);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1147;
      _la = this._input.LA(1);
      if (!(_la === CypherParser.T__14 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CypherParser.T__49 - 50)) | (1 << (CypherParser.T__50 - 50)) | (1 << (CypherParser.T__51 - 50)) | (1 << (CypherParser.T__52 - 50)) | (1 << (CypherParser.T__53 - 50)) | (1 << (CypherParser.T__54 - 50)) | (1 << (CypherParser.T__55 - 50)) | (1 << (CypherParser.T__56 - 50)) | (1 << (CypherParser.T__57 - 50)) | (1 << (CypherParser.T__58 - 50)) | (1 << (CypherParser.T__59 - 50)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  return CypherParser;
}
