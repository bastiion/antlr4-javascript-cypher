(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated from browser-cypher/Cypher.g4 by ANTLR 4.5.3
// jshint ignore: start

module.exports = function (antlr4, CypherListener) {

  var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0002s\u0324\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003!\u0003!\u0003\"\u0003",
    "\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003)\u0003)\u0003*\u0003*\u0003+\u0003+\u0003,\u0003",
    ",\u0003-\u0003-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u00031\u0003",
    "1\u00032\u00032\u00033\u00033\u00034\u00034\u00035\u00035\u00036\u0003",
    "6\u00037\u00037\u00038\u00038\u00039\u00039\u0003:\u0003:\u0003;\u0003",
    ";\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003>\u0007>\u0192\n>\f",
    ">\u000e>\u0195\u000b>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007>\u019c",
    "\n>\f>\u000e>\u019f\u000b>\u0003>\u0003>\u0005>\u01a3\n>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u01b7\n?\u0003@\u0005",
    "@\u01ba\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003",
    "B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003",
    "[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003",
    "]\u0003^\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003i\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003l\u0003l\u0003l\u0003m\u0003m\u0007m\u02b9\nm\fm\u000em\u02bc",
    "\u000bm\u0003n\u0003n\u0003n\u0005n\u02c1\nn\u0003o\u0003o\u0005o\u02c5",
    "\no\u0003p\u0003p\u0007p\u02c9\np\fp\u000ep\u02cc\u000bp\u0003p\u0006",
    "p\u02cf\np\rp\u000ep\u02d0\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0005q\u02df\nq\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0007r\u02e7\nr\fr\u000er\u02ea\u000b",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005r\u02f3\nr\u0003",
    "r\u0003r\u0005r\u02f7\nr\u0005r\u02f9\nr\u0003s\u0003s\u0003t\u0003",
    "t\u0003u\u0003u\u0003v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003y\u0003",
    "y\u0003z\u0003z\u0003{\u0003{\u0003|\u0003|\u0003}\u0003}\u0003~\u0003",
    "~\u0003\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0081\u0003",
    "\u0081\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0084\u0003",
    "\u0084\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0087\u0003",
    "\u0087\u0002\u0002\u0088\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006",
    "\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e",
    "\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016",
    "+\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e;\u001f= ?!",
    "A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\u007f",
    "A\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG\u008dH\u008fI\u0091J\u0093",
    "K\u0095L\u0097M\u0099N\u009bO\u009dP\u009fQ\u00a1R\u00a3S\u00a5T\u00a7",
    "U\u00a9V\u00abW\u00adX\u00afY\u00b1Z\u00b3[\u00b5\\\u00b7]\u00b9^\u00bb",
    "_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5d\u00c7e\u00c9f\u00cbg\u00cdh\u00cf",
    "i\u00d1j\u00d3k\u00d5l\u00d7m\u00d9n\u00dbo\u00ddp\u00dfq\u00e1r\u00e3",
    "s\u00e5\u0002\u00e7\u0002\u00e9\u0002\u00eb\u0002\u00ed\u0002\u00ef",
    "\u0002\u00f1\u0002\u00f3\u0002\u00f5\u0002\u00f7\u0002\u00f9\u0002\u00fb",
    "\u0002\u00fd\u0002\u00ff\u0002\u0101\u0002\u0103\u0002\u0105\u0002\u0107",
    "\u0002\u0109\u0002\u010b\u0002\u010d\u0002\u0003\u00021\u0011\u0002",
    "$$\'\'))DDHHPPTTVV^^aaddhhppttvv\u0004\u0002WWww\u0005\u00022;CHch\u0004",
    "\u0002PPpp\u0004\u0002KKkk\u0004\u0002QQqq\u0004\u0002CCcc\u0004\u0002",
    "NNnn\u0004\u0002RRrr\u0004\u0002VVvv\u0004\u0002OOoo\u0004\u0002EEe",
    "e\u0004\u0002JJjj\u0004\u0002YYyy\u0004\u0002FFff\u0004\u0002UUuu\u0004",
    "\u0002GGgg\u0004\u0002TTtt\u0004\u0002IIii\u0004\u0002XXxx\u0004\u0002",
    "DDdd\u0004\u0002[[{{\u0004\u0002MMmm\u0004\u0002ZZzz\u0004\u0002HHh",
    "h\b\u0002aa\u2041\u2042\u2056\u2056\ufe35\ufe36\ufe4f\ufe51\uff41\uff41",
    "\n\u0002\u00a2\u00a2\u1682\u1682\u1810\u1810\u2002\u200c\u202a\u202b",
    "\u2031\u2031\u2061\u2061\u3002\u3002\u0003\u0002$$\u0003\u0002))\u0003",
    "\u0002\u000e\u000e\u0004\u0002\u0002ac\u0001\u0003\u0002  \u01af\u0002",
    "2;C\\aac|\u00ac\u00ac\u00b7\u00b7\u00b9\u00b9\u00bc\u00bc\u00c2\u00d8",
    "\u00da\u00f8\u00fa\u02c3\u02c8\u02d3\u02e2\u02e6\u02ee\u02ee\u02f0\u02f0",
    "\u0302\u0376\u0378\u0379\u037c\u037f\u0388\u038c\u038e\u038e\u0390\u03a3",
    "\u03a5\u03f7\u03f9\u0483\u0485\u0489\u048c\u0529\u0533\u0558\u055b\u055b",
    "\u0563\u0589\u0593\u05bf\u05c1\u05c1\u05c3\u05c4\u05c6\u05c7\u05c9\u05c9",
    "\u05d2\u05ec\u05f2\u05f4\u0612\u061c\u0622\u066b\u0670\u06d5\u06d7\u06de",
    "\u06e1\u06ea\u06ec\u06fe\u0701\u0701\u0712\u074c\u074f\u07b3\u07c2\u07f7",
    "\u07fc\u07fc\u0802\u082f\u0842\u085d\u08a2\u08a2\u08a4\u08ae\u08e6\u0900",
    "\u0902\u0965\u0968\u0971\u0973\u0979\u097b\u0981\u0983\u0985\u0987\u098e",
    "\u0991\u0992\u0995\u09aa\u09ac\u09b2\u09b4\u09b4\u09b8\u09bb\u09be\u09c6",
    "\u09c9\u09ca\u09cd\u09d0\u09d9\u09d9\u09de\u09df\u09e1\u09e5\u09e8\u09f3",
    "\u0a03\u0a05\u0a07\u0a0c\u0a11\u0a12\u0a15\u0a2a\u0a2c\u0a32\u0a34\u0a35",
    "\u0a37\u0a38\u0a3a\u0a3b\u0a3e\u0a3e\u0a40\u0a44\u0a49\u0a4a\u0a4d\u0a4f",
    "\u0a53\u0a53\u0a5b\u0a5e\u0a60\u0a60\u0a68\u0a77\u0a83\u0a85\u0a87\u0a8f",
    "\u0a91\u0a93\u0a95\u0aaa\u0aac\u0ab2\u0ab4\u0ab5\u0ab7\u0abb\u0abe\u0ac7",
    "\u0ac9\u0acb\u0acd\u0acf\u0ad2\u0ad2\u0ae2\u0ae5\u0ae8\u0af1\u0b03\u0b05",
    "\u0b07\u0b0e\u0b11\u0b12\u0b15\u0b2a\u0b2c\u0b32\u0b34\u0b35\u0b37\u0b3b",
    "\u0b3e\u0b46\u0b49\u0b4a\u0b4d\u0b4f\u0b58\u0b59\u0b5e\u0b5f\u0b61\u0b65",
    "\u0b68\u0b71\u0b73\u0b73\u0b84\u0b85\u0b87\u0b8c\u0b90\u0b92\u0b94\u0b97",
    "\u0b9b\u0b9c\u0b9e\u0b9e\u0ba0\u0ba1\u0ba5\u0ba6\u0baa\u0bac\u0bb0\u0bbb",
    "\u0bc0\u0bc4\u0bc8\u0bca\u0bcc\u0bcf\u0bd2\u0bd2\u0bd9\u0bd9\u0be8\u0bf1",
    "\u0c03\u0c05\u0c07\u0c0e\u0c10\u0c12\u0c14\u0c2a\u0c2c\u0c35\u0c37\u0c3b",
    "\u0c3f\u0c46\u0c48\u0c4a\u0c4c\u0c4f\u0c57\u0c58\u0c5a\u0c5b\u0c62\u0c65",
    "\u0c68\u0c71\u0c84\u0c85\u0c87\u0c8e\u0c90\u0c92\u0c94\u0caa\u0cac\u0cb5",
    "\u0cb7\u0cbb\u0cbe\u0cc6\u0cc8\u0cca\u0ccc\u0ccf\u0cd7\u0cd8\u0ce0\u0ce0",
    "\u0ce2\u0ce5\u0ce8\u0cf1\u0cf3\u0cf4\u0d04\u0d05\u0d07\u0d0e\u0d10\u0d12",
    "\u0d14\u0d3c\u0d3f\u0d46\u0d48\u0d4a\u0d4c\u0d50\u0d59\u0d59\u0d62\u0d65",
    "\u0d68\u0d71\u0d7c\u0d81\u0d84\u0d85\u0d87\u0d98\u0d9c\u0db3\u0db5\u0dbd",
    "\u0dbf\u0dbf\u0dc2\u0dc8\u0dcc\u0dcc\u0dd1\u0dd6\u0dd8\u0dd8\u0dda\u0de1",
    "\u0df4\u0df5\u0e03\u0e3c\u0e42\u0e50\u0e52\u0e5b\u0e83\u0e84\u0e86\u0e86",
    "\u0e89\u0e8a\u0e8c\u0e8c\u0e8f\u0e8f\u0e96\u0e99\u0e9b\u0ea1\u0ea3\u0ea5",
    "\u0ea7\u0ea7\u0ea9\u0ea9\u0eac\u0ead\u0eaf\u0ebb\u0ebd\u0ebf\u0ec2\u0ec6",
    "\u0ec8\u0ec8\u0eca\u0ecf\u0ed2\u0edb\u0ede\u0ee1\u0f02\u0f02\u0f1a\u0f1b",
    "\u0f22\u0f2b\u0f37\u0f37\u0f39\u0f39\u0f3b\u0f3b\u0f40\u0f49\u0f4b\u0f6e",
    "\u0f73\u0f86\u0f88\u0f99\u0f9b\u0fbe\u0fc8\u0fc8\u1002\u104b\u1052\u109f",
    "\u10a2\u10c7\u10c9\u10c9\u10cf\u10cf\u10d2\u10fc\u10fe\u124a\u124c\u124f",
    "\u1252\u1258\u125a\u125a\u125c\u125f\u1262\u128a\u128c\u128f\u1292\u12b2",
    "\u12b4\u12b7\u12ba\u12c0\u12c2\u12c2\u12c4\u12c7\u12ca\u12d8\u12da\u1312",
    "\u1314\u1317\u131a\u135c\u135f\u1361\u136b\u1373\u1382\u1391\u13a2\u13f6",
    "\u1403\u166e\u1671\u1681\u1683\u169c\u16a2\u16ec\u16f0\u16f2\u1702\u170e",
    "\u1710\u1716\u1722\u1736\u1742\u1755\u1762\u176e\u1770\u1772\u1774\u1775",
    "\u1782\u17d5\u17d9\u17d9\u17de\u17df\u17e2\u17eb\u180d\u180f\u1812\u181b",
    "\u1822\u1879\u1882\u18ac\u18b2\u18f7\u1902\u191e\u1922\u192d\u1932\u193d",
    "\u1948\u196f\u1972\u1976\u1982\u19ad\u19b2\u19cb\u19d2\u19dc\u1a02\u1a1d",
    "\u1a22\u1a60\u1a62\u1a7e\u1a81\u1a8b\u1a92\u1a9b\u1aa9\u1aa9\u1b02\u1b4d",
    "\u1b52\u1b5b\u1b6d\u1b75\u1b82\u1bf5\u1c02\u1c39\u1c42\u1c4b\u1c4f\u1c7f",
    "\u1cd2\u1cd4\u1cd6\u1cf8\u1d02\u1de8\u1dfe\u1f17\u1f1a\u1f1f\u1f22\u1f47",
    "\u1f4a\u1f4f\u1f52\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f5f\u1f61\u1f7f",
    "\u1f82\u1fb6\u1fb8\u1fbe\u1fc0\u1fc0\u1fc4\u1fc6\u1fc8\u1fce\u1fd2\u1fd5",
    "\u1fd8\u1fdd\u1fe2\u1fee\u1ff4\u1ff6\u1ff8\u1ffe\u2041\u2042\u2056\u2056",
    "\u2073\u2073\u2081\u2081\u2092\u209e\u20d2\u20de\u20e3\u20e3\u20e7\u20f2",
    "\u2104\u2104\u2109\u2109\u210c\u2115\u2117\u2117\u211a\u211f\u2126\u2126",
    "\u2128\u2128\u212a\u212a\u212c\u213b\u213e\u2141\u2147\u214b\u2150\u2150",
    "\u2162\u218a\u2c02\u2c30\u2c32\u2c60\u2c62\u2ce6\u2ced\u2cf5\u2d02\u2d27",
    "\u2d29\u2d29\u2d2f\u2d2f\u2d32\u2d69\u2d71\u2d71\u2d81\u2d98\u2da2\u2da8",
    "\u2daa\u2db0\u2db2\u2db8\u2dba\u2dc0\u2dc2\u2dc8\u2dca\u2dd0\u2dd2\u2dd8",
    "\u2dda\u2de0\u2de2\u2e01\u3007\u3009\u3023\u3031\u3033\u3037\u303a\u303e",
    "\u3043\u3098\u309b\u30a1\u30a3\u30fc\u30fe\u3101\u3107\u312f\u3133\u3190",
    "\u31a2\u31bc\u31f2\u3201\u3402\u4db7\u4e02\u9fce\ua002\ua48e\ua4d2\ua4ff",
    "\ua502\ua60e\ua612\ua62d\ua642\ua671\ua676\ua67f\ua681\ua699\ua6a1\ua6f3",
    "\ua719\ua721\ua724\ua78a\ua78d\ua790\ua792\ua795\ua7a2\ua7ac\ua7fa\ua829",
    "\ua842\ua875\ua882\ua8c6\ua8d2\ua8db\ua8e2\ua8f9\ua8fd\ua8fd\ua902\ua92f",
    "\ua932\ua955\ua962\ua97e\ua982\ua9c2\ua9d1\ua9db\uaa02\uaa38\uaa42\uaa4f",
    "\uaa52\uaa5b\uaa62\uaa78\uaa7c\uaa7d\uaa82\uaac4\uaadd\uaadf\uaae2\uaaf1",
    "\uaaf4\uaaf8\uab03\uab08\uab0b\uab10\uab13\uab18\uab22\uab28\uab2a\uab30",
    "\uabc2\uabec\uabee\uabef\uabf2\uabfb\uac02\ud7a5\ud7b2\ud7c8\ud7cd\ud7fd",
    "\uf902\ufa6f\ufa72\ufadb\ufb02\ufb08\ufb15\ufb19\ufb1f\ufb2a\ufb2c\ufb38",
    "\ufb3a\ufb3e\ufb40\ufb40\ufb42\ufb43\ufb45\ufb46\ufb48\ufbb3\ufbd5\ufd3f",
    "\ufd52\ufd91\ufd94\ufdc9\ufdf2\ufdfd\ufe02\ufe11\ufe22\ufe28\ufe35\ufe36",
    "\ufe4f\ufe51\ufe72\ufe76\ufe78\ufefe\uff12\uff1b\uff23\uff3c\uff41\uff41",
    "\uff43\uff5c\uff68\uffc0\uffc4\uffc9\uffcc\uffd1\uffd4\uffd9\uffdc\uffde",
    "\u0004\u0002\u000202\u0001\u0004\u0002\u0002+-\u0001\u0005\u0002$$)",
    ")^^\u0005\u0002\u0002\u000b\r\u000e\u0010\u0001\u0003\u0002\u001f\u001f",
    "\u0003\u0002\u001e\u001e\u0003\u0002\u000f\u000f\u0013\u0002&&\u00a4",
    "\u00a7\u0591\u0591\u060d\u060d\u09f4\u09f5\u09fd\u09fd\u0af3\u0af3\u0bfb",
    "\u0bfb\u0e41\u0e41\u17dd\u17dd\u20a2\u20bc\ua83a\ua83a\ufdfe\ufdfe\ufe6b",
    "\ufe6b\uff06\uff06\uffe2\uffe3\uffe7\uffe8\u0003\u0002\"\"\u0003\u0002",
    "\u000b\u000b\u0003\u0002\f\f\u0003\u0002\r\r\u0003\u0002!!\u0174\u0002",
    "C\\c|\u00ac\u00ac\u00b7\u00b7\u00bc\u00bc\u00c2\u00d8\u00da\u00f8\u00fa",
    "\u02c3\u02c8\u02d3\u02e2\u02e6\u02ee\u02ee\u02f0\u02f0\u0372\u0376\u0378",
    "\u0379\u037c\u037f\u0388\u0388\u038a\u038c\u038e\u038e\u0390\u03a3\u03a5",
    "\u03f7\u03f9\u0483\u048c\u0529\u0533\u0558\u055b\u055b\u0563\u0589\u05d2",
    "\u05ec\u05f2\u05f4\u0622\u064c\u0670\u0671\u0673\u06d5\u06d7\u06d7\u06e7",
    "\u06e8\u06f0\u06f1\u06fc\u06fe\u0701\u0701\u0712\u0712\u0714\u0731\u074f",
    "\u07a7\u07b3\u07b3\u07cc\u07ec\u07f6\u07f7\u07fc\u07fc\u0802\u0817\u081c",
    "\u081c\u0826\u0826\u082a\u082a\u0842\u085a\u08a2\u08a2\u08a4\u08ae\u0906",
    "\u093b\u093f\u093f\u0952\u0952\u095a\u0963\u0973\u0979\u097b\u0981\u0987",
    "\u098e\u0991\u0992\u0995\u09aa\u09ac\u09b2\u09b4\u09b4\u09b8\u09bb\u09bf",
    "\u09bf\u09d0\u09d0\u09de\u09df\u09e1\u09e3\u09f2\u09f3\u0a07\u0a0c\u0a11",
    "\u0a12\u0a15\u0a2a\u0a2c\u0a32\u0a34\u0a35\u0a37\u0a38\u0a3a\u0a3b\u0a5b",
    "\u0a5e\u0a60\u0a60\u0a74\u0a76\u0a87\u0a8f\u0a91\u0a93\u0a95\u0aaa\u0aac",
    "\u0ab2\u0ab4\u0ab5\u0ab7\u0abb\u0abf\u0abf\u0ad2\u0ad2\u0ae2\u0ae3\u0b07",
    "\u0b0e\u0b11\u0b12\u0b15\u0b2a\u0b2c\u0b32\u0b34\u0b35\u0b37\u0b3b\u0b3f",
    "\u0b3f\u0b5e\u0b5f\u0b61\u0b63\u0b73\u0b73\u0b85\u0b85\u0b87\u0b8c\u0b90",
    "\u0b92\u0b94\u0b97\u0b9b\u0b9c\u0b9e\u0b9e\u0ba0\u0ba1\u0ba5\u0ba6\u0baa",
    "\u0bac\u0bb0\u0bbb\u0bd2\u0bd2\u0c07\u0c0e\u0c10\u0c12\u0c14\u0c2a\u0c2c",
    "\u0c35\u0c37\u0c3b\u0c3f\u0c3f\u0c5a\u0c5b\u0c62\u0c63\u0c87\u0c8e\u0c90",
    "\u0c92\u0c94\u0caa\u0cac\u0cb5\u0cb7\u0cbb\u0cbf\u0cbf\u0ce0\u0ce0\u0ce2",
    "\u0ce3\u0cf3\u0cf4\u0d07\u0d0e\u0d10\u0d12\u0d14\u0d3c\u0d3f\u0d3f\u0d50",
    "\u0d50\u0d62\u0d63\u0d7c\u0d81\u0d87\u0d98\u0d9c\u0db3\u0db5\u0dbd\u0dbf",
    "\u0dbf\u0dc2\u0dc8\u0e03\u0e32\u0e34\u0e35\u0e42\u0e48\u0e83\u0e84\u0e86",
    "\u0e86\u0e89\u0e8a\u0e8c\u0e8c\u0e8f\u0e8f\u0e96\u0e99\u0e9b\u0ea1\u0ea3",
    "\u0ea5\u0ea7\u0ea7\u0ea9\u0ea9\u0eac\u0ead\u0eaf\u0eb2\u0eb4\u0eb5\u0ebf",
    "\u0ebf\u0ec2\u0ec6\u0ec8\u0ec8\u0ede\u0ee1\u0f02\u0f02\u0f42\u0f49\u0f4b",
    "\u0f6e\u0f8a\u0f8e\u1002\u102c\u1041\u1041\u1052\u1057\u105c\u105f\u1063",
    "\u1063\u1067\u1068\u1070\u1072\u1077\u1083\u1090\u1090\u10a2\u10c7\u10c9",
    "\u10c9\u10cf\u10cf\u10d2\u10fc\u10fe\u124a\u124c\u124f\u1252\u1258\u125a",
    "\u125a\u125c\u125f\u1262\u128a\u128c\u128f\u1292\u12b2\u12b4\u12b7\u12ba",
    "\u12c0\u12c2\u12c2\u12c4\u12c7\u12ca\u12d8\u12da\u1312\u1314\u1317\u131a",
    "\u135c\u1382\u1391\u13a2\u13f6\u1403\u166e\u1671\u1681\u1683\u169c\u16a2",
    "\u16ec\u16f0\u16f2\u1702\u170e\u1710\u1713\u1722\u1733\u1742\u1753\u1762",
    "\u176e\u1770\u1772\u1782\u17b5\u17d9\u17d9\u17de\u17de\u1822\u1879\u1882",
    "\u18aa\u18ac\u18ac\u18b2\u18f7\u1902\u191e\u1952\u196f\u1972\u1976\u1982",
    "\u19ad\u19c3\u19c9\u1a02\u1a18\u1a22\u1a56\u1aa9\u1aa9\u1b07\u1b35\u1b47",
    "\u1b4d\u1b85\u1ba2\u1bb0\u1bb1\u1bbc\u1be7\u1c02\u1c25\u1c4f\u1c51\u1c5c",
    "\u1c7f\u1ceb\u1cee\u1cf0\u1cf3\u1cf7\u1cf8\u1d02\u1dc1\u1e02\u1f17\u1f1a",
    "\u1f1f\u1f22\u1f47\u1f4a\u1f4f\u1f52\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f",
    "\u1f5f\u1f61\u1f7f\u1f82\u1fb6\u1fb8\u1fbe\u1fc0\u1fc0\u1fc4\u1fc6\u1fc8",
    "\u1fce\u1fd2\u1fd5\u1fd8\u1fdd\u1fe2\u1fee\u1ff4\u1ff6\u1ff8\u1ffe\u2073",
    "\u2073\u2081\u2081\u2092\u209e\u2104\u2104\u2109\u2109\u210c\u2115\u2117",
    "\u2117\u211a\u211f\u2126\u2126\u2128\u2128\u212a\u212a\u212c\u213b\u213e",
    "\u2141\u2147\u214b\u2150\u2150\u2162\u218a\u2c02\u2c30\u2c32\u2c60\u2c62",
    "\u2ce6\u2ced\u2cf0\u2cf4\u2cf5\u2d02\u2d27\u2d29\u2d29\u2d2f\u2d2f\u2d32",
    "\u2d69\u2d71\u2d71\u2d82\u2d98\u2da2\u2da8\u2daa\u2db0\u2db2\u2db8\u2dba",
    "\u2dc0\u2dc2\u2dc8\u2dca\u2dd0\u2dd2\u2dd8\u2dda\u2de0\u3007\u3009\u3023",
    "\u302b\u3033\u3037\u303a\u303e\u3043\u3098\u309d\u30a1\u30a3\u30fc\u30fe",
    "\u3101\u3107\u312f\u3133\u3190\u31a2\u31bc\u31f2\u3201\u3402\u4db7\u4e02",
    "\u9fce\ua002\ua48e\ua4d2\ua4ff\ua502\ua60e\ua612\ua621\ua62c\ua62d\ua642",
    "\ua670\ua681\ua699\ua6a2\ua6f1\ua719\ua721\ua724\ua78a\ua78d\ua790\ua792",
    "\ua795\ua7a2\ua7ac\ua7fa\ua803\ua805\ua807\ua809\ua80c\ua80e\ua824\ua842",
    "\ua875\ua884\ua8b5\ua8f4\ua8f9\ua8fd\ua8fd\ua90c\ua927\ua932\ua948\ua962",
    "\ua97e\ua986\ua9b4\ua9d1\ua9d1\uaa02\uaa2a\uaa42\uaa44\uaa46\uaa4d\uaa62",
    "\uaa78\uaa7c\uaa7c\uaa82\uaab1\uaab3\uaab3\uaab7\uaab8\uaabb\uaabf\uaac2",
    "\uaac2\uaac4\uaac4\uaadd\uaadf\uaae2\uaaec\uaaf4\uaaf6\uab03\uab08\uab0b",
    "\uab10\uab13\uab18\uab22\uab28\uab2a\uab30\uabc2\uabe4\uac02\ud7a5\ud7b2",
    "\ud7c8\ud7cd\ud7fd\uf902\ufa6f\ufa72\ufadb\ufb02\ufb08\ufb15\ufb19\ufb1f",
    "\ufb1f\ufb21\ufb2a\ufb2c\ufb38\ufb3a\ufb3e\ufb40\ufb40\ufb42\ufb43\ufb45",
    "\ufb46\ufb48\ufbb3\ufbd5\ufd3f\ufd52\ufd91\ufd94\ufdc9\ufdf2\ufdfd\ufe72",
    "\ufe76\ufe78\ufefe\uff23\uff3c\uff43\uff5c\uff68\uffc0\uffc4\uffc9\uffcc",
    "\uffd1\uffd4\uffd9\uffdc\uffde\u032b\u0002\u0003\u0003\u0002\u0002\u0002",
    "\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002",
    "\u0002\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002",
    "\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002",
    "\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002",
    "\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002",
    "\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002",
    "\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002",
    "\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002",
    "%\u0003\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003",
    "\u0002\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002",
    "\u0002\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002",
    "\u0002\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002",
    "\u00027\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002",
    ";\u0003\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003",
    "\u0002\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002",
    "\u0002\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002",
    "\u0002\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002",
    "\u0002M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002",
    "Q\u0003\u0002\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003",
    "\u0002\u0002\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002",
    "\u0002\u0002\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002",
    "\u0002\u0002_\u0003\u0002\u0002\u0002\u0002a\u0003\u0002\u0002\u0002",
    "\u0002c\u0003\u0002\u0002\u0002\u0002e\u0003\u0002\u0002\u0002\u0002",
    "g\u0003\u0002\u0002\u0002\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003",
    "\u0002\u0002\u0002\u0002m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002",
    "\u0002\u0002\u0002q\u0003\u0002\u0002\u0002\u0002s\u0003\u0002\u0002",
    "\u0002\u0002u\u0003\u0002\u0002\u0002\u0002w\u0003\u0002\u0002\u0002",
    "\u0002y\u0003\u0002\u0002\u0002\u0002{\u0003\u0002\u0002\u0002\u0002",
    "}\u0003\u0002\u0002\u0002\u0002\u007f\u0003\u0002\u0002\u0002\u0002",
    "\u0081\u0003\u0002\u0002\u0002\u0002\u0083\u0003\u0002\u0002\u0002\u0002",
    "\u0085\u0003\u0002\u0002\u0002\u0002\u0087\u0003\u0002\u0002\u0002\u0002",
    "\u0089\u0003\u0002\u0002\u0002\u0002\u008b\u0003\u0002\u0002\u0002\u0002",
    "\u008d\u0003\u0002\u0002\u0002\u0002\u008f\u0003\u0002\u0002\u0002\u0002",
    "\u0091\u0003\u0002\u0002\u0002\u0002\u0093\u0003\u0002\u0002\u0002\u0002",
    "\u0095\u0003\u0002\u0002\u0002\u0002\u0097\u0003\u0002\u0002\u0002\u0002",
    "\u0099\u0003\u0002\u0002\u0002\u0002\u009b\u0003\u0002\u0002\u0002\u0002",
    "\u009d\u0003\u0002\u0002\u0002\u0002\u009f\u0003\u0002\u0002\u0002\u0002",
    "\u00a1\u0003\u0002\u0002\u0002\u0002\u00a3\u0003\u0002\u0002\u0002\u0002",
    "\u00a5\u0003\u0002\u0002\u0002\u0002\u00a7\u0003\u0002\u0002\u0002\u0002",
    "\u00a9\u0003\u0002\u0002\u0002\u0002\u00ab\u0003\u0002\u0002\u0002\u0002",
    "\u00ad\u0003\u0002\u0002\u0002\u0002\u00af\u0003\u0002\u0002\u0002\u0002",
    "\u00b1\u0003\u0002\u0002\u0002\u0002\u00b3\u0003\u0002\u0002\u0002\u0002",
    "\u00b5\u0003\u0002\u0002\u0002\u0002\u00b7\u0003\u0002\u0002\u0002\u0002",
    "\u00b9\u0003\u0002\u0002\u0002\u0002\u00bb\u0003\u0002\u0002\u0002\u0002",
    "\u00bd\u0003\u0002\u0002\u0002\u0002\u00bf\u0003\u0002\u0002\u0002\u0002",
    "\u00c1\u0003\u0002\u0002\u0002\u0002\u00c3\u0003\u0002\u0002\u0002\u0002",
    "\u00c5\u0003\u0002\u0002\u0002\u0002\u00c7\u0003\u0002\u0002\u0002\u0002",
    "\u00c9\u0003\u0002\u0002\u0002\u0002\u00cb\u0003\u0002\u0002\u0002\u0002",
    "\u00cd\u0003\u0002\u0002\u0002\u0002\u00cf\u0003\u0002\u0002\u0002\u0002",
    "\u00d1\u0003\u0002\u0002\u0002\u0002\u00d3\u0003\u0002\u0002\u0002\u0002",
    "\u00d5\u0003\u0002\u0002\u0002\u0002\u00d7\u0003\u0002\u0002\u0002\u0002",
    "\u00d9\u0003\u0002\u0002\u0002\u0002\u00db\u0003\u0002\u0002\u0002\u0002",
    "\u00dd\u0003\u0002\u0002\u0002\u0002\u00df\u0003\u0002\u0002\u0002\u0002",
    "\u00e1\u0003\u0002\u0002\u0002\u0002\u00e3\u0003\u0002\u0002\u0002\u0003",
    "\u010f\u0003\u0002\u0002\u0002\u0005\u0111\u0003\u0002\u0002\u0002\u0007",
    "\u0113\u0003\u0002\u0002\u0002\t\u0115\u0003\u0002\u0002\u0002\u000b",
    "\u0118\u0003\u0002\u0002\u0002\r\u011a\u0003\u0002\u0002\u0002\u000f",
    "\u011c\u0003\u0002\u0002\u0002\u0011\u011e\u0003\u0002\u0002\u0002\u0013",
    "\u0120\u0003\u0002\u0002\u0002\u0015\u0122\u0003\u0002\u0002\u0002\u0017",
    "\u0124\u0003\u0002\u0002\u0002\u0019\u0126\u0003\u0002\u0002\u0002\u001b",
    "\u0128\u0003\u0002\u0002\u0002\u001d\u012b\u0003\u0002\u0002\u0002\u001f",
    "\u012d\u0003\u0002\u0002\u0002!\u012f\u0003\u0002\u0002\u0002#\u0131",
    "\u0003\u0002\u0002\u0002%\u0133\u0003\u0002\u0002\u0002\'\u0135\u0003",
    "\u0002\u0002\u0002)\u0138\u0003\u0002\u0002\u0002+\u013b\u0003\u0002",
    "\u0002\u0002-\u013e\u0003\u0002\u0002\u0002/\u0140\u0003\u0002\u0002",
    "\u00021\u0142\u0003\u0002\u0002\u00023\u0145\u0003\u0002\u0002\u0002",
    "5\u0148\u0003\u0002\u0002\u00027\u014a\u0003\u0002\u0002\u00029\u014c",
    "\u0003\u0002\u0002\u0002;\u014e\u0003\u0002\u0002\u0002=\u0150\u0003",
    "\u0002\u0002\u0002?\u0152\u0003\u0002\u0002\u0002A\u0154\u0003\u0002",
    "\u0002\u0002C\u0156\u0003\u0002\u0002\u0002E\u0158\u0003\u0002\u0002",
    "\u0002G\u015a\u0003\u0002\u0002\u0002I\u015c\u0003\u0002\u0002\u0002",
    "K\u015e\u0003\u0002\u0002\u0002M\u0160\u0003\u0002\u0002\u0002O\u0162",
    "\u0003\u0002\u0002\u0002Q\u0164\u0003\u0002\u0002\u0002S\u0166\u0003",
    "\u0002\u0002\u0002U\u0168\u0003\u0002\u0002\u0002W\u016a\u0003\u0002",
    "\u0002\u0002Y\u016c\u0003\u0002\u0002\u0002[\u016e\u0003\u0002\u0002",
    "\u0002]\u0170\u0003\u0002\u0002\u0002_\u0172\u0003\u0002\u0002\u0002",
    "a\u0174\u0003\u0002\u0002\u0002c\u0176\u0003\u0002\u0002\u0002e\u0178",
    "\u0003\u0002\u0002\u0002g\u017a\u0003\u0002\u0002\u0002i\u017c\u0003",
    "\u0002\u0002\u0002k\u017e\u0003\u0002\u0002\u0002m\u0180\u0003\u0002",
    "\u0002\u0002o\u0182\u0003\u0002\u0002\u0002q\u0184\u0003\u0002\u0002",
    "\u0002s\u0186\u0003\u0002\u0002\u0002u\u0188\u0003\u0002\u0002\u0002",
    "w\u018a\u0003\u0002\u0002\u0002y\u018c\u0003\u0002\u0002\u0002{\u01a2",
    "\u0003\u0002\u0002\u0002}\u01a4\u0003\u0002\u0002\u0002\u007f\u01b9",
    "\u0003\u0002\u0002\u0002\u0081\u01bb\u0003\u0002\u0002\u0002\u0083\u01c1",
    "\u0003\u0002\u0002\u0002\u0085\u01c5\u0003\u0002\u0002\u0002\u0087\u01ce",
    "\u0003\u0002\u0002\u0002\u0089\u01d4\u0003\u0002\u0002\u0002\u008b\u01db",
    "\u0003\u0002\u0002\u0002\u008d\u01de\u0003\u0002\u0002\u0002\u008f\u01e4",
    "\u0003\u0002\u0002\u0002\u0091\u01e7\u0003\u0002\u0002\u0002\u0093\u01ee",
    "\u0003\u0002\u0002\u0002\u0095\u01f2\u0003\u0002\u0002\u0002\u0097\u01f9",
    "\u0003\u0002\u0002\u0002\u0099\u0200\u0003\u0002\u0002\u0002\u009b\u0207",
    "\u0003\u0002\u0002\u0002\u009d\u020c\u0003\u0002\u0002\u0002\u009f\u0215",
    "\u0003\u0002\u0002\u0002\u00a1\u021c\u0003\u0002\u0002\u0002\u00a3\u0222",
    "\u0003\u0002\u0002\u0002\u00a5\u0225\u0003\u0002\u0002\u0002\u00a7\u022a",
    "\u0003\u0002\u0002\u0002\u00a9\u0230\u0003\u0002\u0002\u0002\u00ab\u023b",
    "\u0003\u0002\u0002\u0002\u00ad\u0240\u0003\u0002\u0002\u0002\u00af\u024a",
    "\u0003\u0002\u0002\u0002\u00b1\u024e\u0003\u0002\u0002\u0002\u00b3\u0254",
    "\u0003\u0002\u0002\u0002\u00b5\u0257\u0003\u0002\u0002\u0002\u00b7\u025b",
    "\u0003\u0002\u0002\u0002\u00b9\u025f\u0003\u0002\u0002\u0002\u00bb\u0263",
    "\u0003\u0002\u0002\u0002\u00bd\u0266\u0003\u0002\u0002\u0002\u00bf\u026d",
    "\u0003\u0002\u0002\u0002\u00c1\u0272\u0003\u0002\u0002\u0002\u00c3\u027b",
    "\u0003\u0002\u0002\u0002\u00c5\u027e\u0003\u0002\u0002\u0002\u00c7\u0283",
    "\u0003\u0002\u0002\u0002\u00c9\u0288\u0003\u0002\u0002\u0002\u00cb\u028e",
    "\u0003\u0002\u0002\u0002\u00cd\u0294\u0003\u0002\u0002\u0002\u00cf\u029b",
    "\u0003\u0002\u0002\u0002\u00d1\u02a3\u0003\u0002\u0002\u0002\u00d3\u02a7",
    "\u0003\u0002\u0002\u0002\u00d5\u02ac\u0003\u0002\u0002\u0002\u00d7\u02b3",
    "\u0003\u0002\u0002\u0002\u00d9\u02b6\u0003\u0002\u0002\u0002\u00db\u02c0",
    "\u0003\u0002\u0002\u0002\u00dd\u02c4\u0003\u0002\u0002\u0002\u00df\u02ce",
    "\u0003\u0002\u0002\u0002\u00e1\u02de\u0003\u0002\u0002\u0002\u00e3\u02f8",
    "\u0003\u0002\u0002\u0002\u00e5\u02fa\u0003\u0002\u0002\u0002\u00e7\u02fc",
    "\u0003\u0002\u0002\u0002\u00e9\u02fe\u0003\u0002\u0002\u0002\u00eb\u0300",
    "\u0003\u0002\u0002\u0002\u00ed\u0302\u0003\u0002\u0002\u0002\u00ef\u0304",
    "\u0003\u0002\u0002\u0002\u00f1\u0306\u0003\u0002\u0002\u0002\u00f3\u0308",
    "\u0003\u0002\u0002\u0002\u00f5\u030a\u0003\u0002\u0002\u0002\u00f7\u030c",
    "\u0003\u0002\u0002\u0002\u00f9\u030e\u0003\u0002\u0002\u0002\u00fb\u0310",
    "\u0003\u0002\u0002\u0002\u00fd\u0312\u0003\u0002\u0002\u0002\u00ff\u0314",
    "\u0003\u0002\u0002\u0002\u0101\u0316\u0003\u0002\u0002\u0002\u0103\u0318",
    "\u0003\u0002\u0002\u0002\u0105\u031a\u0003\u0002\u0002\u0002\u0107\u031c",
    "\u0003\u0002\u0002\u0002\u0109\u031e\u0003\u0002\u0002\u0002\u010b\u0320",
    "\u0003\u0002\u0002\u0002\u010d\u0322\u0003\u0002\u0002\u0002\u010f\u0110",
    "\u0007=\u0002\u0002\u0110\u0004\u0003\u0002\u0002\u0002\u0111\u0112",
    "\u0007.\u0002\u0002\u0112\u0006\u0003\u0002\u0002\u0002\u0113\u0114",
    "\u0007?\u0002\u0002\u0114\b\u0003\u0002\u0002\u0002\u0115\u0116\u0007",
    "-\u0002\u0002\u0116\u0117\u0007?\u0002\u0002\u0117\n\u0003\u0002\u0002",
    "\u0002\u0118\u0119\u0007,\u0002\u0002\u0119\f\u0003\u0002\u0002\u0002",
    "\u011a\u011b\u0007*\u0002\u0002\u011b\u000e\u0003\u0002\u0002\u0002",
    "\u011c\u011d\u0007+\u0002\u0002\u011d\u0010\u0003\u0002\u0002\u0002",
    "\u011e\u011f\u0007]\u0002\u0002\u011f\u0012\u0003\u0002\u0002\u0002",
    "\u0120\u0121\u0007A\u0002\u0002\u0121\u0014\u0003\u0002\u0002\u0002",
    "\u0122\u0123\u0007_\u0002\u0002\u0123\u0016\u0003\u0002\u0002\u0002",
    "\u0124\u0125\u0007<\u0002\u0002\u0125\u0018\u0003\u0002\u0002\u0002",
    "\u0126\u0127\u0007~\u0002\u0002\u0127\u001a\u0003\u0002\u0002\u0002",
    "\u0128\u0129\u00070\u0002\u0002\u0129\u012a\u00070\u0002\u0002\u012a",
    "\u001c\u0003\u0002\u0002\u0002\u012b\u012c\u0007-\u0002\u0002\u012c",
    "\u001e\u0003\u0002\u0002\u0002\u012d\u012e\u0007/\u0002\u0002\u012e",
    " \u0003\u0002\u0002\u0002\u012f\u0130\u00071\u0002\u0002\u0130\"\u0003",
    "\u0002\u0002\u0002\u0131\u0132\u0007\'\u0002\u0002\u0132$\u0003\u0002",
    "\u0002\u0002\u0133\u0134\u0007`\u0002\u0002\u0134&\u0003\u0002\u0002",
    "\u0002\u0135\u0136\u0007?\u0002\u0002\u0136\u0137\u0007\u0080\u0002",
    "\u0002\u0137(\u0003\u0002\u0002\u0002\u0138\u0139\u0007>\u0002\u0002",
    "\u0139\u013a\u0007@\u0002\u0002\u013a*\u0003\u0002\u0002\u0002\u013b",
    "\u013c\u0007#\u0002\u0002\u013c\u013d\u0007?\u0002\u0002\u013d,\u0003",
    "\u0002\u0002\u0002\u013e\u013f\u0007>\u0002\u0002\u013f.\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0007@\u0002\u0002\u01410\u0003\u0002\u0002",
    "\u0002\u0142\u0143\u0007>\u0002\u0002\u0143\u0144\u0007?\u0002\u0002",
    "\u01442\u0003\u0002\u0002\u0002\u0145\u0146\u0007@\u0002\u0002\u0146",
    "\u0147\u0007?\u0002\u0002\u01474\u0003\u0002\u0002\u0002\u0148\u0149",
    "\u00070\u0002\u0002\u01496\u0003\u0002\u0002\u0002\u014a\u014b\u0007",
    "#\u0002\u0002\u014b8\u0003\u0002\u0002\u0002\u014c\u014d\u0007}\u0002",
    "\u0002\u014d:\u0003\u0002\u0002\u0002\u014e\u014f\u0007\u007f\u0002",
    "\u0002\u014f<\u0003\u0002\u0002\u0002\u0150\u0151\u00073\u0002\u0002",
    "\u0151>\u0003\u0002\u0002\u0002\u0152\u0153\u00074\u0002\u0002\u0153",
    "@\u0003\u0002\u0002\u0002\u0154\u0155\u00075\u0002\u0002\u0155B\u0003",
    "\u0002\u0002\u0002\u0156\u0157\u00076\u0002\u0002\u0157D\u0003\u0002",
    "\u0002\u0002\u0158\u0159\u00077\u0002\u0002\u0159F\u0003\u0002\u0002",
    "\u0002\u015a\u015b\u00078\u0002\u0002\u015bH\u0003\u0002\u0002\u0002",
    "\u015c\u015d\u00079\u0002\u0002\u015dJ\u0003\u0002\u0002\u0002\u015e",
    "\u015f\u0007:\u0002\u0002\u015fL\u0003\u0002\u0002\u0002\u0160\u0161",
    "\u0007;\u0002\u0002\u0161N\u0003\u0002\u0002\u0002\u0162\u0163\u0007",
    "2\u0002\u0002\u0163P\u0003\u0002\u0002\u0002\u0164\u0165\u0007G\u0002",
    "\u0002\u0165R\u0003\u0002\u0002\u0002\u0166\u0167\u0007g\u0002\u0002",
    "\u0167T\u0003\u0002\u0002\u0002\u0168\u0169\u0007\u27ea\u0002\u0002",
    "\u0169V\u0003\u0002\u0002\u0002\u016a\u016b\u0007\u300a\u0002\u0002",
    "\u016bX\u0003\u0002\u0002\u0002\u016c\u016d\u0007\ufe66\u0002\u0002",
    "\u016dZ\u0003\u0002\u0002\u0002\u016e\u016f\u0007\uff1e\u0002\u0002",
    "\u016f\\\u0003\u0002\u0002\u0002\u0170\u0171\u0007\u27eb\u0002\u0002",
    "\u0171^\u0003\u0002\u0002\u0002\u0172\u0173\u0007\u300b\u0002\u0002",
    "\u0173`\u0003\u0002\u0002\u0002\u0174\u0175\u0007\ufe67\u0002\u0002",
    "\u0175b\u0003\u0002\u0002\u0002\u0176\u0177\u0007\uff20\u0002\u0002",
    "\u0177d\u0003\u0002\u0002\u0002\u0178\u0179\u0007\u00af\u0002\u0002",
    "\u0179f\u0003\u0002\u0002\u0002\u017a\u017b\u0007\u2012\u0002\u0002",
    "\u017bh\u0003\u0002\u0002\u0002\u017c\u017d\u0007\u2013\u0002\u0002",
    "\u017dj\u0003\u0002\u0002\u0002\u017e\u017f\u0007\u2014\u0002\u0002",
    "\u017fl\u0003\u0002\u0002\u0002\u0180\u0181\u0007\u2015\u0002\u0002",
    "\u0181n\u0003\u0002\u0002\u0002\u0182\u0183\u0007\u2016\u0002\u0002",
    "\u0183p\u0003\u0002\u0002\u0002\u0184\u0185\u0007\u2017\u0002\u0002",
    "\u0185r\u0003\u0002\u0002\u0002\u0186\u0187\u0007\u2214\u0002\u0002",
    "\u0187t\u0003\u0002\u0002\u0002\u0188\u0189\u0007\ufe5a\u0002\u0002",
    "\u0189v\u0003\u0002\u0002\u0002\u018a\u018b\u0007\ufe65\u0002\u0002",
    "\u018bx\u0003\u0002\u0002\u0002\u018c\u018d\u0007\uff0f\u0002\u0002",
    "\u018dz\u0003\u0002\u0002\u0002\u018e\u0193\u0005\u00e5s\u0002\u018f",
    "\u0192\u0005\u0105\u0083\u0002\u0190\u0192\u0005}?\u0002\u0191\u018f",
    "\u0003\u0002\u0002\u0002\u0191\u0190\u0003\u0002\u0002\u0002\u0192\u0195",
    "\u0003\u0002\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0194",
    "\u0003\u0002\u0002\u0002\u0194\u0196\u0003\u0002\u0002\u0002\u0195\u0193",
    "\u0003\u0002\u0002\u0002\u0196\u0197\u0005\u00e5s\u0002\u0197\u01a3",
    "\u0003\u0002\u0002\u0002\u0198\u019d\u0005\u00e7t\u0002\u0199\u019c",
    "\u0005\u00f5{\u0002\u019a\u019c\u0005}?\u0002\u019b\u0199\u0003\u0002",
    "\u0002\u0002\u019b\u019a\u0003\u0002\u0002\u0002\u019c\u019f\u0003\u0002",
    "\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002",
    "\u0002\u0002\u019e\u01a0\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002",
    "\u0002\u0002\u01a0\u01a1\u0005\u00e7t\u0002\u01a1\u01a3\u0003\u0002",
    "\u0002\u0002\u01a2\u018e\u0003\u0002\u0002\u0002\u01a2\u0198\u0003\u0002",
    "\u0002\u0002\u01a3|\u0003\u0002\u0002\u0002\u01a4\u01b6\u0007^\u0002",
    "\u0002\u01a5\u01b7\t\u0002\u0002\u0002\u01a6\u01a7\t\u0003\u0002\u0002",
    "\u01a7\u01a8\u0005\u007f@\u0002\u01a8\u01a9\u0005\u007f@\u0002\u01a9",
    "\u01aa\u0005\u007f@\u0002\u01aa\u01ab\u0005\u007f@\u0002\u01ab\u01b7",
    "\u0003\u0002\u0002\u0002\u01ac\u01ad\t\u0003\u0002\u0002\u01ad\u01ae",
    "\u0005\u007f@\u0002\u01ae\u01af\u0005\u007f@\u0002\u01af\u01b0\u0005",
    "\u007f@\u0002\u01b0\u01b1\u0005\u007f@\u0002\u01b1\u01b2\u0005\u007f",
    "@\u0002\u01b2\u01b3\u0005\u007f@\u0002\u01b3\u01b4\u0005\u007f@\u0002",
    "\u01b4\u01b5\u0005\u007f@\u0002\u01b5\u01b7\u0003\u0002\u0002\u0002",
    "\u01b6\u01a5\u0003\u0002\u0002\u0002\u01b6\u01a6\u0003\u0002\u0002\u0002",
    "\u01b6\u01ac\u0003\u0002\u0002\u0002\u01b7~\u0003\u0002\u0002\u0002",
    "\u01b8\u01ba\t\u0004\u0002\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002",
    "\u01ba\u0080\u0003\u0002\u0002\u0002\u01bb\u01bc\t\u0003\u0002\u0002",
    "\u01bc\u01bd\t\u0005\u0002\u0002\u01bd\u01be\t\u0006\u0002\u0002\u01be",
    "\u01bf\t\u0007\u0002\u0002\u01bf\u01c0\t\u0005\u0002\u0002\u01c0\u0082",
    "\u0003\u0002\u0002\u0002\u01c1\u01c2\t\b\u0002\u0002\u01c2\u01c3\t\t",
    "\u0002\u0002\u01c3\u01c4\t\t\u0002\u0002\u01c4\u0084\u0003\u0002\u0002",
    "\u0002\u01c5\u01c6\t\u0007\u0002\u0002\u01c6\u01c7\t\n\u0002\u0002\u01c7",
    "\u01c8\t\u000b\u0002\u0002\u01c8\u01c9\t\u0006\u0002\u0002\u01c9\u01ca",
    "\t\u0007\u0002\u0002\u01ca\u01cb\t\u0005\u0002\u0002\u01cb\u01cc\t\b",
    "\u0002\u0002\u01cc\u01cd\t\t\u0002\u0002\u01cd\u0086\u0003\u0002\u0002",
    "\u0002\u01ce\u01cf\t\f\u0002\u0002\u01cf\u01d0\t\b\u0002\u0002\u01d0",
    "\u01d1\t\u000b\u0002\u0002\u01d1\u01d2\t\r\u0002\u0002\u01d2\u01d3\t",
    "\u000e\u0002\u0002\u01d3\u0088\u0003\u0002\u0002\u0002\u01d4\u01d5\t",
    "\u0003\u0002\u0002\u01d5\u01d6\t\u0005\u0002\u0002\u01d6\u01d7\t\u000f",
    "\u0002\u0002\u01d7\u01d8\t\u0006\u0002\u0002\u01d8\u01d9\t\u0005\u0002",
    "\u0002\u01d9\u01da\t\u0010\u0002\u0002\u01da\u008a\u0003\u0002\u0002",
    "\u0002\u01db\u01dc\t\b\u0002\u0002\u01dc\u01dd\t\u0011\u0002\u0002\u01dd",
    "\u008c\u0003\u0002\u0002\u0002\u01de\u01df\t\f\u0002\u0002\u01df\u01e0",
    "\t\u0012\u0002\u0002\u01e0\u01e1\t\u0013\u0002\u0002\u01e1\u01e2\t\u0014",
    "\u0002\u0002\u01e2\u01e3\t\u0012\u0002\u0002\u01e3\u008e\u0003\u0002",
    "\u0002\u0002\u01e4\u01e5\t\u0007\u0002\u0002\u01e5\u01e6\t\u0005\u0002",
    "\u0002\u01e6\u0090\u0003\u0002\u0002\u0002\u01e7\u01e8\t\r\u0002\u0002",
    "\u01e8\u01e9\t\u0013\u0002\u0002\u01e9\u01ea\t\u0012\u0002\u0002\u01ea",
    "\u01eb\t\b\u0002\u0002\u01eb\u01ec\t\u000b\u0002\u0002\u01ec\u01ed\t",
    "\u0012\u0002\u0002\u01ed\u0092\u0003\u0002\u0002\u0002\u01ee\u01ef\t",
    "\u0011\u0002\u0002\u01ef\u01f0\t\u0012\u0002\u0002\u01f0\u01f1\t\u000b",
    "\u0002\u0002\u01f1\u0094\u0003\u0002\u0002\u0002\u01f2\u01f3\t\u0010",
    "\u0002\u0002\u01f3\u01f4\t\u0012\u0002\u0002\u01f4\u01f5\t\t\u0002\u0002",
    "\u01f5\u01f6\t\u0012\u0002\u0002\u01f6\u01f7\t\u000b\u0002\u0002\u01f7",
    "\u01f8\t\u0012\u0002\u0002\u01f8\u0096\u0003\u0002\u0002\u0002\u01f9",
    "\u01fa\t\u0010\u0002\u0002\u01fa\u01fb\t\u0012\u0002\u0002\u01fb\u01fc",
    "\t\u000b\u0002\u0002\u01fc\u01fd\t\b\u0002\u0002\u01fd\u01fe\t\r\u0002",
    "\u0002\u01fe\u01ff\t\u000e\u0002\u0002\u01ff\u0098\u0003\u0002\u0002",
    "\u0002\u0200\u0201\t\u0013\u0002\u0002\u0201\u0202\t\u0012\u0002\u0002",
    "\u0202\u0203\t\f\u0002\u0002\u0203\u0204\t\u0007\u0002\u0002\u0204\u0205",
    "\t\u0015\u0002\u0002\u0205\u0206\t\u0012\u0002\u0002\u0206\u009a\u0003",
    "\u0002\u0002\u0002\u0207\u0208\t\u000f\u0002\u0002\u0208\u0209\t\u0006",
    "\u0002\u0002\u0209\u020a\t\u000b\u0002\u0002\u020a\u020b\t\u000e\u0002",
    "\u0002\u020b\u009c\u0003\u0002\u0002\u0002\u020c\u020d\t\u0010\u0002",
    "\u0002\u020d\u020e\t\u0006\u0002\u0002\u020e\u020f\t\u0011\u0002\u0002",
    "\u020f\u0210\t\u000b\u0002\u0002\u0210\u0211\t\u0006\u0002\u0002\u0211",
    "\u0212\t\u0005\u0002\u0002\u0212\u0213\t\r\u0002\u0002\u0213\u0214\t",
    "\u000b\u0002\u0002\u0214\u009e\u0003\u0002\u0002\u0002\u0215\u0216\t",
    "\u0013\u0002\u0002\u0216\u0217\t\u0012\u0002\u0002\u0217\u0218\t\u000b",
    "\u0002\u0002\u0218\u0219\t\u0003\u0002\u0002\u0219\u021a\t\u0013\u0002",
    "\u0002\u021a\u021b\t\u0005\u0002\u0002\u021b\u00a0\u0003\u0002\u0002",
    "\u0002\u021c\u021d\t\u0007\u0002\u0002\u021d\u021e\t\u0013\u0002\u0002",
    "\u021e\u021f\t\u0010\u0002\u0002\u021f\u0220\t\u0012\u0002\u0002\u0220",
    "\u0221\t\u0013\u0002\u0002\u0221\u00a2\u0003\u0002\u0002\u0002\u0222",
    "\u0223\t\u0016\u0002\u0002\u0223\u0224\t\u0017\u0002\u0002\u0224\u00a4",
    "\u0003\u0002\u0002\u0002\u0225\u0226\t\u0011\u0002\u0002\u0226\u0227",
    "\t\u0018\u0002\u0002\u0227\u0228\t\u0006\u0002\u0002\u0228\u0229\t\n",
    "\u0002\u0002\u0229\u00a6\u0003\u0002\u0002\u0002\u022a\u022b\t\t\u0002",
    "\u0002\u022b\u022c\t\u0006\u0002\u0002\u022c\u022d\t\f\u0002\u0002\u022d",
    "\u022e\t\u0006\u0002\u0002\u022e\u022f\t\u000b\u0002\u0002\u022f\u00a8",
    "\u0003\u0002\u0002\u0002\u0230\u0231\t\u0010\u0002\u0002\u0231\u0232",
    "\t\u0012\u0002\u0002\u0232\u0233\t\u0011\u0002\u0002\u0233\u0234\t\r",
    "\u0002\u0002\u0234\u0235\t\u0012\u0002\u0002\u0235\u0236\t\u0005\u0002",
    "\u0002\u0236\u0237\t\u0010\u0002\u0002\u0237\u0238\t\u0006\u0002\u0002",
    "\u0238\u0239\t\u0005\u0002\u0002\u0239\u023a\t\u0014\u0002\u0002\u023a",
    "\u00aa\u0003\u0002\u0002\u0002\u023b\u023c\t\u0010\u0002\u0002\u023c",
    "\u023d\t\u0012\u0002\u0002\u023d\u023e\t\u0011\u0002\u0002\u023e\u023f",
    "\t\r\u0002\u0002\u023f\u00ac\u0003\u0002\u0002\u0002\u0240\u0241\t\b",
    "\u0002\u0002\u0241\u0242\t\u0011\u0002\u0002\u0242\u0243\t\r\u0002\u0002",
    "\u0243\u0244\t\u0012\u0002\u0002\u0244\u0245\t\u0005\u0002\u0002\u0245",
    "\u0246\t\u0010\u0002\u0002\u0246\u0247\t\u0006\u0002\u0002\u0247\u0248",
    "\t\u0005\u0002\u0002\u0248\u0249\t\u0014\u0002\u0002\u0249\u00ae\u0003",
    "\u0002\u0002\u0002\u024a\u024b\t\b\u0002\u0002\u024b\u024c\t\u0011\u0002",
    "\u0002\u024c\u024d\t\r\u0002\u0002\u024d\u00b0\u0003\u0002\u0002\u0002",
    "\u024e\u024f\t\u000f\u0002\u0002\u024f\u0250\t\u000e\u0002\u0002\u0250",
    "\u0251\t\u0012\u0002\u0002\u0251\u0252\t\u0013\u0002\u0002\u0252\u0253",
    "\t\u0012\u0002\u0002\u0253\u00b2\u0003\u0002\u0002\u0002\u0254\u0255",
    "\t\u0007\u0002\u0002\u0255\u0256\t\u0013\u0002\u0002\u0256\u00b4\u0003",
    "\u0002\u0002\u0002\u0257\u0258\t\u0019\u0002\u0002\u0258\u0259\t\u0007",
    "\u0002\u0002\u0259\u025a\t\u0013\u0002\u0002\u025a\u00b6\u0003\u0002",
    "\u0002\u0002\u025b\u025c\t\b\u0002\u0002\u025c\u025d\t\u0005\u0002\u0002",
    "\u025d\u025e\t\u0010\u0002\u0002\u025e\u00b8\u0003\u0002\u0002\u0002",
    "\u025f\u0260\t\u0005\u0002\u0002\u0260\u0261\t\u0007\u0002\u0002\u0261",
    "\u0262\t\u000b\u0002\u0002\u0262\u00ba\u0003\u0002\u0002\u0002\u0263",
    "\u0264\t\u0006\u0002\u0002\u0264\u0265\t\u0005\u0002\u0002\u0265\u00bc",
    "\u0003\u0002\u0002\u0002\u0266\u0267\t\u0011\u0002\u0002\u0267\u0268",
    "\t\u000b\u0002\u0002\u0268\u0269\t\b\u0002\u0002\u0269\u026a\t\u0013",
    "\u0002\u0002\u026a\u026b\t\u000b\u0002\u0002\u026b\u026c\t\u0011\u0002",
    "\u0002\u026c\u00be\u0003\u0002\u0002\u0002\u026d\u026e\t\u0012\u0002",
    "\u0002\u026e\u026f\t\u0005\u0002\u0002\u026f\u0270\t\u0010\u0002\u0002",
    "\u0270\u0271\t\u0011\u0002\u0002\u0271\u00c0\u0003\u0002\u0002\u0002",
    "\u0272\u0273\t\r\u0002\u0002\u0273\u0274\t\u0007\u0002\u0002\u0274\u0275",
    "\t\u0005\u0002\u0002\u0275\u0276\t\u000b\u0002\u0002\u0276\u0277\t\b",
    "\u0002\u0002\u0277\u0278\t\u0006\u0002\u0002\u0278\u0279\t\u0005\u0002",
    "\u0002\u0279\u027a\t\u0011\u0002\u0002\u027a\u00c2\u0003\u0002\u0002",
    "\u0002\u027b\u027c\t\u0006\u0002\u0002\u027c\u027d\t\u0011\u0002\u0002",
    "\u027d\u00c4\u0003\u0002\u0002\u0002\u027e\u027f\t\u0005\u0002\u0002",
    "\u027f\u0280\t\u0003\u0002\u0002\u0280\u0281\t\t\u0002\u0002\u0281\u0282",
    "\t\t\u0002\u0002\u0282\u00c6\u0003\u0002\u0002\u0002\u0283\u0284\t\u000b",
    "\u0002\u0002\u0284\u0285\t\u0013\u0002\u0002\u0285\u0286\t\u0003\u0002",
    "\u0002\u0286\u0287\t\u0012\u0002\u0002\u0287\u00c8\u0003\u0002\u0002",
    "\u0002\u0288\u0289\t\u001a\u0002\u0002\u0289\u028a\t\b\u0002\u0002\u028a",
    "\u028b\t\t\u0002\u0002\u028b\u028c\t\u0011\u0002\u0002\u028c\u028d\t",
    "\u0012\u0002\u0002\u028d\u00ca\u0003\u0002\u0002\u0002\u028e\u028f\t",
    "\r\u0002\u0002\u028f\u0290\t\u0007\u0002\u0002\u0290\u0291\t\u0003\u0002",
    "\u0002\u0291\u0292\t\u0005\u0002\u0002\u0292\u0293\t\u000b\u0002\u0002",
    "\u0293\u00cc\u0003\u0002\u0002\u0002\u0294\u0295\t\u001a\u0002\u0002",
    "\u0295\u0296\t\u0006\u0002\u0002\u0296\u0297\t\t\u0002\u0002\u0297\u0298",
    "\t\u000b\u0002\u0002\u0298\u0299\t\u0012\u0002\u0002\u0299\u029a\t\u0013",
    "\u0002\u0002\u029a\u00ce\u0003\u0002\u0002\u0002\u029b\u029c\t\u0012",
    "\u0002\u0002\u029c\u029d\t\u0019\u0002\u0002\u029d\u029e\t\u000b\u0002",
    "\u0002\u029e\u029f\t\u0013\u0002\u0002\u029f\u02a0\t\b\u0002\u0002\u02a0",
    "\u02a1\t\r\u0002\u0002\u02a1\u02a2\t\u000b\u0002\u0002\u02a2\u00d0\u0003",
    "\u0002\u0002\u0002\u02a3\u02a4\t\b\u0002\u0002\u02a4\u02a5\t\u0005\u0002",
    "\u0002\u02a5\u02a6\t\u0017\u0002\u0002\u02a6\u00d2\u0003\u0002\u0002",
    "\u0002\u02a7\u02a8\t\u0005\u0002\u0002\u02a8\u02a9\t\u0007\u0002\u0002",
    "\u02a9\u02aa\t\u0005\u0002\u0002\u02aa\u02ab\t\u0012\u0002\u0002\u02ab",
    "\u00d4\u0003\u0002\u0002\u0002\u02ac\u02ad\t\u0011\u0002\u0002\u02ad",
    "\u02ae\t\u0006\u0002\u0002\u02ae\u02af\t\u0005\u0002\u0002\u02af\u02b0",
    "\t\u0014\u0002\u0002\u02b0\u02b1\t\t\u0002\u0002\u02b1\u02b2\t\u0012",
    "\u0002\u0002\u02b2\u00d6\u0003\u0002\u0002\u0002\u02b3\u02b4\u00042",
    "2\u0002\u02b4\u02b5\t\u0019\u0002\u0002\u02b5\u00d8\u0003\u0002\u0002",
    "\u0002\u02b6\u02ba\u0005\u00dbn\u0002\u02b7\u02b9\u0005\u00ddo\u0002",
    "\u02b8\u02b7\u0003\u0002\u0002\u0002\u02b9\u02bc\u0003\u0002\u0002\u0002",
    "\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002",
    "\u02bb\u00da\u0003\u0002\u0002\u0002\u02bc\u02ba\u0003\u0002\u0002\u0002",
    "\u02bd\u02c1\u0005\u010d\u0087\u0002\u02be\u02c1\u0005\u00ff\u0080\u0002",
    "\u02bf\u02c1\t\u001b\u0002\u0002\u02c0\u02bd\u0003\u0002\u0002\u0002",
    "\u02c0\u02be\u0003\u0002\u0002\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002",
    "\u02c1\u00dc\u0003\u0002\u0002\u0002\u02c2\u02c5\u0005\u00efx\u0002",
    "\u02c3\u02c5\u0005\u00ff\u0080\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002",
    "\u02c4\u02c3\u0003\u0002\u0002\u0002\u02c5\u00de\u0003\u0002\u0002\u0002",
    "\u02c6\u02ca\u0007b\u0002\u0002\u02c7\u02c9\u0005\u00ebv\u0002\u02c8",
    "\u02c7\u0003\u0002\u0002\u0002\u02c9\u02cc\u0003\u0002\u0002\u0002\u02ca",
    "\u02c8\u0003\u0002\u0002\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb",
    "\u02cd\u0003\u0002\u0002\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cd",
    "\u02cf\u0007b\u0002\u0002\u02ce\u02c6\u0003\u0002\u0002\u0002\u02cf",
    "\u02d0\u0003\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d0",
    "\u02d1\u0003\u0002\u0002\u0002\u02d1\u00e0\u0003\u0002\u0002\u0002\u02d2",
    "\u02df\u0005\u0101\u0081\u0002\u02d3\u02df\u0005\u0103\u0082\u0002\u02d4",
    "\u02df\u0005\u0107\u0084\u0002\u02d5\u02df\u0005\u0109\u0085\u0002\u02d6",
    "\u02df\u0005\u00e9u\u0002\u02d7\u02df\u0005\u00fd\u007f\u0002\u02d8",
    "\u02df\u0005\u00fb~\u0002\u02d9\u02df\u0005\u00f9}\u0002\u02da\u02df",
    "\u0005\u00edw\u0002\u02db\u02df\u0005\u010b\u0086\u0002\u02dc\u02df",
    "\t\u001c\u0002\u0002\u02dd\u02df\u0005\u00e3r\u0002\u02de\u02d2\u0003",
    "\u0002\u0002\u0002\u02de\u02d3\u0003\u0002\u0002\u0002\u02de\u02d4\u0003",
    "\u0002\u0002\u0002\u02de\u02d5\u0003\u0002\u0002\u0002\u02de\u02d6\u0003",
    "\u0002\u0002\u0002\u02de\u02d7\u0003\u0002\u0002\u0002\u02de\u02d8\u0003",
    "\u0002\u0002\u0002\u02de\u02d9\u0003\u0002\u0002\u0002\u02de\u02da\u0003",
    "\u0002\u0002\u0002\u02de\u02db\u0003\u0002\u0002\u0002\u02de\u02dc\u0003",
    "\u0002\u0002\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02df\u00e2\u0003",
    "\u0002\u0002\u0002\u02e0\u02e1\u00071\u0002\u0002\u02e1\u02e2\u0007",
    ",\u0002\u0002\u02e2\u02e8\u0003\u0002\u0002\u0002\u02e3\u02e7\u0005",
    "\u00f3z\u0002\u02e4\u02e5\u0007,\u0002\u0002\u02e5\u02e7\u0005\u00f1",
    "y\u0002\u02e6\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002",
    "\u0002\u0002\u02e7\u02ea\u0003\u0002\u0002\u0002\u02e8\u02e6\u0003\u0002",
    "\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9\u02eb\u0003\u0002",
    "\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb\u02ec\u0007,",
    "\u0002\u0002\u02ec\u02f9\u00071\u0002\u0002\u02ed\u02ee\u00071\u0002",
    "\u0002\u02ee\u02ef\u00071\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002",
    "\u0002\u02f0\u02f2\u0005\u00f7|\u0002\u02f1\u02f3\u0005\u00fd\u007f",
    "\u0002\u02f2\u02f1\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002",
    "\u0002\u02f3\u02f6\u0003\u0002\u0002\u0002\u02f4\u02f7\u0005\u0107\u0084",
    "\u0002\u02f5\u02f7\u0007\u0002\u0002\u0003\u02f6\u02f4\u0003\u0002\u0002",
    "\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f7\u02f9\u0003\u0002\u0002",
    "\u0002\u02f8\u02e0\u0003\u0002\u0002\u0002\u02f8\u02ed\u0003\u0002\u0002",
    "\u0002\u02f9\u00e4\u0003\u0002\u0002\u0002\u02fa\u02fb\t\u001d\u0002",
    "\u0002\u02fb\u00e6\u0003\u0002\u0002\u0002\u02fc\u02fd\t\u001e\u0002",
    "\u0002\u02fd\u00e8\u0003\u0002\u0002\u0002\u02fe\u02ff\t\u001f\u0002",
    "\u0002\u02ff\u00ea\u0003\u0002\u0002\u0002\u0300\u0301\t \u0002\u0002",
    "\u0301\u00ec\u0003\u0002\u0002\u0002\u0302\u0303\t!\u0002\u0002\u0303",
    "\u00ee\u0003\u0002\u0002\u0002\u0304\u0305\t\"\u0002\u0002\u0305\u00f0",
    "\u0003\u0002\u0002\u0002\u0306\u0307\t#\u0002\u0002\u0307\u00f2\u0003",
    "\u0002\u0002\u0002\u0308\u0309\t$\u0002\u0002\u0309\u00f4\u0003\u0002",
    "\u0002\u0002\u030a\u030b\n%\u0002\u0002\u030b\u00f6\u0003\u0002\u0002",
    "\u0002\u030c\u030d\t&\u0002\u0002\u030d\u00f8\u0003\u0002\u0002\u0002",
    "\u030e\u030f\t\'\u0002\u0002\u030f\u00fa\u0003\u0002\u0002\u0002\u0310",
    "\u0311\t(\u0002\u0002\u0311\u00fc\u0003\u0002\u0002\u0002\u0312\u0313",
    "\t)\u0002\u0002\u0313\u00fe\u0003\u0002\u0002\u0002\u0314\u0315\t*\u0002",
    "\u0002\u0315\u0100\u0003\u0002\u0002\u0002\u0316\u0317\t+\u0002\u0002",
    "\u0317\u0102\u0003\u0002\u0002\u0002\u0318\u0319\t,\u0002\u0002\u0319",
    "\u0104\u0003\u0002\u0002\u0002\u031a\u031b\n%\u0002\u0002\u031b\u0106",
    "\u0003\u0002\u0002\u0002\u031c\u031d\t-\u0002\u0002\u031d\u0108\u0003",
    "\u0002\u0002\u0002\u031e\u031f\t.\u0002\u0002\u031f\u010a\u0003\u0002",
    "\u0002\u0002\u0320\u0321\t/\u0002\u0002\u0321\u010c\u0003\u0002\u0002",
    "\u0002\u0322\u0323\t0\u0002\u0002\u0323\u010e\u0003\u0002\u0002\u0002",
    "\u0015\u0002\u0191\u0193\u019b\u019d\u01a2\u01b6\u01b9\u02ba\u02c0\u02c4",
    "\u02ca\u02d0\u02de\u02e6\u02e8\u02f2\u02f6\u02f8\u0002"].join("");


  var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

  var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
  });

  function CypherLexer(input) {
    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    
    antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
  }

  CypherLexer.prototype = Object.create(antlr4.Lexer.prototype);
  CypherLexer.prototype.constructor = CypherLexer;

  CypherLexer.EOF = antlr4.Token.EOF;
  CypherLexer.T__0 = 1;
  CypherLexer.T__1 = 2;
  CypherLexer.T__2 = 3;
  CypherLexer.T__3 = 4;
  CypherLexer.T__4 = 5;
  CypherLexer.T__5 = 6;
  CypherLexer.T__6 = 7;
  CypherLexer.T__7 = 8;
  CypherLexer.T__8 = 9;
  CypherLexer.T__9 = 10;
  CypherLexer.T__10 = 11;
  CypherLexer.T__11 = 12;
  CypherLexer.T__12 = 13;
  CypherLexer.T__13 = 14;
  CypherLexer.T__14 = 15;
  CypherLexer.T__15 = 16;
  CypherLexer.T__16 = 17;
  CypherLexer.T__17 = 18;
  CypherLexer.T__18 = 19;
  CypherLexer.T__19 = 20;
  CypherLexer.T__20 = 21;
  CypherLexer.T__21 = 22;
  CypherLexer.T__22 = 23;
  CypherLexer.T__23 = 24;
  CypherLexer.T__24 = 25;
  CypherLexer.T__25 = 26;
  CypherLexer.T__26 = 27;
  CypherLexer.T__27 = 28;
  CypherLexer.T__28 = 29;
  CypherLexer.T__29 = 30;
  CypherLexer.T__30 = 31;
  CypherLexer.T__31 = 32;
  CypherLexer.T__32 = 33;
  CypherLexer.T__33 = 34;
  CypherLexer.T__34 = 35;
  CypherLexer.T__35 = 36;
  CypherLexer.T__36 = 37;
  CypherLexer.T__37 = 38;
  CypherLexer.T__38 = 39;
  CypherLexer.T__39 = 40;
  CypherLexer.T__40 = 41;
  CypherLexer.T__41 = 42;
  CypherLexer.T__42 = 43;
  CypherLexer.T__43 = 44;
  CypherLexer.T__44 = 45;
  CypherLexer.T__45 = 46;
  CypherLexer.T__46 = 47;
  CypherLexer.T__47 = 48;
  CypherLexer.T__48 = 49;
  CypherLexer.T__49 = 50;
  CypherLexer.T__50 = 51;
  CypherLexer.T__51 = 52;
  CypherLexer.T__52 = 53;
  CypherLexer.T__53 = 54;
  CypherLexer.T__54 = 55;
  CypherLexer.T__55 = 56;
  CypherLexer.T__56 = 57;
  CypherLexer.T__57 = 58;
  CypherLexer.T__58 = 59;
  CypherLexer.T__59 = 60;
  CypherLexer.StringLiteral = 61;
  CypherLexer.EscapedChar = 62;
  CypherLexer.HexDigit = 63;
  CypherLexer.UNION = 64;
  CypherLexer.ALL = 65;
  CypherLexer.OPTIONAL = 66;
  CypherLexer.MATCH = 67;
  CypherLexer.UNWIND = 68;
  CypherLexer.AS = 69;
  CypherLexer.MERGE = 70;
  CypherLexer.ON = 71;
  CypherLexer.CREATE = 72;
  CypherLexer.SET = 73;
  CypherLexer.DELETE = 74;
  CypherLexer.DETACH = 75;
  CypherLexer.REMOVE = 76;
  CypherLexer.WITH = 77;
  CypherLexer.DISTINCT = 78;
  CypherLexer.RETURN = 79;
  CypherLexer.ORDER = 80;
  CypherLexer.BY = 81;
  CypherLexer.L_SKIP = 82;
  CypherLexer.LIMIT = 83;
  CypherLexer.DESCENDING = 84;
  CypherLexer.DESC = 85;
  CypherLexer.ASCENDING = 86;
  CypherLexer.ASC = 87;
  CypherLexer.WHERE = 88;
  CypherLexer.OR = 89;
  CypherLexer.XOR = 90;
  CypherLexer.AND = 91;
  CypherLexer.NOT = 92;
  CypherLexer.IN = 93;
  CypherLexer.STARTS = 94;
  CypherLexer.ENDS = 95;
  CypherLexer.CONTAINS = 96;
  CypherLexer.IS = 97;
  CypherLexer.NULL = 98;
  CypherLexer.TRUE = 99;
  CypherLexer.FALSE = 100;
  CypherLexer.COUNT = 101;
  CypherLexer.FILTER = 102;
  CypherLexer.EXTRACT = 103;
  CypherLexer.ANY = 104;
  CypherLexer.NONE = 105;
  CypherLexer.SINGLE = 106;
  CypherLexer.L_0X = 107;
  CypherLexer.UnescapedSymbolicName = 108;
  CypherLexer.IdentifierStart = 109;
  CypherLexer.IdentifierPart = 110;
  CypherLexer.EscapedSymbolicName = 111;
  CypherLexer.WHITESPACE = 112;
  CypherLexer.Comment = 113;


  CypherLexer.modeNames = ["DEFAULT_MODE"];

  CypherLexer.literalNames = [null, "';'", "','", "'='", "'+='", "'*'", "'('",
    "')'", "'['", "'?'", "']'", "':'", "'|'", "'..'",
    "'+'", "'-'", "'/'", "'%'", "'^'", "'=~'",
    "'<>'", "'!='", "'<'", "'>'", "'<='", "'>='",
    "'.'", "'!'", "'{'", "'}'", "'1'", "'2'", "'3'",
    "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'0'",
    "'E'", "'e'", "'⟨'", "'〈'", "'﹤'", "'＜'", "'⟩'",
    "'〉'", "'﹥'", "'＞'", "'­'", "'‐'", "'‑'", "'‒'",
    "'–'", "'—'", "'―'", "'−'", "'﹘'", "'﹣'", "'－'"];

  CypherLexer.symbolicNames = [null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, null, null,
    null, null, null, null, null, "StringLiteral",
    "EscapedChar", "HexDigit", "UNION", "ALL",
    "OPTIONAL", "MATCH", "UNWIND", "AS", "MERGE",
    "ON", "CREATE", "SET", "DELETE", "DETACH",
    "REMOVE", "WITH", "DISTINCT", "RETURN", "ORDER",
    "BY", "L_SKIP", "LIMIT", "DESCENDING", "DESC",
    "ASCENDING", "ASC", "WHERE", "OR", "XOR",
    "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS",
    "IS", "NULL", "TRUE", "FALSE", "COUNT", "FILTER",
    "EXTRACT", "ANY", "NONE", "SINGLE", "L_0X",
    "UnescapedSymbolicName", "IdentifierStart",
    "IdentifierPart", "EscapedSymbolicName", "WHITESPACE",
    "Comment"];

  CypherLexer.ruleNames = ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5",
    "T__6", "T__7", "T__8", "T__9", "T__10", "T__11",
    "T__12", "T__13", "T__14", "T__15", "T__16", "T__17",
    "T__18", "T__19", "T__20", "T__21", "T__22", "T__23",
    "T__24", "T__25", "T__26", "T__27", "T__28", "T__29",
    "T__30", "T__31", "T__32", "T__33", "T__34", "T__35",
    "T__36", "T__37", "T__38", "T__39", "T__40", "T__41",
    "T__42", "T__43", "T__44", "T__45", "T__46", "T__47",
    "T__48", "T__49", "T__50", "T__51", "T__52", "T__53",
    "T__54", "T__55", "T__56", "T__57", "T__58", "T__59",
    "StringLiteral", "EscapedChar", "HexDigit", "UNION",
    "ALL", "OPTIONAL", "MATCH", "UNWIND", "AS", "MERGE",
    "ON", "CREATE", "SET", "DELETE", "DETACH", "REMOVE",
    "WITH", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP",
    "LIMIT", "DESCENDING", "DESC", "ASCENDING", "ASC",
    "WHERE", "OR", "XOR", "AND", "NOT", "IN", "STARTS",
    "ENDS", "CONTAINS", "IS", "NULL", "TRUE", "FALSE",
    "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE",
    "L_0X", "UnescapedSymbolicName", "IdentifierStart",
    "IdentifierPart", "EscapedSymbolicName", "WHITESPACE",
    "Comment", "Quote_DBL", "Quote_SG", "FF", "EscapedSymbolicName_0",
    "RS", "ID_Continue", "Comment_1", "Comment_0",
    "StringLiteral_1", "Comment_2", "GS", "FS", "CR",
    "Sc", "SPACE", "TAB", "StringLiteral_0", "LF",
    "VT", "US", "ID_Start"];

  CypherLexer.grammarFileName = "Cypher.g4";


  return CypherLexer;
}

},{}],2:[function(require,module,exports){
// Generated from browser-cypher/Cypher.g4 by ANTLR 4.5.3
// jshint ignore: start
module.exports = function (antlr4) {

// This class defines a complete listener for a parse tree produced by CypherParser.
  function CypherListener() {
    antlr4.tree.ParseTreeListener.call(this);
    return this;
  }

  CypherListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
  CypherListener.prototype.constructor = CypherListener;

// Enter a parse tree produced by CypherParser#cypher.
  CypherListener.prototype.enterCypher = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#cypher.
  CypherListener.prototype.exitCypher = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#statement.
  CypherListener.prototype.enterStatement = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#statement.
  CypherListener.prototype.exitStatement = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#query.
  CypherListener.prototype.enterQuery = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#query.
  CypherListener.prototype.exitQuery = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#regularQuery.
  CypherListener.prototype.enterRegularQuery = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#regularQuery.
  CypherListener.prototype.exitRegularQuery = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#singleQuery.
  CypherListener.prototype.enterSingleQuery = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#singleQuery.
  CypherListener.prototype.exitSingleQuery = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#union.
  CypherListener.prototype.enterUnion = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#union.
  CypherListener.prototype.exitUnion = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#clause.
  CypherListener.prototype.enterClause = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#clause.
  CypherListener.prototype.exitClause = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_match.
  CypherListener.prototype.enterC_match = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_match.
  CypherListener.prototype.exitC_match = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#unwind.
  CypherListener.prototype.enterUnwind = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#unwind.
  CypherListener.prototype.exitUnwind = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_merge.
  CypherListener.prototype.enterC_merge = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_merge.
  CypherListener.prototype.exitC_merge = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_mergeAction.
  CypherListener.prototype.enterC_mergeAction = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_mergeAction.
  CypherListener.prototype.exitC_mergeAction = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#create.
  CypherListener.prototype.enterCreate = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#create.
  CypherListener.prototype.exitCreate = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_set.
  CypherListener.prototype.enterC_set = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_set.
  CypherListener.prototype.exitC_set = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#setItem.
  CypherListener.prototype.enterSetItem = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#setItem.
  CypherListener.prototype.exitSetItem = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_delete.
  CypherListener.prototype.enterC_delete = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_delete.
  CypherListener.prototype.exitC_delete = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#remove.
  CypherListener.prototype.enterRemove = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#remove.
  CypherListener.prototype.exitRemove = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#removeItem.
  CypherListener.prototype.enterRemoveItem = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#removeItem.
  CypherListener.prototype.exitRemoveItem = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_with.
  CypherListener.prototype.enterC_with = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_with.
  CypherListener.prototype.exitC_with = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_return.
  CypherListener.prototype.enterC_return = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_return.
  CypherListener.prototype.exitC_return = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_returnBody.
  CypherListener.prototype.enterC_returnBody = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_returnBody.
  CypherListener.prototype.exitC_returnBody = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_returnItems.
  CypherListener.prototype.enterC_returnItems = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_returnItems.
  CypherListener.prototype.exitC_returnItems = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#c_returnItem.
  CypherListener.prototype.enterC_returnItem = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#c_returnItem.
  CypherListener.prototype.exitC_returnItem = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#order.
  CypherListener.prototype.enterOrder = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#order.
  CypherListener.prototype.exitOrder = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#skip.
  CypherListener.prototype.enterSkip = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#skip.
  CypherListener.prototype.exitSkip = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#limit.
  CypherListener.prototype.enterLimit = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#limit.
  CypherListener.prototype.exitLimit = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#sortItem.
  CypherListener.prototype.enterSortItem = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#sortItem.
  CypherListener.prototype.exitSortItem = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#where.
  CypherListener.prototype.enterWhere = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#where.
  CypherListener.prototype.exitWhere = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#pattern.
  CypherListener.prototype.enterPattern = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#pattern.
  CypherListener.prototype.exitPattern = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#patternPart.
  CypherListener.prototype.enterPatternPart = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#patternPart.
  CypherListener.prototype.exitPatternPart = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#anonymousPatternPart.
  CypherListener.prototype.enterAnonymousPatternPart = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#anonymousPatternPart.
  CypherListener.prototype.exitAnonymousPatternPart = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#patternElement.
  CypherListener.prototype.enterPatternElement = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#patternElement.
  CypherListener.prototype.exitPatternElement = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#nodePattern.
  CypherListener.prototype.enterNodePattern = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#nodePattern.
  CypherListener.prototype.exitNodePattern = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#patternElementChain.
  CypherListener.prototype.enterPatternElementChain = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#patternElementChain.
  CypherListener.prototype.exitPatternElementChain = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#relationshipPattern.
  CypherListener.prototype.enterRelationshipPattern = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#relationshipPattern.
  CypherListener.prototype.exitRelationshipPattern = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#relationshipDetail.
  CypherListener.prototype.enterRelationshipDetail = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#relationshipDetail.
  CypherListener.prototype.exitRelationshipDetail = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#properties.
  CypherListener.prototype.enterProperties = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#properties.
  CypherListener.prototype.exitProperties = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#relationshipTypes.
  CypherListener.prototype.enterRelationshipTypes = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#relationshipTypes.
  CypherListener.prototype.exitRelationshipTypes = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#nodeLabels.
  CypherListener.prototype.enterNodeLabels = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#nodeLabels.
  CypherListener.prototype.exitNodeLabels = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#nodeLabel.
  CypherListener.prototype.enterNodeLabel = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#nodeLabel.
  CypherListener.prototype.exitNodeLabel = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#rangeLiteral.
  CypherListener.prototype.enterRangeLiteral = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#rangeLiteral.
  CypherListener.prototype.exitRangeLiteral = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#labelName.
  CypherListener.prototype.enterLabelName = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#labelName.
  CypherListener.prototype.exitLabelName = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#relTypeName.
  CypherListener.prototype.enterRelTypeName = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#relTypeName.
  CypherListener.prototype.exitRelTypeName = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression.
  CypherListener.prototype.enterExpression = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression.
  CypherListener.prototype.exitExpression = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression12.
  CypherListener.prototype.enterExpression12 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression12.
  CypherListener.prototype.exitExpression12 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression11.
  CypherListener.prototype.enterExpression11 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression11.
  CypherListener.prototype.exitExpression11 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression10.
  CypherListener.prototype.enterExpression10 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression10.
  CypherListener.prototype.exitExpression10 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression9.
  CypherListener.prototype.enterExpression9 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression9.
  CypherListener.prototype.exitExpression9 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression8.
  CypherListener.prototype.enterExpression8 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression8.
  CypherListener.prototype.exitExpression8 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression7.
  CypherListener.prototype.enterExpression7 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression7.
  CypherListener.prototype.exitExpression7 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression6.
  CypherListener.prototype.enterExpression6 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression6.
  CypherListener.prototype.exitExpression6 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression5.
  CypherListener.prototype.enterExpression5 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression5.
  CypherListener.prototype.exitExpression5 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression4.
  CypherListener.prototype.enterExpression4 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression4.
  CypherListener.prototype.exitExpression4 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression3.
  CypherListener.prototype.enterExpression3 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression3.
  CypherListener.prototype.exitExpression3 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#expression2.
  CypherListener.prototype.enterExpression2 = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#expression2.
  CypherListener.prototype.exitExpression2 = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#atom.
  CypherListener.prototype.enterAtom = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#atom.
  CypherListener.prototype.exitAtom = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#partialComparisonExpression.
  CypherListener.prototype.enterPartialComparisonExpression = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#partialComparisonExpression.
  CypherListener.prototype.exitPartialComparisonExpression = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#parenthesizedExpression.
  CypherListener.prototype.enterParenthesizedExpression = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#parenthesizedExpression.
  CypherListener.prototype.exitParenthesizedExpression = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#relationshipsPattern.
  CypherListener.prototype.enterRelationshipsPattern = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#relationshipsPattern.
  CypherListener.prototype.exitRelationshipsPattern = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#filterExpression.
  CypherListener.prototype.enterFilterExpression = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#filterExpression.
  CypherListener.prototype.exitFilterExpression = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#idInColl.
  CypherListener.prototype.enterIdInColl = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#idInColl.
  CypherListener.prototype.exitIdInColl = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#functionInvocation.
  CypherListener.prototype.enterFunctionInvocation = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#functionInvocation.
  CypherListener.prototype.exitFunctionInvocation = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#functionName.
  CypherListener.prototype.enterFunctionName = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#functionName.
  CypherListener.prototype.exitFunctionName = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#listComprehension.
  CypherListener.prototype.enterListComprehension = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#listComprehension.
  CypherListener.prototype.exitListComprehension = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#propertyLookup.
  CypherListener.prototype.enterPropertyLookup = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#propertyLookup.
  CypherListener.prototype.exitPropertyLookup = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#variable.
  CypherListener.prototype.enterVariable = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#variable.
  CypherListener.prototype.exitVariable = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#numberLiteral.
  CypherListener.prototype.enterNumberLiteral = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#numberLiteral.
  CypherListener.prototype.exitNumberLiteral = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#mapLiteral.
  CypherListener.prototype.enterMapLiteral = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#mapLiteral.
  CypherListener.prototype.exitMapLiteral = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#parameter.
  CypherListener.prototype.enterParameter = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#parameter.
  CypherListener.prototype.exitParameter = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#propertyExpression.
  CypherListener.prototype.enterPropertyExpression = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#propertyExpression.
  CypherListener.prototype.exitPropertyExpression = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#propertyKeyName.
  CypherListener.prototype.enterPropertyKeyName = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#propertyKeyName.
  CypherListener.prototype.exitPropertyKeyName = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#signedIntegerLiteral.
  CypherListener.prototype.enterSignedIntegerLiteral = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#signedIntegerLiteral.
  CypherListener.prototype.exitSignedIntegerLiteral = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#unsignedIntegerLiteral.
  CypherListener.prototype.enterUnsignedIntegerLiteral = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#unsignedIntegerLiteral.
  CypherListener.prototype.exitUnsignedIntegerLiteral = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#hexInteger.
  CypherListener.prototype.enterHexInteger = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#hexInteger.
  CypherListener.prototype.exitHexInteger = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#decimalInteger.
  CypherListener.prototype.enterDecimalInteger = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#decimalInteger.
  CypherListener.prototype.exitDecimalInteger = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#octalInteger.
  CypherListener.prototype.enterOctalInteger = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#octalInteger.
  CypherListener.prototype.exitOctalInteger = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#unsignedHexInteger.
  CypherListener.prototype.enterUnsignedHexInteger = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#unsignedHexInteger.
  CypherListener.prototype.exitUnsignedHexInteger = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#unsignedDecimalInteger.
  CypherListener.prototype.enterUnsignedDecimalInteger = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#unsignedDecimalInteger.
  CypherListener.prototype.exitUnsignedDecimalInteger = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#unsignedOctalInteger.
  CypherListener.prototype.enterUnsignedOctalInteger = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#unsignedOctalInteger.
  CypherListener.prototype.exitUnsignedOctalInteger = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#hexString.
  CypherListener.prototype.enterHexString = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#hexString.
  CypherListener.prototype.exitHexString = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#digitString.
  CypherListener.prototype.enterDigitString = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#digitString.
  CypherListener.prototype.exitDigitString = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#octalString.
  CypherListener.prototype.enterOctalString = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#octalString.
  CypherListener.prototype.exitOctalString = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#digit.
  CypherListener.prototype.enterDigit = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#digit.
  CypherListener.prototype.exitDigit = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#octDigit.
  CypherListener.prototype.enterOctDigit = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#octDigit.
  CypherListener.prototype.exitOctDigit = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#doubleLiteral.
  CypherListener.prototype.enterDoubleLiteral = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#doubleLiteral.
  CypherListener.prototype.exitDoubleLiteral = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#exponentDecimalReal.
  CypherListener.prototype.enterExponentDecimalReal = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#exponentDecimalReal.
  CypherListener.prototype.exitExponentDecimalReal = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#regularDecimalReal.
  CypherListener.prototype.enterRegularDecimalReal = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#regularDecimalReal.
  CypherListener.prototype.exitRegularDecimalReal = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#symbolicName.
  CypherListener.prototype.enterSymbolicName = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#symbolicName.
  CypherListener.prototype.exitSymbolicName = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#ws.
  CypherListener.prototype.enterWs = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#ws.
  CypherListener.prototype.exitWs = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#sp.
  CypherListener.prototype.enterSp = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#sp.
  CypherListener.prototype.exitSp = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#leftArrowHead.
  CypherListener.prototype.enterLeftArrowHead = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#leftArrowHead.
  CypherListener.prototype.exitLeftArrowHead = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#rightArrowHead.
  CypherListener.prototype.enterRightArrowHead = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#rightArrowHead.
  CypherListener.prototype.exitRightArrowHead = function (ctx) {
  };


// Enter a parse tree produced by CypherParser#dash.
  CypherListener.prototype.enterDash = function (ctx) {
  };

// Exit a parse tree produced by CypherParser#dash.
  CypherListener.prototype.exitDash = function (ctx) {
  };


  return CypherListener;
}
},{}],3:[function(require,module,exports){
// Generated from browser-cypher/Cypher.g4 by ANTLR 4.5.3
// jshint ignore: start

module.exports = function ( antlr4, CypherListener) {

  var grammarFileName = "Cypher.g4";

  var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003s\u0480\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u00c0\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u00cc\n\u0005\f\u0005\u000e\u0005\u00cf\u000b\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u00d5\n\u0006",
    "\f\u0006\u000e\u0006\u00d8\u000b\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00e1",
    "\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u00ec\n\b\u0003\t\u0003\t\u0005\t\u00f0\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00f8\n\t\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u0108\n\u000b\f\u000b\u000e\u000b\u010b\u000b\u000b\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u0119\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0123\n\u000e\f\u000e",
    "\u000e\u000e\u0126\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u0137\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u013d\n\u0010\f\u0010\u000e\u0010\u0140\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010\u0148\n\u0010\f\u0010\u000e\u0010\u014b\u000b\u0010\u0005\u0010",
    "\u014d\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0157\n\u0011",
    "\f\u0011\u000e\u0011\u015a\u000b\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u0160\n\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0167\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u016d\n\u0013",
    "\u0005\u0013\u016f\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u017b\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0181\n\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u0186\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u018b\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u0193\n\u0016\f\u0016\u000e",
    "\u0016\u0196\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0007\u0016\u019e\n\u0016\f\u0016\u000e\u0016",
    "\u01a1\u000b\u0016\u0005\u0016\u01a3\n\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u01ac\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u01b7",
    "\n\u0018\f\u0018\u000e\u0018\u01ba\u000b\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u01c9\n\u001b\u0005\u001b\u01cb\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01d4",
    "\n\u001d\f\u001d\u000e\u001d\u01d7\u000b\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u01e0\n\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0007",
    " \u01e8\n \f \u000e \u01eb\u000b \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u01f1\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u01f8\n!\u0003",
    "!\u0003!\u0003!\u0005!\u01fd\n!\u0003!\u0003!\u0003!\u0005!\u0202\n",
    "!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u020f\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0005#\u021b\n#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u0223\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u022d\n#\u0003#\u0003#\u0003#\u0005#\u0232\n",
    "#\u0003$\u0003$\u0005$\u0236\n$\u0003$\u0005$\u0239\n$\u0003$\u0005",
    "$\u023c\n$\u0003$\u0003$\u0005$\u0240\n$\u0005$\u0242\n$\u0003$\u0005",
    "$\u0245\n$\u0003$\u0003$\u0003%\u0003%\u0005%\u024b\n%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0005&\u0252\n&\u0003&\u0003&\u0003&\u0007&\u0257",
    "\n&\f&\u000e&\u025a\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0260",
    "\n\'\f\'\u000e\'\u0263\u000b\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003",
    ")\u0005)\u026b\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u0271\n)\u0003",
    "*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0007-\u027f\n-\f-\u000e-\u0282\u000b-\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0007.\u028a\n.\f.\u000e.\u028d\u000b.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u0295\n/\f/\u000e/\u0298",
    "\u000b/\u00030\u00030\u00030\u00030\u00070\u029e\n0\f0\u000e0\u02a1",
    "\u000b0\u00030\u00030\u00031\u00031\u00031\u00031\u00071\u02a9\n1\f",
    "1\u000e1\u02ac\u000b1\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00072\u02b9\n2\f2\u000e2\u02bc\u000b",
    "2\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00073\u02ce\n3\f3\u000e",
    "3\u02d1\u000b3\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u02d9",
    "\n4\f4\u000e4\u02dc\u000b4\u00035\u00035\u00075\u02e0\n5\f5\u000e5\u02e3",
    "\u000b5\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u02f0\n6\u00036\u00036\u00056\u02f4\n6\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00056\u030b\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00076\u031c\n6\f",
    "6\u000e6\u031f\u000b6\u00037\u00037\u00037\u00077\u0324\n7\f7\u000e",
    "7\u0327\u000b7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00078\u033e\n8\f8\u000e8\u0341\u000b8\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u0357\n8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u037f\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0005",
    "9\u039d\n9\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0006",
    ";\u03a7\n;\r;\u000e;\u03a8\u0003<\u0003<\u0003<\u0003<\u0005<\u03af",
    "\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u03bc\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007>\u03c3",
    "\n>\f>\u000e>\u03c6\u000b>\u0005>\u03c8\n>\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u03d5\n@\u0003",
    "@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u03e0",
    "\nA\u0003B\u0003B\u0003C\u0003C\u0005C\u03e6\nC\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0007D\u03f9\nD\fD\u000eD\u03fc\u000b",
    "D\u0005D\u03fe\nD\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0005E\u0406",
    "\nE\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0006F\u040f\n",
    "F\rF\u000eF\u0410\u0003G\u0003G\u0003H\u0003H\u0003H\u0005H\u0418\n",
    "H\u0003I\u0003I\u0003J\u0005J\u041d\nJ\u0003J\u0003J\u0003K\u0005K\u0422",
    "\nK\u0003K\u0003K\u0003L\u0005L\u0427\nL\u0003L\u0003L\u0003M\u0003",
    "M\u0003M\u0003N\u0003N\u0005N\u0430\nN\u0003N\u0005N\u0433\nN\u0003",
    "O\u0003O\u0003O\u0003P\u0006P\u0439\nP\rP\u000eP\u043a\u0003Q\u0006",
    "Q\u043e\nQ\rQ\u000eQ\u043f\u0003R\u0006R\u0443\nR\rR\u000eR\u0444\u0003",
    "S\u0003S\u0003T\u0003T\u0003U\u0003U\u0005U\u044d\nU\u0003V\u0005V\u0450",
    "\nV\u0003V\u0003V\u0006V\u0454\nV\rV\u000eV\u0455\u0003V\u0003V\u0005",
    "V\u045a\nV\u0003V\u0005V\u045d\nV\u0003V\u0003V\u0003W\u0005W\u0462",
    "\nW\u0003W\u0007W\u0465\nW\fW\u000eW\u0468\u000bW\u0003W\u0003W\u0003",
    "W\u0003X\u0003X\u0003Y\u0007Y\u0470\nY\fY\u000eY\u0473\u000bY\u0003",
    "Z\u0006Z\u0476\nZ\rZ\u000eZ\u0477\u0003[\u0003[\u0003\\\u0003\\\u0003",
    "]\u0003]\u0003]\u0002\u0002^\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u0002\u000e\u0003",
    "\u0002VW\u0003\u0002XY\u0003\u0002\u0010\u0011\u0004\u0002\u000b\u000b",
    "\u001d\u001d\u0003\u0002 (\u0003\u0002 )\u0004\u0002 &))\u0003\u0002",
    "*+\u0004\u0002Bnqq\u0004\u0002\u0018\u0018,/\u0004\u0002\u0019\u0019",
    "03\u0004\u0002\u0011\u00114>\u04b8\u0002\u00ba\u0003\u0002\u0002\u0002",
    "\u0004\u00c3\u0003\u0002\u0002\u0002\u0006\u00c5\u0003\u0002\u0002\u0002",
    "\b\u00c7\u0003\u0002\u0002\u0002\n\u00d0\u0003\u0002\u0002\u0002\f\u00e0",
    "\u0003\u0002\u0002\u0002\u000e\u00eb\u0003\u0002\u0002\u0002\u0010\u00ef",
    "\u0003\u0002\u0002\u0002\u0012\u00f9\u0003\u0002\u0002\u0002\u0014\u0101",
    "\u0003\u0002\u0002\u0002\u0016\u0118\u0003\u0002\u0002\u0002\u0018\u011a",
    "\u0003\u0002\u0002\u0002\u001a\u011e\u0003\u0002\u0002\u0002\u001c\u0136",
    "\u0003\u0002\u0002\u0002\u001e\u014c\u0003\u0002\u0002\u0002 \u014e",
    "\u0003\u0002\u0002\u0002\"\u015f\u0003\u0002\u0002\u0002$\u016e\u0003",
    "\u0002\u0002\u0002&\u017a\u0003\u0002\u0002\u0002(\u017c\u0003\u0002",
    "\u0002\u0002*\u01a2\u0003\u0002\u0002\u0002,\u01ab\u0003\u0002\u0002",
    "\u0002.\u01ad\u0003\u0002\u0002\u00020\u01bb\u0003\u0002\u0002\u0002",
    "2\u01bf\u0003\u0002\u0002\u00024\u01ca\u0003\u0002\u0002\u00026\u01cc",
    "\u0003\u0002\u0002\u00028\u01d0\u0003\u0002\u0002\u0002:\u01df\u0003",
    "\u0002\u0002\u0002<\u01e1\u0003\u0002\u0002\u0002>\u01f0\u0003\u0002",
    "\u0002\u0002@\u01f2\u0003\u0002\u0002\u0002B\u0205\u0003\u0002\u0002",
    "\u0002D\u0231\u0003\u0002\u0002\u0002F\u0233\u0003\u0002\u0002\u0002",
    "H\u024a\u0003\u0002\u0002\u0002J\u024c\u0003\u0002\u0002\u0002L\u025b",
    "\u0003\u0002\u0002\u0002N\u0264\u0003\u0002\u0002\u0002P\u026a\u0003",
    "\u0002\u0002\u0002R\u0272\u0003\u0002\u0002\u0002T\u0274\u0003\u0002",
    "\u0002\u0002V\u0276\u0003\u0002\u0002\u0002X\u0278\u0003\u0002\u0002",
    "\u0002Z\u0283\u0003\u0002\u0002\u0002\\\u028e\u0003\u0002\u0002\u0002",
    "^\u029f\u0003\u0002\u0002\u0002`\u02a4\u0003\u0002\u0002\u0002b\u02ad",
    "\u0003\u0002\u0002\u0002d\u02bd\u0003\u0002\u0002\u0002f\u02d2\u0003",
    "\u0002\u0002\u0002h\u02e1\u0003\u0002\u0002\u0002j\u02e6\u0003\u0002",
    "\u0002\u0002l\u0320\u0003\u0002\u0002\u0002n\u037e\u0003\u0002\u0002",
    "\u0002p\u039c\u0003\u0002\u0002\u0002r\u039e\u0003\u0002\u0002\u0002",
    "t\u03a2\u0003\u0002\u0002\u0002v\u03aa\u0003\u0002\u0002\u0002x\u03b0",
    "\u0003\u0002\u0002\u0002z\u03b6\u0003\u0002\u0002\u0002|\u03cc\u0003",
    "\u0002\u0002\u0002~\u03ce\u0003\u0002\u0002\u0002\u0080\u03d8\u0003",
    "\u0002\u0002\u0002\u0082\u03e1\u0003\u0002\u0002\u0002\u0084\u03e5\u0003",
    "\u0002\u0002\u0002\u0086\u03e7\u0003\u0002\u0002\u0002\u0088\u0401\u0003",
    "\u0002\u0002\u0002\u008a\u040a\u0003\u0002\u0002\u0002\u008c\u0412\u0003",
    "\u0002\u0002\u0002\u008e\u0417\u0003\u0002\u0002\u0002\u0090\u0419\u0003",
    "\u0002\u0002\u0002\u0092\u041c\u0003\u0002\u0002\u0002\u0094\u0421\u0003",
    "\u0002\u0002\u0002\u0096\u0426\u0003\u0002\u0002\u0002\u0098\u042a\u0003",
    "\u0002\u0002\u0002\u009a\u0432\u0003\u0002\u0002\u0002\u009c\u0434\u0003",
    "\u0002\u0002\u0002\u009e\u0438\u0003\u0002\u0002\u0002\u00a0\u043d\u0003",
    "\u0002\u0002\u0002\u00a2\u0442\u0003\u0002\u0002\u0002\u00a4\u0446\u0003",
    "\u0002\u0002\u0002\u00a6\u0448\u0003\u0002\u0002\u0002\u00a8\u044c\u0003",
    "\u0002\u0002\u0002\u00aa\u044f\u0003\u0002\u0002\u0002\u00ac\u0461\u0003",
    "\u0002\u0002\u0002\u00ae\u046c\u0003\u0002\u0002\u0002\u00b0\u0471\u0003",
    "\u0002\u0002\u0002\u00b2\u0475\u0003\u0002\u0002\u0002\u00b4\u0479\u0003",
    "\u0002\u0002\u0002\u00b6\u047b\u0003\u0002\u0002\u0002\u00b8\u047d\u0003",
    "\u0002\u0002\u0002\u00ba\u00bb\u0005\u00b0Y\u0002\u00bb\u00bf\u0005",
    "\u0004\u0003\u0002\u00bc\u00bd\u0005\u00b0Y\u0002\u00bd\u00be\u0007",
    "\u0003\u0002\u0002\u00be\u00c0\u0003\u0002\u0002\u0002\u00bf\u00bc\u0003",
    "\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003",
    "\u0002\u0002\u0002\u00c1\u00c2\u0005\u00b0Y\u0002\u00c2\u0003\u0003",
    "\u0002\u0002\u0002\u00c3\u00c4\u0005\u0006\u0004\u0002\u00c4\u0005\u0003",
    "\u0002\u0002\u0002\u00c5\u00c6\u0005\b\u0005\u0002\u00c6\u0007\u0003",
    "\u0002\u0002\u0002\u00c7\u00cd\u0005\n\u0006\u0002\u00c8\u00c9\u0005",
    "\u00b0Y\u0002\u00c9\u00ca\u0005\f\u0007\u0002\u00ca\u00cc\u0003\u0002",
    "\u0002\u0002\u00cb\u00c8\u0003\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002",
    "\u0002\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002",
    "\u0002\u0002\u00ce\t\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002",
    "\u0002\u0002\u00d0\u00d6\u0005\u000e\b\u0002\u00d1\u00d2\u0005\u00b0",
    "Y\u0002\u00d2\u00d3\u0005\u000e\b\u0002\u00d3\u00d5\u0003\u0002\u0002",
    "\u0002\u00d4\u00d1\u0003\u0002\u0002\u0002\u00d5\u00d8\u0003\u0002\u0002",
    "\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002",
    "\u0002\u00d7\u000b\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002",
    "\u0002\u00d9\u00da\u0007B\u0002\u0002\u00da\u00db\u0005\u00b2Z\u0002",
    "\u00db\u00dc\u0007C\u0002\u0002\u00dc\u00dd\u0005\n\u0006\u0002\u00dd",
    "\u00e1\u0003\u0002\u0002\u0002\u00de\u00df\u0007B\u0002\u0002\u00df",
    "\u00e1\u0005\n\u0006\u0002\u00e0\u00d9\u0003\u0002\u0002\u0002\u00e0",
    "\u00de\u0003\u0002\u0002\u0002\u00e1\r\u0003\u0002\u0002\u0002\u00e2",
    "\u00ec\u0005\u0010\t\u0002\u00e3\u00ec\u0005\u0012\n\u0002\u00e4\u00ec",
    "\u0005\u0014\u000b\u0002\u00e5\u00ec\u0005\u0018\r\u0002\u00e6\u00ec",
    "\u0005\u001a\u000e\u0002\u00e7\u00ec\u0005\u001e\u0010\u0002\u00e8\u00ec",
    "\u0005 \u0011\u0002\u00e9\u00ec\u0005$\u0013\u0002\u00ea\u00ec\u0005",
    "&\u0014\u0002\u00eb\u00e2\u0003\u0002\u0002\u0002\u00eb\u00e3\u0003",
    "\u0002\u0002\u0002\u00eb\u00e4\u0003\u0002\u0002\u0002\u00eb\u00e5\u0003",
    "\u0002\u0002\u0002\u00eb\u00e6\u0003\u0002\u0002\u0002\u00eb\u00e7\u0003",
    "\u0002\u0002\u0002\u00eb\u00e8\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003",
    "\u0002\u0002\u0002\u00eb\u00ea\u0003\u0002\u0002\u0002\u00ec\u000f\u0003",
    "\u0002\u0002\u0002\u00ed\u00ee\u0007D\u0002\u0002\u00ee\u00f0\u0005",
    "\u00b2Z\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003",
    "\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007",
    "E\u0002\u0002\u00f2\u00f3\u0005\u00b0Y\u0002\u00f3\u00f7\u00058\u001d",
    "\u0002\u00f4\u00f5\u0005\u00b0Y\u0002\u00f5\u00f6\u00056\u001c\u0002",
    "\u00f6\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f4\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u0011\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u0007F\u0002\u0002\u00fa\u00fb\u0005\u00b0Y\u0002\u00fb",
    "\u00fc\u0005V,\u0002\u00fc\u00fd\u0005\u00b2Z\u0002\u00fd\u00fe\u0007",
    "G\u0002\u0002\u00fe\u00ff\u0005\u00b2Z\u0002\u00ff\u0100\u0005\u0082",
    "B\u0002\u0100\u0013\u0003\u0002\u0002\u0002\u0101\u0102\u0007H\u0002",
    "\u0002\u0102\u0103\u0005\u00b0Y\u0002\u0103\u0109\u0005:\u001e\u0002",
    "\u0104\u0105\u0005\u00b2Z\u0002\u0105\u0106\u0005\u0016\f\u0002\u0106",
    "\u0108\u0003\u0002\u0002\u0002\u0107\u0104\u0003\u0002\u0002\u0002\u0108",
    "\u010b\u0003\u0002\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109",
    "\u010a\u0003\u0002\u0002\u0002\u010a\u0015\u0003\u0002\u0002\u0002\u010b",
    "\u0109\u0003\u0002\u0002\u0002\u010c\u010d\u0007I\u0002\u0002\u010d",
    "\u010e\u0005\u00b2Z\u0002\u010e\u010f\u0007E\u0002\u0002\u010f\u0110",
    "\u0005\u00b2Z\u0002\u0110\u0111\u0005\u001a\u000e\u0002\u0111\u0119",
    "\u0003\u0002\u0002\u0002\u0112\u0113\u0007I\u0002\u0002\u0113\u0114",
    "\u0005\u00b2Z\u0002\u0114\u0115\u0007J\u0002\u0002\u0115\u0116\u0005",
    "\u00b2Z\u0002\u0116\u0117\u0005\u001a\u000e\u0002\u0117\u0119\u0003",
    "\u0002\u0002\u0002\u0118\u010c\u0003\u0002\u0002\u0002\u0118\u0112\u0003",
    "\u0002\u0002\u0002\u0119\u0017\u0003\u0002\u0002\u0002\u011a\u011b\u0007",
    "J\u0002\u0002\u011b\u011c\u0005\u00b0Y\u0002\u011c\u011d\u00058\u001d",
    "\u0002\u011d\u0019\u0003\u0002\u0002\u0002\u011e\u011f\u0007K\u0002",
    "\u0002\u011f\u0124\u0005\u001c\u000f\u0002\u0120\u0121\u0007\u0004\u0002",
    "\u0002\u0121\u0123\u0005\u001c\u000f\u0002\u0122\u0120\u0003\u0002\u0002",
    "\u0002\u0123\u0126\u0003\u0002\u0002\u0002\u0124\u0122\u0003\u0002\u0002",
    "\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125\u001b\u0003\u0002\u0002",
    "\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0127\u0128\u0005\u008aF",
    "\u0002\u0128\u0129\u0007\u0005\u0002\u0002\u0129\u012a\u0005V,\u0002",
    "\u012a\u0137\u0003\u0002\u0002\u0002\u012b\u012c\u0005\u0082B\u0002",
    "\u012c\u012d\u0007\u0005\u0002\u0002\u012d\u012e\u0005V,\u0002\u012e",
    "\u0137\u0003\u0002\u0002\u0002\u012f\u0130\u0005\u0082B\u0002\u0130",
    "\u0131\u0007\u0006\u0002\u0002\u0131\u0132\u0005V,\u0002\u0132\u0137",
    "\u0003\u0002\u0002\u0002\u0133\u0134\u0005\u0082B\u0002\u0134\u0135",
    "\u0005L\'\u0002\u0135\u0137\u0003\u0002\u0002\u0002\u0136\u0127\u0003",
    "\u0002\u0002\u0002\u0136\u012b\u0003\u0002\u0002\u0002\u0136\u012f\u0003",
    "\u0002\u0002\u0002\u0136\u0133\u0003\u0002\u0002\u0002\u0137\u001d\u0003",
    "\u0002\u0002\u0002\u0138\u0139\u0007L\u0002\u0002\u0139\u013e\u0005",
    "V,\u0002\u013a\u013b\u0007\u0004\u0002\u0002\u013b\u013d\u0005V,\u0002",
    "\u013c\u013a\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002",
    "\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u014d\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0007M\u0002\u0002\u0142\u0143\u0005\u00b2Z\u0002\u0143",
    "\u0144\u0007L\u0002\u0002\u0144\u0149\u0005V,\u0002\u0145\u0146\u0007",
    "\u0004\u0002\u0002\u0146\u0148\u0005V,\u0002\u0147\u0145\u0003\u0002",
    "\u0002\u0002\u0148\u014b\u0003\u0002\u0002\u0002\u0149\u0147\u0003\u0002",
    "\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014d\u0003\u0002",
    "\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014c\u0138\u0003\u0002",
    "\u0002\u0002\u014c\u0141\u0003\u0002\u0002\u0002\u014d\u001f\u0003\u0002",
    "\u0002\u0002\u014e\u014f\u0007N\u0002\u0002\u014f\u0150\u0005\u00b2",
    "Z\u0002\u0150\u0158\u0005\"\u0012\u0002\u0151\u0152\u0005\u00b0Y\u0002",
    "\u0152\u0153\u0007\u0004\u0002\u0002\u0153\u0154\u0005\u00b0Y\u0002",
    "\u0154\u0155\u0005\"\u0012\u0002\u0155\u0157\u0003\u0002\u0002\u0002",
    "\u0156\u0151\u0003\u0002\u0002\u0002\u0157\u015a\u0003\u0002\u0002\u0002",
    "\u0158\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002",
    "\u0159!\u0003\u0002\u0002\u0002\u015a\u0158\u0003\u0002\u0002\u0002",
    "\u015b\u015c\u0005\u0082B\u0002\u015c\u015d\u0005L\'\u0002\u015d\u0160",
    "\u0003\u0002\u0002\u0002\u015e\u0160\u0005\u008aF\u0002\u015f\u015b",
    "\u0003\u0002\u0002\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u0160#",
    "\u0003\u0002\u0002\u0002\u0161\u0162\u0007O\u0002\u0002\u0162\u0163",
    "\u0007P\u0002\u0002\u0163\u0164\u0005\u00b2Z\u0002\u0164\u0166\u0005",
    "(\u0015\u0002\u0165\u0167\u00056\u001c\u0002\u0166\u0165\u0003\u0002",
    "\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u016f\u0003\u0002",
    "\u0002\u0002\u0168\u0169\u0007O\u0002\u0002\u0169\u016a\u0005\u00b2",
    "Z\u0002\u016a\u016c\u0005(\u0015\u0002\u016b\u016d\u00056\u001c\u0002",
    "\u016c\u016b\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002",
    "\u016d\u016f\u0003\u0002\u0002\u0002\u016e\u0161\u0003\u0002\u0002\u0002",
    "\u016e\u0168\u0003\u0002\u0002\u0002\u016f%\u0003\u0002\u0002\u0002",
    "\u0170\u0171\u0007Q\u0002\u0002\u0171\u0172\u0005\u00b2Z\u0002\u0172",
    "\u0173\u0007P\u0002\u0002\u0173\u0174\u0005\u00b2Z\u0002\u0174\u0175",
    "\u0005(\u0015\u0002\u0175\u017b\u0003\u0002\u0002\u0002\u0176\u0177",
    "\u0007Q\u0002\u0002\u0177\u0178\u0005\u00b2Z\u0002\u0178\u0179\u0005",
    "(\u0015\u0002\u0179\u017b\u0003\u0002\u0002\u0002\u017a\u0170\u0003",
    "\u0002\u0002\u0002\u017a\u0176\u0003\u0002\u0002\u0002\u017b\'\u0003",
    "\u0002\u0002\u0002\u017c\u0180\u0005*\u0016\u0002\u017d\u017e\u0005",
    "\u00b2Z\u0002\u017e\u017f\u0005.\u0018\u0002\u017f\u0181\u0003\u0002",
    "\u0002\u0002\u0180\u017d\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002",
    "\u0002\u0002\u0181\u0185\u0003\u0002\u0002\u0002\u0182\u0183\u0005\u00b2",
    "Z\u0002\u0183\u0184\u00050\u0019\u0002\u0184\u0186\u0003\u0002\u0002",
    "\u0002\u0185\u0182\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002",
    "\u0002\u0186\u018a\u0003\u0002\u0002\u0002\u0187\u0188\u0005\u00b2Z",
    "\u0002\u0188\u0189\u00052\u001a\u0002\u0189\u018b\u0003\u0002\u0002",
    "\u0002\u018a\u0187\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002",
    "\u0002\u018b)\u0003\u0002\u0002\u0002\u018c\u0194\u0007\u0007\u0002",
    "\u0002\u018d\u018e\u0005\u00b0Y\u0002\u018e\u018f\u0007\u0004\u0002",
    "\u0002\u018f\u0190\u0005\u00b0Y\u0002\u0190\u0191\u0005,\u0017\u0002",
    "\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u018d\u0003\u0002\u0002\u0002",
    "\u0193\u0196\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002\u0002\u0002",
    "\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u01a3\u0003\u0002\u0002\u0002",
    "\u0196\u0194\u0003\u0002\u0002\u0002\u0197\u019f\u0005,\u0017\u0002",
    "\u0198\u0199\u0005\u00b0Y\u0002\u0199\u019a\u0007\u0004\u0002\u0002",
    "\u019a\u019b\u0005\u00b0Y\u0002\u019b\u019c\u0005,\u0017\u0002\u019c",
    "\u019e\u0003\u0002\u0002\u0002\u019d\u0198\u0003\u0002\u0002\u0002\u019e",
    "\u01a1\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a3\u0003\u0002\u0002\u0002\u01a1",
    "\u019f\u0003\u0002\u0002\u0002\u01a2\u018c\u0003\u0002\u0002\u0002\u01a2",
    "\u0197\u0003\u0002\u0002\u0002\u01a3+\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0005V,\u0002\u01a5\u01a6\u0005\u00b2Z\u0002\u01a6\u01a7\u0007",
    "G\u0002\u0002\u01a7\u01a8\u0005\u00b2Z\u0002\u01a8\u01a9\u0005\u0082",
    "B\u0002\u01a9\u01ac\u0003\u0002\u0002\u0002\u01aa\u01ac\u0005V,\u0002",
    "\u01ab\u01a4\u0003\u0002\u0002\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002",
    "\u01ac-\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007R\u0002\u0002\u01ae",
    "\u01af\u0005\u00b2Z\u0002\u01af\u01b0\u0007S\u0002\u0002\u01b0\u01b1",
    "\u0005\u00b2Z\u0002\u01b1\u01b8\u00054\u001b\u0002\u01b2\u01b3\u0007",
    "\u0004\u0002\u0002\u01b3\u01b4\u0005\u00b0Y\u0002\u01b4\u01b5\u0005",
    "4\u001b\u0002\u01b5\u01b7\u0003\u0002\u0002\u0002\u01b6\u01b2\u0003",
    "\u0002\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003",
    "\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9/\u0003",
    "\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007",
    "T\u0002\u0002\u01bc\u01bd\u0005\u00b2Z\u0002\u01bd\u01be\u0005V,\u0002",
    "\u01be1\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007U\u0002\u0002\u01c0",
    "\u01c1\u0005\u00b2Z\u0002\u01c1\u01c2\u0005V,\u0002\u01c23\u0003\u0002",
    "\u0002\u0002\u01c3\u01c4\u0005V,\u0002\u01c4\u01c5\t\u0002\u0002\u0002",
    "\u01c5\u01cb\u0003\u0002\u0002\u0002\u01c6\u01c8\u0005V,\u0002\u01c7",
    "\u01c9\t\u0003\u0002\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c8",
    "\u01c9\u0003\u0002\u0002\u0002\u01c9\u01cb\u0003\u0002\u0002\u0002\u01ca",
    "\u01c3\u0003\u0002\u0002\u0002\u01ca\u01c6\u0003\u0002\u0002\u0002\u01cb",
    "5\u0003\u0002\u0002\u0002\u01cc\u01cd\u0007Z\u0002\u0002\u01cd\u01ce",
    "\u0005\u00b2Z\u0002\u01ce\u01cf\u0005V,\u0002\u01cf7\u0003\u0002\u0002",
    "\u0002\u01d0\u01d5\u0005:\u001e\u0002\u01d1\u01d2\u0007\u0004\u0002",
    "\u0002\u01d2\u01d4\u0005:\u001e\u0002\u01d3\u01d1\u0003\u0002\u0002",
    "\u0002\u01d4\u01d7\u0003\u0002\u0002\u0002\u01d5\u01d3\u0003\u0002\u0002",
    "\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d69\u0003\u0002\u0002",
    "\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d8\u01d9\u0005\u0082B",
    "\u0002\u01d9\u01da\u0005\u00b0Y\u0002\u01da\u01db\u0007\u0005\u0002",
    "\u0002\u01db\u01dc\u0005\u00b0Y\u0002\u01dc\u01dd\u0005<\u001f\u0002",
    "\u01dd\u01e0\u0003\u0002\u0002\u0002\u01de\u01e0\u0005<\u001f\u0002",
    "\u01df\u01d8\u0003\u0002\u0002\u0002\u01df\u01de\u0003\u0002\u0002\u0002",
    "\u01e0;\u0003\u0002\u0002\u0002\u01e1\u01e2\u0005> \u0002\u01e2=\u0003",
    "\u0002\u0002\u0002\u01e3\u01e9\u0005@!\u0002\u01e4\u01e5\u0005\u00b0",
    "Y\u0002\u01e5\u01e6\u0005B\"\u0002\u01e6\u01e8\u0003\u0002\u0002\u0002",
    "\u01e7\u01e4\u0003\u0002\u0002\u0002\u01e8\u01eb\u0003\u0002\u0002\u0002",
    "\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002",
    "\u01ea\u01f1\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0007\b\u0002\u0002\u01ed\u01ee\u0005> \u0002\u01ee\u01ef",
    "\u0007\t\u0002\u0002\u01ef\u01f1\u0003\u0002\u0002\u0002\u01f0\u01e3",
    "\u0003\u0002\u0002\u0002\u01f0\u01ec\u0003\u0002\u0002\u0002\u01f1?",
    "\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007\b\u0002\u0002\u01f3\u01f7",
    "\u0005\u00b0Y\u0002\u01f4\u01f5\u0005\u0082B\u0002\u01f5\u01f6\u0005",
    "\u00b0Y\u0002\u01f6\u01f8\u0003\u0002\u0002\u0002\u01f7\u01f4\u0003",
    "\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01fc\u0003",
    "\u0002\u0002\u0002\u01f9\u01fa\u0005L\'\u0002\u01fa\u01fb\u0005\u00b0",
    "Y\u0002\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc\u01f9\u0003\u0002",
    "\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u0201\u0003\u0002",
    "\u0002\u0002\u01fe\u01ff\u0005H%\u0002\u01ff\u0200\u0005\u00b0Y\u0002",
    "\u0200\u0202\u0003\u0002\u0002\u0002\u0201\u01fe\u0003\u0002\u0002\u0002",
    "\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002\u0002\u0002",
    "\u0203\u0204\u0007\t\u0002\u0002\u0204A\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0005D#\u0002\u0206\u0207\u0005\u00b0Y\u0002\u0207\u0208\u0005",
    "@!\u0002\u0208C\u0003\u0002\u0002\u0002\u0209\u020a\u0005\u00b4[\u0002",
    "\u020a\u020b\u0005\u00b0Y\u0002\u020b\u020c\u0005\u00b8]\u0002\u020c",
    "\u020e\u0005\u00b0Y\u0002\u020d\u020f\u0005F$\u0002\u020e\u020d\u0003",
    "\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u0003",
    "\u0002\u0002\u0002\u0210\u0211\u0005\u00b0Y\u0002\u0211\u0212\u0005",
    "\u00b8]\u0002\u0212\u0213\u0005\u00b0Y\u0002\u0213\u0214\u0005\u00b6",
    "\\\u0002\u0214\u0232\u0003\u0002\u0002\u0002\u0215\u0216\u0005\u00b4",
    "[\u0002\u0216\u0217\u0005\u00b0Y\u0002\u0217\u0218\u0005\u00b8]\u0002",
    "\u0218\u021a\u0005\u00b0Y\u0002\u0219\u021b\u0005F$\u0002\u021a\u0219",
    "\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b\u021c",
    "\u0003\u0002\u0002\u0002\u021c\u021d\u0005\u00b0Y\u0002\u021d\u021e",
    "\u0005\u00b8]\u0002\u021e\u0232\u0003\u0002\u0002\u0002\u021f\u0220",
    "\u0005\u00b8]\u0002\u0220\u0222\u0005\u00b0Y\u0002\u0221\u0223\u0005",
    "F$\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002",
    "\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0225\u0005\u00b0",
    "Y\u0002\u0225\u0226\u0005\u00b8]\u0002\u0226\u0227\u0005\u00b0Y\u0002",
    "\u0227\u0228\u0005\u00b6\\\u0002\u0228\u0232\u0003\u0002\u0002\u0002",
    "\u0229\u022a\u0005\u00b8]\u0002\u022a\u022c\u0005\u00b0Y\u0002\u022b",
    "\u022d\u0005F$\u0002\u022c\u022b\u0003\u0002\u0002\u0002\u022c\u022d",
    "\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f",
    "\u0005\u00b0Y\u0002\u022f\u0230\u0005\u00b8]\u0002\u0230\u0232\u0003",
    "\u0002\u0002\u0002\u0231\u0209\u0003\u0002\u0002\u0002\u0231\u0215\u0003",
    "\u0002\u0002\u0002\u0231\u021f\u0003\u0002\u0002\u0002\u0231\u0229\u0003",
    "\u0002\u0002\u0002\u0232E\u0003\u0002\u0002\u0002\u0233\u0235\u0007",
    "\n\u0002\u0002\u0234\u0236\u0005\u0082B\u0002\u0235\u0234\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0238\u0003\u0002",
    "\u0002\u0002\u0237\u0239\u0007\u000b\u0002\u0002\u0238\u0237\u0003\u0002",
    "\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023b\u0003\u0002",
    "\u0002\u0002\u023a\u023c\u0005J&\u0002\u023b\u023a\u0003\u0002\u0002",
    "\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u0241\u0003\u0002\u0002",
    "\u0002\u023d\u023f\u0007\u0007\u0002\u0002\u023e\u0240\u0005P)\u0002",
    "\u023f\u023e\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002",
    "\u0240\u0242\u0003\u0002\u0002\u0002\u0241\u023d\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0244\u0003\u0002\u0002\u0002",
    "\u0243\u0245\u0005H%\u0002\u0244\u0243\u0003\u0002\u0002\u0002\u0244",
    "\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246",
    "\u0247\u0007\f\u0002\u0002\u0247G\u0003\u0002\u0002\u0002\u0248\u024b",
    "\u0005\u0086D\u0002\u0249\u024b\u0005\u0088E\u0002\u024a\u0248\u0003",
    "\u0002\u0002\u0002\u024a\u0249\u0003\u0002\u0002\u0002\u024bI\u0003",
    "\u0002\u0002\u0002\u024c\u024d\u0007\r\u0002\u0002\u024d\u0258\u0005",
    "T+\u0002\u024e\u024f\u0005\u00b0Y\u0002\u024f\u0251\u0007\u000e\u0002",
    "\u0002\u0250\u0252\u0007\r\u0002\u0002\u0251\u0250\u0003\u0002\u0002",
    "\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002",
    "\u0002\u0253\u0254\u0005\u00b0Y\u0002\u0254\u0255\u0005T+\u0002\u0255",
    "\u0257\u0003\u0002\u0002\u0002\u0256\u024e\u0003\u0002\u0002\u0002\u0257",
    "\u025a\u0003\u0002\u0002\u0002\u0258\u0256\u0003\u0002\u0002\u0002\u0258",
    "\u0259\u0003\u0002\u0002\u0002\u0259K\u0003\u0002\u0002\u0002\u025a",
    "\u0258\u0003\u0002\u0002\u0002\u025b\u0261\u0005N(\u0002\u025c\u025d",
    "\u0005\u00b0Y\u0002\u025d\u025e\u0005N(\u0002\u025e\u0260\u0003\u0002",
    "\u0002\u0002\u025f\u025c\u0003\u0002\u0002\u0002\u0260\u0263\u0003\u0002",
    "\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002\u0261\u0262\u0003\u0002",
    "\u0002\u0002\u0262M\u0003\u0002\u0002\u0002\u0263\u0261\u0003\u0002",
    "\u0002\u0002\u0264\u0265\u0007\r\u0002\u0002\u0265\u0266\u0005R*\u0002",
    "\u0266O\u0003\u0002\u0002\u0002\u0267\u0268\u0005\u0090I\u0002\u0268",
    "\u0269\u0005\u00b0Y\u0002\u0269\u026b\u0003\u0002\u0002\u0002\u026a",
    "\u0267\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0003\u0002\u0002\u0002\u026c\u0270\u0007\u000f\u0002\u0002\u026d",
    "\u026e\u0005\u00b0Y\u0002\u026e\u026f\u0005\u0090I\u0002\u026f\u0271",
    "\u0003\u0002\u0002\u0002\u0270\u026d\u0003\u0002\u0002\u0002\u0270\u0271",
    "\u0003\u0002\u0002\u0002\u0271Q\u0003\u0002\u0002\u0002\u0272\u0273",
    "\u0005\u00aeX\u0002\u0273S\u0003\u0002\u0002\u0002\u0274\u0275\u0005",
    "\u00aeX\u0002\u0275U\u0003\u0002\u0002\u0002\u0276\u0277\u0005X-\u0002",
    "\u0277W\u0003\u0002\u0002\u0002\u0278\u0280\u0005Z.\u0002\u0279\u027a",
    "\u0005\u00b2Z\u0002\u027a\u027b\u0007[\u0002\u0002\u027b\u027c\u0005",
    "\u00b2Z\u0002\u027c\u027d\u0005Z.\u0002\u027d\u027f\u0003\u0002\u0002",
    "\u0002\u027e\u0279\u0003\u0002\u0002\u0002\u027f\u0282\u0003\u0002\u0002",
    "\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002",
    "\u0002\u0281Y\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002\u0002",
    "\u0002\u0283\u028b\u0005\\/\u0002\u0284\u0285\u0005\u00b2Z\u0002\u0285",
    "\u0286\u0007\\\u0002\u0002\u0286\u0287\u0005\u00b2Z\u0002\u0287\u0288",
    "\u0005\\/\u0002\u0288\u028a\u0003\u0002\u0002\u0002\u0289\u0284\u0003",
    "\u0002\u0002\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003",
    "\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c[\u0003",
    "\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0296\u0005",
    "^0\u0002\u028f\u0290\u0005\u00b2Z\u0002\u0290\u0291\u0007]\u0002\u0002",
    "\u0291\u0292\u0005\u00b2Z\u0002\u0292\u0293\u0005^0\u0002\u0293\u0295",
    "\u0003\u0002\u0002\u0002\u0294\u028f\u0003\u0002\u0002\u0002\u0295\u0298",
    "\u0003\u0002\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0003\u0002\u0002\u0002\u0297]\u0003\u0002\u0002\u0002\u0298\u0296",
    "\u0003\u0002\u0002\u0002\u0299\u029a\u0005\u00b2Z\u0002\u029a\u029b",
    "\u0007^\u0002\u0002\u029b\u029c\u0005\u00b2Z\u0002\u029c\u029e\u0003",
    "\u0002\u0002\u0002\u029d\u0299\u0003\u0002\u0002\u0002\u029e\u02a1\u0003",
    "\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u029f\u02a0\u0003",
    "\u0002\u0002\u0002\u02a0\u02a2\u0003\u0002\u0002\u0002\u02a1\u029f\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\u0005`1\u0002\u02a3_\u0003\u0002\u0002",
    "\u0002\u02a4\u02aa\u0005b2\u0002\u02a5\u02a6\u0005\u00b0Y\u0002\u02a6",
    "\u02a7\u0005p9\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u02a5",
    "\u0003\u0002\u0002\u0002\u02a9\u02ac\u0003\u0002\u0002\u0002\u02aa\u02a8",
    "\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02aba",
    "\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad\u02ba",
    "\u0005d3\u0002\u02ae\u02af\u0005\u00b0Y\u0002\u02af\u02b0\u0007\u0010",
    "\u0002\u0002\u02b0\u02b1\u0005\u00b0Y\u0002\u02b1\u02b2\u0005d3\u0002",
    "\u02b2\u02b9\u0003\u0002\u0002\u0002\u02b3\u02b4\u0005\u00b0Y\u0002",
    "\u02b4\u02b5\u0007\u0011\u0002\u0002\u02b5\u02b6\u0005\u00b0Y\u0002",
    "\u02b6\u02b7\u0005d3\u0002\u02b7\u02b9\u0003\u0002\u0002\u0002\u02b8",
    "\u02ae\u0003\u0002\u0002\u0002\u02b8\u02b3\u0003\u0002\u0002\u0002\u02b9",
    "\u02bc\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba",
    "\u02bb\u0003\u0002\u0002\u0002\u02bbc\u0003\u0002\u0002\u0002\u02bc",
    "\u02ba\u0003\u0002\u0002\u0002\u02bd\u02cf\u0005f4\u0002\u02be\u02bf",
    "\u0005\u00b0Y\u0002\u02bf\u02c0\u0007\u0007\u0002\u0002\u02c0\u02c1",
    "\u0005\u00b0Y\u0002\u02c1\u02c2\u0005f4\u0002\u02c2\u02ce\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0005\u00b0Y\u0002\u02c4\u02c5\u0007\u0012",
    "\u0002\u0002\u02c5\u02c6\u0005\u00b0Y\u0002\u02c6\u02c7\u0005f4\u0002",
    "\u02c7\u02ce\u0003\u0002\u0002\u0002\u02c8\u02c9\u0005\u00b0Y\u0002",
    "\u02c9\u02ca\u0007\u0013\u0002\u0002\u02ca\u02cb\u0005\u00b0Y\u0002",
    "\u02cb\u02cc\u0005f4\u0002\u02cc\u02ce\u0003\u0002\u0002\u0002\u02cd",
    "\u02be\u0003\u0002\u0002\u0002\u02cd\u02c3\u0003\u0002\u0002\u0002\u02cd",
    "\u02c8\u0003\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002\u0002\u02cf",
    "\u02cd\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0",
    "e\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d2",
    "\u02da\u0005h5\u0002\u02d3\u02d4\u0005\u00b0Y\u0002\u02d4\u02d5\u0007",
    "\u0014\u0002\u0002\u02d5\u02d6\u0005\u00b0Y\u0002\u02d6\u02d7\u0005",
    "h5\u0002\u02d7\u02d9\u0003\u0002\u0002\u0002\u02d8\u02d3\u0003\u0002",
    "\u0002\u0002\u02d9\u02dc\u0003\u0002\u0002\u0002\u02da\u02d8\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02dbg\u0003\u0002",
    "\u0002\u0002\u02dc\u02da\u0003\u0002\u0002\u0002\u02dd\u02de\t\u0004",
    "\u0002\u0002\u02de\u02e0\u0005\u00b0Y\u0002\u02df\u02dd\u0003\u0002",
    "\u0002\u0002\u02e0\u02e3\u0003\u0002\u0002\u0002\u02e1\u02df\u0003\u0002",
    "\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e4\u0003\u0002",
    "\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e4\u02e5\u0005j",
    "6\u0002\u02e5i\u0003\u0002\u0002\u0002\u02e6\u031d\u0005l7\u0002\u02e7",
    "\u02e8\u0005\u00b0Y\u0002\u02e8\u02e9\u0007\n\u0002\u0002\u02e9\u02ea",
    "\u0005V,\u0002\u02ea\u02eb\u0007\f\u0002\u0002\u02eb\u031c\u0003\u0002",
    "\u0002\u0002\u02ec\u02ed\u0005\u00b0Y\u0002\u02ed\u02ef\u0007\n\u0002",
    "\u0002\u02ee\u02f0\u0005V,\u0002\u02ef\u02ee\u0003\u0002\u0002\u0002",
    "\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002",
    "\u02f1\u02f3\u0007\u000f\u0002\u0002\u02f2\u02f4\u0005V,\u0002\u02f3",
    "\u02f2\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4",
    "\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f6\u0007\f\u0002\u0002\u02f6",
    "\u031c\u0003\u0002\u0002\u0002\u02f7\u02f8\u0005\u00b0Y\u0002\u02f8",
    "\u02f9\u0007\u0015\u0002\u0002\u02f9\u030b\u0003\u0002\u0002\u0002\u02fa",
    "\u02fb\u0005\u00b2Z\u0002\u02fb\u02fc\u0007_\u0002\u0002\u02fc\u030b",
    "\u0003\u0002\u0002\u0002\u02fd\u02fe\u0005\u00b2Z\u0002\u02fe\u02ff",
    "\u0007`\u0002\u0002\u02ff\u0300\u0005\u00b2Z\u0002\u0300\u0301\u0007",
    "O\u0002\u0002\u0301\u030b\u0003\u0002\u0002\u0002\u0302\u0303\u0005",
    "\u00b2Z\u0002\u0303\u0304\u0007a\u0002\u0002\u0304\u0305\u0005\u00b2",
    "Z\u0002\u0305\u0306\u0007O\u0002\u0002\u0306\u030b\u0003\u0002\u0002",
    "\u0002\u0307\u0308\u0005\u00b2Z\u0002\u0308\u0309\u0007b\u0002\u0002",
    "\u0309\u030b\u0003\u0002\u0002\u0002\u030a\u02f7\u0003\u0002\u0002\u0002",
    "\u030a\u02fa\u0003\u0002\u0002\u0002\u030a\u02fd\u0003\u0002\u0002\u0002",
    "\u030a\u0302\u0003\u0002\u0002\u0002\u030a\u0307\u0003\u0002\u0002\u0002",
    "\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030d\u0005\u00b0Y\u0002",
    "\u030d\u030e\u0005l7\u0002\u030e\u031c\u0003\u0002\u0002\u0002\u030f",
    "\u0310\u0005\u00b2Z\u0002\u0310\u0311\u0007c\u0002\u0002\u0311\u0312",
    "\u0005\u00b2Z\u0002\u0312\u0313\u0007d\u0002\u0002\u0313\u031c\u0003",
    "\u0002\u0002\u0002\u0314\u0315\u0005\u00b2Z\u0002\u0315\u0316\u0007",
    "c\u0002\u0002\u0316\u0317\u0005\u00b2Z\u0002\u0317\u0318\u0007^\u0002",
    "\u0002\u0318\u0319\u0005\u00b2Z\u0002\u0319\u031a\u0007d\u0002\u0002",
    "\u031a\u031c\u0003\u0002\u0002\u0002\u031b\u02e7\u0003\u0002\u0002\u0002",
    "\u031b\u02ec\u0003\u0002\u0002\u0002\u031b\u030a\u0003\u0002\u0002\u0002",
    "\u031b\u030f\u0003\u0002\u0002\u0002\u031b\u0314\u0003\u0002\u0002\u0002",
    "\u031c\u031f\u0003\u0002\u0002\u0002\u031d\u031b\u0003\u0002\u0002\u0002",
    "\u031d\u031e\u0003\u0002\u0002\u0002\u031ek\u0003\u0002\u0002\u0002",
    "\u031f\u031d\u0003\u0002\u0002\u0002\u0320\u0325\u0005n8\u0002\u0321",
    "\u0324\u0005\u0080A\u0002\u0322\u0324\u0005L\'\u0002\u0323\u0321\u0003",
    "\u0002\u0002\u0002\u0323\u0322\u0003\u0002\u0002\u0002\u0324\u0327\u0003",
    "\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003",
    "\u0002\u0002\u0002\u0326m\u0003\u0002\u0002\u0002\u0327\u0325\u0003",
    "\u0002\u0002\u0002\u0328\u037f\u0005\u0084C\u0002\u0329\u037f\u0007",
    "?\u0002\u0002\u032a\u037f\u0005\u0088E\u0002\u032b\u037f\u0007e\u0002",
    "\u0002\u032c\u037f\u0007f\u0002\u0002\u032d\u037f\u0007d\u0002\u0002",
    "\u032e\u032f\u0007g\u0002\u0002\u032f\u0330\u0007\b\u0002\u0002\u0330",
    "\u0331\u0007\u0007\u0002\u0002\u0331\u037f\u0007\t\u0002\u0002\u0332",
    "\u037f\u0005\u0086D\u0002\u0333\u037f\u0005~@\u0002\u0334\u0335\u0007",
    "\n\u0002\u0002\u0335\u0336\u0005\u00b0Y\u0002\u0336\u0337\u0005V,\u0002",
    "\u0337\u033f\u0005\u00b0Y\u0002\u0338\u0339\u0007\u0004\u0002\u0002",
    "\u0339\u033a\u0005\u00b0Y\u0002\u033a\u033b\u0005V,\u0002\u033b\u033c",
    "\u0005\u00b0Y\u0002\u033c\u033e\u0003\u0002\u0002\u0002\u033d\u0338",
    "\u0003\u0002\u0002\u0002\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0342",
    "\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u0343",
    "\u0007\f\u0002\u0002\u0343\u037f\u0003\u0002\u0002\u0002\u0344\u0345",
    "\u0007h\u0002\u0002\u0345\u0346\u0005\u00b0Y\u0002\u0346\u0347\u0007",
    "\b\u0002\u0002\u0347\u0348\u0005\u00b0Y\u0002\u0348\u0349\u0005v<\u0002",
    "\u0349\u034a\u0005\u00b0Y\u0002\u034a\u034b\u0007\t\u0002\u0002\u034b",
    "\u037f\u0003\u0002\u0002\u0002\u034c\u034d\u0007i\u0002\u0002\u034d",
    "\u034e\u0005\u00b0Y\u0002\u034e\u034f\u0007\b\u0002\u0002\u034f\u0350",
    "\u0005\u00b0Y\u0002\u0350\u0351\u0005v<\u0002\u0351\u0356\u0005\u00b0",
    "Y\u0002\u0352\u0353\u0005\u00b0Y\u0002\u0353\u0354\u0007\u000e\u0002",
    "\u0002\u0354\u0355\u0005V,\u0002\u0355\u0357\u0003\u0002\u0002\u0002",
    "\u0356\u0352\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002",
    "\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u0359\u0007\t\u0002\u0002",
    "\u0359\u037f\u0003\u0002\u0002\u0002\u035a\u035b\u0007C\u0002\u0002",
    "\u035b\u035c\u0005\u00b0Y\u0002\u035c\u035d\u0007\b\u0002\u0002\u035d",
    "\u035e\u0005\u00b0Y\u0002\u035e\u035f\u0005v<\u0002\u035f\u0360\u0005",
    "\u00b0Y\u0002\u0360\u0361\u0007\t\u0002\u0002\u0361\u037f\u0003\u0002",
    "\u0002\u0002\u0362\u0363\u0007j\u0002\u0002\u0363\u0364\u0005\u00b0",
    "Y\u0002\u0364\u0365\u0007\b\u0002\u0002\u0365\u0366\u0005\u00b0Y\u0002",
    "\u0366\u0367\u0005v<\u0002\u0367\u0368\u0005\u00b0Y\u0002\u0368\u0369",
    "\u0007\t\u0002\u0002\u0369\u037f\u0003\u0002\u0002\u0002\u036a\u036b",
    "\u0007k\u0002\u0002\u036b\u036c\u0005\u00b0Y\u0002\u036c\u036d\u0007",
    "\b\u0002\u0002\u036d\u036e\u0005\u00b0Y\u0002\u036e\u036f\u0005v<\u0002",
    "\u036f\u0370\u0005\u00b0Y\u0002\u0370\u0371\u0007\t\u0002\u0002\u0371",
    "\u037f\u0003\u0002\u0002\u0002\u0372\u0373\u0007l\u0002\u0002\u0373",
    "\u0374\u0005\u00b0Y\u0002\u0374\u0375\u0007\b\u0002\u0002\u0375\u0376",
    "\u0005\u00b0Y\u0002\u0376\u0377\u0005v<\u0002\u0377\u0378\u0005\u00b0",
    "Y\u0002\u0378\u0379\u0007\t\u0002\u0002\u0379\u037f\u0003\u0002\u0002",
    "\u0002\u037a\u037f\u0005t;\u0002\u037b\u037f\u0005r:\u0002\u037c\u037f",
    "\u0005z>\u0002\u037d\u037f\u0005\u0082B\u0002\u037e\u0328\u0003\u0002",
    "\u0002\u0002\u037e\u0329\u0003\u0002\u0002\u0002\u037e\u032a\u0003\u0002",
    "\u0002\u0002\u037e\u032b\u0003\u0002\u0002\u0002\u037e\u032c\u0003\u0002",
    "\u0002\u0002\u037e\u032d\u0003\u0002\u0002\u0002\u037e\u032e\u0003\u0002",
    "\u0002\u0002\u037e\u0332\u0003\u0002\u0002\u0002\u037e\u0333\u0003\u0002",
    "\u0002\u0002\u037e\u0334\u0003\u0002\u0002\u0002\u037e\u0344\u0003\u0002",
    "\u0002\u0002\u037e\u034c\u0003\u0002\u0002\u0002\u037e\u035a\u0003\u0002",
    "\u0002\u0002\u037e\u0362\u0003\u0002\u0002\u0002\u037e\u036a\u0003\u0002",
    "\u0002\u0002\u037e\u0372\u0003\u0002\u0002\u0002\u037e\u037a\u0003\u0002",
    "\u0002\u0002\u037e\u037b\u0003\u0002\u0002\u0002\u037e\u037c\u0003\u0002",
    "\u0002\u0002\u037e\u037d\u0003\u0002\u0002\u0002\u037fo\u0003\u0002",
    "\u0002\u0002\u0380\u0381\u0007\u0005\u0002\u0002\u0381\u0382\u0005\u00b0",
    "Y\u0002\u0382\u0383\u0005b2\u0002\u0383\u039d\u0003\u0002\u0002\u0002",
    "\u0384\u0385\u0007\u0016\u0002\u0002\u0385\u0386\u0005\u00b0Y\u0002",
    "\u0386\u0387\u0005b2\u0002\u0387\u039d\u0003\u0002\u0002\u0002\u0388",
    "\u0389\u0007\u0017\u0002\u0002\u0389\u038a\u0005\u00b0Y\u0002\u038a",
    "\u038b\u0005b2\u0002\u038b\u039d\u0003\u0002\u0002\u0002\u038c\u038d",
    "\u0007\u0018\u0002\u0002\u038d\u038e\u0005\u00b0Y\u0002\u038e\u038f",
    "\u0005b2\u0002\u038f\u039d\u0003\u0002\u0002\u0002\u0390\u0391\u0007",
    "\u0019\u0002\u0002\u0391\u0392\u0005\u00b0Y\u0002\u0392\u0393\u0005",
    "b2\u0002\u0393\u039d\u0003\u0002\u0002\u0002\u0394\u0395\u0007\u001a",
    "\u0002\u0002\u0395\u0396\u0005\u00b0Y\u0002\u0396\u0397\u0005b2\u0002",
    "\u0397\u039d\u0003\u0002\u0002\u0002\u0398\u0399\u0007\u001b\u0002\u0002",
    "\u0399\u039a\u0005\u00b0Y\u0002\u039a\u039b\u0005b2\u0002\u039b\u039d",
    "\u0003\u0002\u0002\u0002\u039c\u0380\u0003\u0002\u0002\u0002\u039c\u0384",
    "\u0003\u0002\u0002\u0002\u039c\u0388\u0003\u0002\u0002\u0002\u039c\u038c",
    "\u0003\u0002\u0002\u0002\u039c\u0390\u0003\u0002\u0002\u0002\u039c\u0394",
    "\u0003\u0002\u0002\u0002\u039c\u0398\u0003\u0002\u0002\u0002\u039dq",
    "\u0003\u0002\u0002\u0002\u039e\u039f\u0007\b\u0002\u0002\u039f\u03a0",
    "\u0005V,\u0002\u03a0\u03a1\u0007\t\u0002\u0002\u03a1s\u0003\u0002\u0002",
    "\u0002\u03a2\u03a6\u0005@!\u0002\u03a3\u03a4\u0005\u00b0Y\u0002\u03a4",
    "\u03a5\u0005B\"\u0002\u03a5\u03a7\u0003\u0002\u0002\u0002\u03a6\u03a3",
    "\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8\u03a6",
    "\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9u",
    "\u0003\u0002\u0002\u0002\u03aa\u03ae\u0005x=\u0002\u03ab\u03ac\u0005",
    "\u00b0Y\u0002\u03ac\u03ad\u00056\u001c\u0002\u03ad\u03af\u0003\u0002",
    "\u0002\u0002\u03ae\u03ab\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002",
    "\u0002\u0002\u03afw\u0003\u0002\u0002\u0002\u03b0\u03b1\u0005\u0082",
    "B\u0002\u03b1\u03b2\u0005\u00b2Z\u0002\u03b2\u03b3\u0007_\u0002\u0002",
    "\u03b3\u03b4\u0005\u00b2Z\u0002\u03b4\u03b5\u0005V,\u0002\u03b5y\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0005|?\u0002\u03b7\u03b8\u0005\u00b0",
    "Y\u0002\u03b8\u03b9\u0007\b\u0002\u0002\u03b9\u03bb\u0005\u00b0Y\u0002",
    "\u03ba\u03bc\u0007P\u0002\u0002\u03bb\u03ba\u0003\u0002\u0002\u0002",
    "\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03c7\u0003\u0002\u0002\u0002",
    "\u03bd\u03c4\u0005V,\u0002\u03be\u03bf\u0007\u0004\u0002\u0002\u03bf",
    "\u03c0\u0005\u00b0Y\u0002\u03c0\u03c1\u0005V,\u0002\u03c1\u03c3\u0003",
    "\u0002\u0002\u0002\u03c2\u03be\u0003\u0002\u0002\u0002\u03c3\u03c6\u0003",
    "\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003",
    "\u0002\u0002\u0002\u03c5\u03c8\u0003\u0002\u0002\u0002\u03c6\u03c4\u0003",
    "\u0002\u0002\u0002\u03c7\u03bd\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003",
    "\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9\u03ca\u0005",
    "\u00b0Y\u0002\u03ca\u03cb\u0007\t\u0002\u0002\u03cb{\u0003\u0002\u0002",
    "\u0002\u03cc\u03cd\u0005\u00aeX\u0002\u03cd}\u0003\u0002\u0002\u0002",
    "\u03ce\u03cf\u0007\n\u0002\u0002\u03cf\u03d4\u0005v<\u0002\u03d0\u03d1",
    "\u0005\u00b0Y\u0002\u03d1\u03d2\u0007\u000e\u0002\u0002\u03d2\u03d3",
    "\u0005V,\u0002\u03d3\u03d5\u0003\u0002\u0002\u0002\u03d4\u03d0\u0003",
    "\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003",
    "\u0002\u0002\u0002\u03d6\u03d7\u0007\f\u0002\u0002\u03d7\u007f\u0003",
    "\u0002\u0002\u0002\u03d8\u03d9\u0005\u00b0Y\u0002\u03d9\u03da\u0007",
    "\u001c\u0002\u0002\u03da\u03df\u0005\u00b0Y\u0002\u03db\u03dc\u0005",
    "\u008cG\u0002\u03dc\u03dd\t\u0005\u0002\u0002\u03dd\u03e0\u0003\u0002",
    "\u0002\u0002\u03de\u03e0\u0005\u008cG\u0002\u03df\u03db\u0003\u0002",
    "\u0002\u0002\u03df\u03de\u0003\u0002\u0002\u0002\u03e0\u0081\u0003\u0002",
    "\u0002\u0002\u03e1\u03e2\u0005\u00aeX\u0002\u03e2\u0083\u0003\u0002",
    "\u0002\u0002\u03e3\u03e6\u0005\u00a8U\u0002\u03e4\u03e6\u0005\u008e",
    "H\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e4\u0003\u0002",
    "\u0002\u0002\u03e6\u0085\u0003\u0002\u0002\u0002\u03e7\u03e8\u0007\u001e",
    "\u0002\u0002\u03e8\u03fd\u0005\u00b0Y\u0002\u03e9\u03ea\u0005\u008c",
    "G\u0002\u03ea\u03eb\u0005\u00b0Y\u0002\u03eb\u03ec\u0007\r\u0002\u0002",
    "\u03ec\u03ed\u0005\u00b0Y\u0002\u03ed\u03ee\u0005V,\u0002\u03ee\u03fa",
    "\u0005\u00b0Y\u0002\u03ef\u03f0\u0007\u0004\u0002\u0002\u03f0\u03f1",
    "\u0005\u00b0Y\u0002\u03f1\u03f2\u0005\u008cG\u0002\u03f2\u03f3\u0005",
    "\u00b0Y\u0002\u03f3\u03f4\u0007\r\u0002\u0002\u03f4\u03f5\u0005\u00b0",
    "Y\u0002\u03f5\u03f6\u0005V,\u0002\u03f6\u03f7\u0005\u00b0Y\u0002\u03f7",
    "\u03f9\u0003\u0002\u0002\u0002\u03f8\u03ef\u0003\u0002\u0002\u0002\u03f9",
    "\u03fc\u0003\u0002\u0002\u0002\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002\u03fc",
    "\u03fa\u0003\u0002\u0002\u0002\u03fd\u03e9\u0003\u0002\u0002\u0002\u03fd",
    "\u03fe\u0003\u0002\u0002\u0002\u03fe\u03ff\u0003\u0002\u0002\u0002\u03ff",
    "\u0400\u0007\u001f\u0002\u0002\u0400\u0087\u0003\u0002\u0002\u0002\u0401",
    "\u0402\u0007\u001e\u0002\u0002\u0402\u0405\u0005\u00b0Y\u0002\u0403",
    "\u0406\u0005\u00aeX\u0002\u0404\u0406\u0005\u009aN\u0002\u0405\u0403",
    "\u0003\u0002\u0002\u0002\u0405\u0404\u0003\u0002\u0002\u0002\u0406\u0407",
    "\u0003\u0002\u0002\u0002\u0407\u0408\u0005\u00b0Y\u0002\u0408\u0409",
    "\u0007\u001f\u0002\u0002\u0409\u0089\u0003\u0002\u0002\u0002\u040a\u040e",
    "\u0005n8\u0002\u040b\u040c\u0005\u00b0Y\u0002\u040c\u040d\u0005\u0080",
    "A\u0002\u040d\u040f\u0003\u0002\u0002\u0002\u040e\u040b\u0003\u0002",
    "\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u040e\u0003\u0002",
    "\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u008b\u0003\u0002",
    "\u0002\u0002\u0412\u0413\u0005\u00aeX\u0002\u0413\u008d\u0003\u0002",
    "\u0002\u0002\u0414\u0418\u0005\u0092J\u0002\u0415\u0418\u0005\u0096",
    "L\u0002\u0416\u0418\u0005\u0094K\u0002\u0417\u0414\u0003\u0002\u0002",
    "\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0417\u0416\u0003\u0002\u0002",
    "\u0002\u0418\u008f\u0003\u0002\u0002\u0002\u0419\u041a\u0005\u009aN",
    "\u0002\u041a\u0091\u0003\u0002\u0002\u0002\u041b\u041d\u0007\u0011\u0002",
    "\u0002\u041c\u041b\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002\u0002",
    "\u0002\u041d\u041e\u0003\u0002\u0002\u0002\u041e\u041f\u0005\u0098M",
    "\u0002\u041f\u0093\u0003\u0002\u0002\u0002\u0420\u0422\u0007\u0011\u0002",
    "\u0002\u0421\u0420\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002",
    "\u0002\u0422\u0423\u0003\u0002\u0002\u0002\u0423\u0424\u0005\u009aN",
    "\u0002\u0424\u0095\u0003\u0002\u0002\u0002\u0425\u0427\u0007\u0011\u0002",
    "\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002",
    "\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u0429\u0005\u009cO",
    "\u0002\u0429\u0097\u0003\u0002\u0002\u0002\u042a\u042b\u0007m\u0002",
    "\u0002\u042b\u042c\u0005\u009eP\u0002\u042c\u0099\u0003\u0002\u0002",
    "\u0002\u042d\u042f\t\u0006\u0002\u0002\u042e\u0430\u0005\u00a0Q\u0002",
    "\u042f\u042e\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002",
    "\u0430\u0433\u0003\u0002\u0002\u0002\u0431\u0433\u0007)\u0002\u0002",
    "\u0432\u042d\u0003\u0002\u0002\u0002\u0432\u0431\u0003\u0002\u0002\u0002",
    "\u0433\u009b\u0003\u0002\u0002\u0002\u0434\u0435\u0007)\u0002\u0002",
    "\u0435\u0436\u0005\u00a2R\u0002\u0436\u009d\u0003\u0002\u0002\u0002",
    "\u0437\u0439\u0007A\u0002\u0002\u0438\u0437\u0003\u0002\u0002\u0002",
    "\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u0438\u0003\u0002\u0002\u0002",
    "\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u009f\u0003\u0002\u0002\u0002",
    "\u043c\u043e\u0005\u00a4S\u0002\u043d\u043c\u0003\u0002\u0002\u0002",
    "\u043e\u043f\u0003\u0002\u0002\u0002\u043f\u043d\u0003\u0002\u0002\u0002",
    "\u043f\u0440\u0003\u0002\u0002\u0002\u0440\u00a1\u0003\u0002\u0002\u0002",
    "\u0441\u0443\u0005\u00a6T\u0002\u0442\u0441\u0003\u0002\u0002\u0002",
    "\u0443\u0444\u0003\u0002\u0002\u0002\u0444\u0442\u0003\u0002\u0002\u0002",
    "\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u00a3\u0003\u0002\u0002\u0002",
    "\u0446\u0447\t\u0007\u0002\u0002\u0447\u00a5\u0003\u0002\u0002\u0002",
    "\u0448\u0449\t\b\u0002\u0002\u0449\u00a7\u0003\u0002\u0002\u0002\u044a",
    "\u044d\u0005\u00aaV\u0002\u044b\u044d\u0005\u00acW\u0002\u044c\u044a",
    "\u0003\u0002\u0002\u0002\u044c\u044b\u0003\u0002\u0002\u0002\u044d\u00a9",
    "\u0003\u0002\u0002\u0002\u044e\u0450\u0007\u0011\u0002\u0002\u044f\u044e",
    "\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450\u0453",
    "\u0003\u0002\u0002\u0002\u0451\u0454\u0005\u00a4S\u0002\u0452\u0454",
    "\u0007\u001c\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0453\u0452",
    "\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002\u0002\u0002\u0455\u0453",
    "\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u0459",
    "\u0003\u0002\u0002\u0002\u0457\u045a\t\t\u0002\u0002\u0458\u045a\t\t",
    "\u0002\u0002\u0459\u0457\u0003\u0002\u0002\u0002\u0459\u0458\u0003\u0002",
    "\u0002\u0002\u045a\u045c\u0003\u0002\u0002\u0002\u045b\u045d\u0007\u0011",
    "\u0002\u0002\u045c\u045b\u0003\u0002\u0002\u0002\u045c\u045d\u0003\u0002",
    "\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002\u045e\u045f\u0005\u00a0",
    "Q\u0002\u045f\u00ab\u0003\u0002\u0002\u0002\u0460\u0462\u0007\u0011",
    "\u0002\u0002\u0461\u0460\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002",
    "\u0002\u0002\u0462\u0466\u0003\u0002\u0002\u0002\u0463\u0465\u0005\u00a4",
    "S\u0002\u0464\u0463\u0003\u0002\u0002\u0002\u0465\u0468\u0003\u0002",
    "\u0002\u0002\u0466\u0464\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002",
    "\u0002\u0002\u0467\u0469\u0003\u0002\u0002\u0002\u0468\u0466\u0003\u0002",
    "\u0002\u0002\u0469\u046a\u0007\u001c\u0002\u0002\u046a\u046b\u0005\u00a0",
    "Q\u0002\u046b\u00ad\u0003\u0002\u0002\u0002\u046c\u046d\t\n\u0002\u0002",
    "\u046d\u00af\u0003\u0002\u0002\u0002\u046e\u0470\u0007r\u0002\u0002",
    "\u046f\u046e\u0003\u0002\u0002\u0002\u0470\u0473\u0003\u0002\u0002\u0002",
    "\u0471\u046f\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002",
    "\u0472\u00b1\u0003\u0002\u0002\u0002\u0473\u0471\u0003\u0002\u0002\u0002",
    "\u0474\u0476\u0007r\u0002\u0002\u0475\u0474\u0003\u0002\u0002\u0002",
    "\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0475\u0003\u0002\u0002\u0002",
    "\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u00b3\u0003\u0002\u0002\u0002",
    "\u0479\u047a\t\u000b\u0002\u0002\u047a\u00b5\u0003\u0002\u0002\u0002",
    "\u047b\u047c\t\f\u0002\u0002\u047c\u00b7\u0003\u0002\u0002\u0002\u047d",
    "\u047e\t\r\u0002\u0002\u047e\u00b9\u0003\u0002\u0002\u0002m\u00bf\u00cd",
    "\u00d6\u00e0\u00eb\u00ef\u00f7\u0109\u0118\u0124\u0136\u013e\u0149\u014c",
    "\u0158\u015f\u0166\u016c\u016e\u017a\u0180\u0185\u018a\u0194\u019f\u01a2",
    "\u01ab\u01b8\u01c8\u01ca\u01d5\u01df\u01e9\u01f0\u01f7\u01fc\u0201\u020e",
    "\u021a\u0222\u022c\u0231\u0235\u0238\u023b\u023f\u0241\u0244\u024a\u0251",
    "\u0258\u0261\u026a\u0270\u0280\u028b\u0296\u029f\u02aa\u02b8\u02ba\u02cd",
    "\u02cf\u02da\u02e1\u02ef\u02f3\u030a\u031b\u031d\u0323\u0325\u033f\u0356",
    "\u037e\u039c\u03a8\u03ae\u03bb\u03c4\u03c7\u03d4\u03df\u03e5\u03fa\u03fd",
    "\u0405\u0410\u0417\u041c\u0421\u0426\u042f\u0432\u043a\u043f\u0444\u044c",
    "\u044f\u0453\u0455\u0459\u045c\u0461\u0466\u0471\u0477"].join("");


  var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

  var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
  });

  var sharedContextCache = new antlr4.PredictionContextCache();

  var literalNames = [null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'",
    "'['", "'?'", "']'", "':'", "'|'", "'..'", "'+'", "'-'",
    "'/'", "'%'", "'^'", "'=~'", "'<>'", "'!='", "'<'",
    "'>'", "'<='", "'>='", "'.'", "'!'", "'{'", "'}'",
    "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'",
    "'9'", "'0'", "'E'", "'e'", "'⟨'", "'〈'", "'﹤'", "'＜'",
    "'⟩'", "'〉'", "'﹥'", "'＞'", "'­'", "'‐'", "'‑'", "'‒'",
    "'–'", "'—'", "'―'", "'−'", "'﹘'", "'﹣'", "'－'"];

  var symbolicNames = [null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, "StringLiteral",
    "EscapedChar", "HexDigit", "UNION", "ALL", "OPTIONAL",
    "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE",
    "SET", "DELETE", "DETACH", "REMOVE", "WITH", "DISTINCT",
    "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "DESCENDING",
    "DESC", "ASCENDING", "ASC", "WHERE", "OR", "XOR",
    "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS",
    "IS", "NULL", "TRUE", "FALSE", "COUNT", "FILTER",
    "EXTRACT", "ANY", "NONE", "SINGLE", "L_0X", "UnescapedSymbolicName",
    "IdentifierStart", "IdentifierPart", "EscapedSymbolicName",
    "WHITESPACE", "Comment"];

  var ruleNames = ["cypher", "statement", "query", "regularQuery", "singleQuery",
    "union", "clause", "c_match", "unwind", "c_merge", "c_mergeAction",
    "create", "c_set", "setItem", "c_delete", "remove", "removeItem",
    "c_with", "c_return", "c_returnBody", "c_returnItems",
    "c_returnItem", "order", "skip", "limit", "sortItem",
    "where", "pattern", "patternPart", "anonymousPatternPart",
    "patternElement", "nodePattern", "patternElementChain",
    "relationshipPattern", "relationshipDetail", "properties",
    "relationshipTypes", "nodeLabels", "nodeLabel", "rangeLiteral",
    "labelName", "relTypeName", "expression", "expression12",
    "expression11", "expression10", "expression9", "expression8",
    "expression7", "expression6", "expression5", "expression4",
    "expression3", "expression2", "atom", "partialComparisonExpression",
    "parenthesizedExpression", "relationshipsPattern", "filterExpression",
    "idInColl", "functionInvocation", "functionName", "listComprehension",
    "propertyLookup", "variable", "numberLiteral", "mapLiteral",
    "parameter", "propertyExpression", "propertyKeyName",
    "signedIntegerLiteral", "unsignedIntegerLiteral", "hexInteger",
    "decimalInteger", "octalInteger", "unsignedHexInteger",
    "unsignedDecimalInteger", "unsignedOctalInteger", "hexString",
    "digitString", "octalString", "digit", "octDigit", "doubleLiteral",
    "exponentDecimalReal", "regularDecimalReal", "symbolicName",
    "ws", "sp", "leftArrowHead", "rightArrowHead", "dash"];

  function CypherParser(input) {


    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    var sharedContextCache = new antlr4.PredictionContextCache();
    this.atn = atn;
    
    antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
  }

  CypherParser.prototype = Object.create(antlr4.Parser.prototype);
  CypherParser.prototype.constructor = CypherParser;

  /*
  Object.defineProperty(CypherParser.prototype, "atn", {
    get: function () {
      return atn;
    }
  });
  */

  CypherParser.EOF = antlr4.Token.EOF;
  CypherParser.T__0 = 1;
  CypherParser.T__1 = 2;
  CypherParser.T__2 = 3;
  CypherParser.T__3 = 4;
  CypherParser.T__4 = 5;
  CypherParser.T__5 = 6;
  CypherParser.T__6 = 7;
  CypherParser.T__7 = 8;
  CypherParser.T__8 = 9;
  CypherParser.T__9 = 10;
  CypherParser.T__10 = 11;
  CypherParser.T__11 = 12;
  CypherParser.T__12 = 13;
  CypherParser.T__13 = 14;
  CypherParser.T__14 = 15;
  CypherParser.T__15 = 16;
  CypherParser.T__16 = 17;
  CypherParser.T__17 = 18;
  CypherParser.T__18 = 19;
  CypherParser.T__19 = 20;
  CypherParser.T__20 = 21;
  CypherParser.T__21 = 22;
  CypherParser.T__22 = 23;
  CypherParser.T__23 = 24;
  CypherParser.T__24 = 25;
  CypherParser.T__25 = 26;
  CypherParser.T__26 = 27;
  CypherParser.T__27 = 28;
  CypherParser.T__28 = 29;
  CypherParser.T__29 = 30;
  CypherParser.T__30 = 31;
  CypherParser.T__31 = 32;
  CypherParser.T__32 = 33;
  CypherParser.T__33 = 34;
  CypherParser.T__34 = 35;
  CypherParser.T__35 = 36;
  CypherParser.T__36 = 37;
  CypherParser.T__37 = 38;
  CypherParser.T__38 = 39;
  CypherParser.T__39 = 40;
  CypherParser.T__40 = 41;
  CypherParser.T__41 = 42;
  CypherParser.T__42 = 43;
  CypherParser.T__43 = 44;
  CypherParser.T__44 = 45;
  CypherParser.T__45 = 46;
  CypherParser.T__46 = 47;
  CypherParser.T__47 = 48;
  CypherParser.T__48 = 49;
  CypherParser.T__49 = 50;
  CypherParser.T__50 = 51;
  CypherParser.T__51 = 52;
  CypherParser.T__52 = 53;
  CypherParser.T__53 = 54;
  CypherParser.T__54 = 55;
  CypherParser.T__55 = 56;
  CypherParser.T__56 = 57;
  CypherParser.T__57 = 58;
  CypherParser.T__58 = 59;
  CypherParser.T__59 = 60;
  CypherParser.StringLiteral = 61;
  CypherParser.EscapedChar = 62;
  CypherParser.HexDigit = 63;
  CypherParser.UNION = 64;
  CypherParser.ALL = 65;
  CypherParser.OPTIONAL = 66;
  CypherParser.MATCH = 67;
  CypherParser.UNWIND = 68;
  CypherParser.AS = 69;
  CypherParser.MERGE = 70;
  CypherParser.ON = 71;
  CypherParser.CREATE = 72;
  CypherParser.SET = 73;
  CypherParser.DELETE = 74;
  CypherParser.DETACH = 75;
  CypherParser.REMOVE = 76;
  CypherParser.WITH = 77;
  CypherParser.DISTINCT = 78;
  CypherParser.RETURN = 79;
  CypherParser.ORDER = 80;
  CypherParser.BY = 81;
  CypherParser.L_SKIP = 82;
  CypherParser.LIMIT = 83;
  CypherParser.DESCENDING = 84;
  CypherParser.DESC = 85;
  CypherParser.ASCENDING = 86;
  CypherParser.ASC = 87;
  CypherParser.WHERE = 88;
  CypherParser.OR = 89;
  CypherParser.XOR = 90;
  CypherParser.AND = 91;
  CypherParser.NOT = 92;
  CypherParser.IN = 93;
  CypherParser.STARTS = 94;
  CypherParser.ENDS = 95;
  CypherParser.CONTAINS = 96;
  CypherParser.IS = 97;
  CypherParser.NULL = 98;
  CypherParser.TRUE = 99;
  CypherParser.FALSE = 100;
  CypherParser.COUNT = 101;
  CypherParser.FILTER = 102;
  CypherParser.EXTRACT = 103;
  CypherParser.ANY = 104;
  CypherParser.NONE = 105;
  CypherParser.SINGLE = 106;
  CypherParser.L_0X = 107;
  CypherParser.UnescapedSymbolicName = 108;
  CypherParser.IdentifierStart = 109;
  CypherParser.IdentifierPart = 110;
  CypherParser.EscapedSymbolicName = 111;
  CypherParser.WHITESPACE = 112;
  CypherParser.Comment = 113;

  CypherParser.RULE_cypher = 0;
  CypherParser.RULE_statement = 1;
  CypherParser.RULE_query = 2;
  CypherParser.RULE_regularQuery = 3;
  CypherParser.RULE_singleQuery = 4;
  CypherParser.RULE_union = 5;
  CypherParser.RULE_clause = 6;
  CypherParser.RULE_c_match = 7;
  CypherParser.RULE_unwind = 8;
  CypherParser.RULE_c_merge = 9;
  CypherParser.RULE_c_mergeAction = 10;
  CypherParser.RULE_create = 11;
  CypherParser.RULE_c_set = 12;
  CypherParser.RULE_setItem = 13;
  CypherParser.RULE_c_delete = 14;
  CypherParser.RULE_remove = 15;
  CypherParser.RULE_removeItem = 16;
  CypherParser.RULE_c_with = 17;
  CypherParser.RULE_c_return = 18;
  CypherParser.RULE_c_returnBody = 19;
  CypherParser.RULE_c_returnItems = 20;
  CypherParser.RULE_c_returnItem = 21;
  CypherParser.RULE_order = 22;
  CypherParser.RULE_skip = 23;
  CypherParser.RULE_limit = 24;
  CypherParser.RULE_sortItem = 25;
  CypherParser.RULE_where = 26;
  CypherParser.RULE_pattern = 27;
  CypherParser.RULE_patternPart = 28;
  CypherParser.RULE_anonymousPatternPart = 29;
  CypherParser.RULE_patternElement = 30;
  CypherParser.RULE_nodePattern = 31;
  CypherParser.RULE_patternElementChain = 32;
  CypherParser.RULE_relationshipPattern = 33;
  CypherParser.RULE_relationshipDetail = 34;
  CypherParser.RULE_properties = 35;
  CypherParser.RULE_relationshipTypes = 36;
  CypherParser.RULE_nodeLabels = 37;
  CypherParser.RULE_nodeLabel = 38;
  CypherParser.RULE_rangeLiteral = 39;
  CypherParser.RULE_labelName = 40;
  CypherParser.RULE_relTypeName = 41;
  CypherParser.RULE_expression = 42;
  CypherParser.RULE_expression12 = 43;
  CypherParser.RULE_expression11 = 44;
  CypherParser.RULE_expression10 = 45;
  CypherParser.RULE_expression9 = 46;
  CypherParser.RULE_expression8 = 47;
  CypherParser.RULE_expression7 = 48;
  CypherParser.RULE_expression6 = 49;
  CypherParser.RULE_expression5 = 50;
  CypherParser.RULE_expression4 = 51;
  CypherParser.RULE_expression3 = 52;
  CypherParser.RULE_expression2 = 53;
  CypherParser.RULE_atom = 54;
  CypherParser.RULE_partialComparisonExpression = 55;
  CypherParser.RULE_parenthesizedExpression = 56;
  CypherParser.RULE_relationshipsPattern = 57;
  CypherParser.RULE_filterExpression = 58;
  CypherParser.RULE_idInColl = 59;
  CypherParser.RULE_functionInvocation = 60;
  CypherParser.RULE_functionName = 61;
  CypherParser.RULE_listComprehension = 62;
  CypherParser.RULE_propertyLookup = 63;
  CypherParser.RULE_variable = 64;
  CypherParser.RULE_numberLiteral = 65;
  CypherParser.RULE_mapLiteral = 66;
  CypherParser.RULE_parameter = 67;
  CypherParser.RULE_propertyExpression = 68;
  CypherParser.RULE_propertyKeyName = 69;
  CypherParser.RULE_signedIntegerLiteral = 70;
  CypherParser.RULE_unsignedIntegerLiteral = 71;
  CypherParser.RULE_hexInteger = 72;
  CypherParser.RULE_decimalInteger = 73;
  CypherParser.RULE_octalInteger = 74;
  CypherParser.RULE_unsignedHexInteger = 75;
  CypherParser.RULE_unsignedDecimalInteger = 76;
  CypherParser.RULE_unsignedOctalInteger = 77;
  CypherParser.RULE_hexString = 78;
  CypherParser.RULE_digitString = 79;
  CypherParser.RULE_octalString = 80;
  CypherParser.RULE_digit = 81;
  CypherParser.RULE_octDigit = 82;
  CypherParser.RULE_doubleLiteral = 83;
  CypherParser.RULE_exponentDecimalReal = 84;
  CypherParser.RULE_regularDecimalReal = 85;
  CypherParser.RULE_symbolicName = 86;
  CypherParser.RULE_ws = 87;
  CypherParser.RULE_sp = 88;
  CypherParser.RULE_leftArrowHead = 89;
  CypherParser.RULE_rightArrowHead = 90;
  CypherParser.RULE_dash = 91;

  function CypherContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypher;
    return this;
  }

  CypherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  CypherContext.prototype.constructor = CypherContext;

  CypherContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  CypherContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
  };

  CypherContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterCypher(this);
    }
  };

  CypherContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitCypher(this);
    }
  };


  CypherParser.CypherContext = CypherContext;

  CypherParser.prototype.cypher = function () {

    var localctx = new CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CypherParser.RULE_cypher);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 184;
      this.ws();
      this.state = 185;
      this.statement();
      this.state = 189;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
      if (la_ === 1) {
        this.state = 186;
        this.ws();
        this.state = 187;
        this.match(CypherParser.T__0);

      }
      this.state = 191;
      this.ws();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function StatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_statement;
    return this;
  }

  StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  StatementContext.prototype.constructor = StatementContext;

  StatementContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
  };

  StatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterStatement(this);
    }
  };

  StatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitStatement(this);
    }
  };


  CypherParser.StatementContext = StatementContext;

  CypherParser.prototype.statement = function () {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CypherParser.RULE_statement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 193;
      this.query();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function QueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_query;
    return this;
  }

  QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  QueryContext.prototype.constructor = QueryContext;

  QueryContext.prototype.regularQuery = function () {
    return this.getTypedRuleContext(RegularQueryContext, 0);
  };

  QueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterQuery(this);
    }
  };

  QueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitQuery(this);
    }
  };


  CypherParser.QueryContext = QueryContext;

  CypherParser.prototype.query = function () {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CypherParser.RULE_query);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 195;
      this.regularQuery();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RegularQueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularQuery;
    return this;
  }

  RegularQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RegularQueryContext.prototype.constructor = RegularQueryContext;

  RegularQueryContext.prototype.singleQuery = function () {
    return this.getTypedRuleContext(SingleQueryContext, 0);
  };

  RegularQueryContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RegularQueryContext.prototype.union = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(UnionContext);
    } else {
      return this.getTypedRuleContext(UnionContext, i);
    }
  };

  RegularQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRegularQuery(this);
    }
  };

  RegularQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRegularQuery(this);
    }
  };


  CypherParser.RegularQueryContext = RegularQueryContext;

  CypherParser.prototype.regularQuery = function () {

    var localctx = new RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CypherParser.RULE_regularQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 197;
      this.singleQuery();
      this.state = 203;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 1, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 198;
          this.ws();
          this.state = 199;
          this.union();
        }
        this.state = 205;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 1, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SingleQueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleQuery;
    return this;
  }

  SingleQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SingleQueryContext.prototype.constructor = SingleQueryContext;

  SingleQueryContext.prototype.clause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ClauseContext);
    } else {
      return this.getTypedRuleContext(ClauseContext, i);
    }
  };

  SingleQueryContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  SingleQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSingleQuery(this);
    }
  };

  SingleQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSingleQuery(this);
    }
  };


  CypherParser.SingleQueryContext = SingleQueryContext;

  CypherParser.prototype.singleQuery = function () {

    var localctx = new SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CypherParser.RULE_singleQuery);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 206;
      this.clause();
      this.state = 212;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 2, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 207;
          this.ws();
          this.state = 208;
          this.clause();
        }
        this.state = 214;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 2, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_union;
    return this;
  }

  UnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnionContext.prototype.constructor = UnionContext;

  UnionContext.prototype.UNION = function () {
    return this.getToken(CypherParser.UNION, 0);
  };

  UnionContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  UnionContext.prototype.ALL = function () {
    return this.getToken(CypherParser.ALL, 0);
  };

  UnionContext.prototype.singleQuery = function () {
    return this.getTypedRuleContext(SingleQueryContext, 0);
  };

  UnionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnion(this);
    }
  };

  UnionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnion(this);
    }
  };


  CypherParser.UnionContext = UnionContext;

  CypherParser.prototype.union = function () {

    var localctx = new UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CypherParser.RULE_union);
    try {
      this.state = 222;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 215;
          this.match(CypherParser.UNION);
          this.state = 216;
          this.sp();
          this.state = 217;
          this.match(CypherParser.ALL);
          this.state = 218;
          this.singleQuery();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 220;
          this.match(CypherParser.UNION);
          this.state = 221;
          this.singleQuery();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ClauseContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_clause;
    return this;
  }

  ClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ClauseContext.prototype.constructor = ClauseContext;

  ClauseContext.prototype.c_match = function () {
    return this.getTypedRuleContext(C_matchContext, 0);
  };

  ClauseContext.prototype.unwind = function () {
    return this.getTypedRuleContext(UnwindContext, 0);
  };

  ClauseContext.prototype.c_merge = function () {
    return this.getTypedRuleContext(C_mergeContext, 0);
  };

  ClauseContext.prototype.create = function () {
    return this.getTypedRuleContext(CreateContext, 0);
  };

  ClauseContext.prototype.c_set = function () {
    return this.getTypedRuleContext(C_setContext, 0);
  };

  ClauseContext.prototype.c_delete = function () {
    return this.getTypedRuleContext(C_deleteContext, 0);
  };

  ClauseContext.prototype.remove = function () {
    return this.getTypedRuleContext(RemoveContext, 0);
  };

  ClauseContext.prototype.c_with = function () {
    return this.getTypedRuleContext(C_withContext, 0);
  };

  ClauseContext.prototype.c_return = function () {
    return this.getTypedRuleContext(C_returnContext, 0);
  };

  ClauseContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterClause(this);
    }
  };

  ClauseContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitClause(this);
    }
  };


  CypherParser.ClauseContext = ClauseContext;

  CypherParser.prototype.clause = function () {

    var localctx = new ClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CypherParser.RULE_clause);
    try {
      this.state = 233;
      switch (this._input.LA(1)) {
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
          this.enterOuterAlt(localctx, 1);
          this.state = 224;
          this.c_match();
          break;
        case CypherParser.UNWIND:
          this.enterOuterAlt(localctx, 2);
          this.state = 225;
          this.unwind();
          break;
        case CypherParser.MERGE:
          this.enterOuterAlt(localctx, 3);
          this.state = 226;
          this.c_merge();
          break;
        case CypherParser.CREATE:
          this.enterOuterAlt(localctx, 4);
          this.state = 227;
          this.create();
          break;
        case CypherParser.SET:
          this.enterOuterAlt(localctx, 5);
          this.state = 228;
          this.c_set();
          break;
        case CypherParser.DELETE:
        case CypherParser.DETACH:
          this.enterOuterAlt(localctx, 6);
          this.state = 229;
          this.c_delete();
          break;
        case CypherParser.REMOVE:
          this.enterOuterAlt(localctx, 7);
          this.state = 230;
          this.remove();
          break;
        case CypherParser.WITH:
          this.enterOuterAlt(localctx, 8);
          this.state = 231;
          this.c_with();
          break;
        case CypherParser.RETURN:
          this.enterOuterAlt(localctx, 9);
          this.state = 232;
          this.c_return();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_matchContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_match;
    return this;
  }

  C_matchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_matchContext.prototype.constructor = C_matchContext;

  C_matchContext.prototype.MATCH = function () {
    return this.getToken(CypherParser.MATCH, 0);
  };

  C_matchContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  C_matchContext.prototype.pattern = function () {
    return this.getTypedRuleContext(PatternContext, 0);
  };

  C_matchContext.prototype.OPTIONAL = function () {
    return this.getToken(CypherParser.OPTIONAL, 0);
  };

  C_matchContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  C_matchContext.prototype.where = function () {
    return this.getTypedRuleContext(WhereContext, 0);
  };

  C_matchContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_match(this);
    }
  };

  C_matchContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_match(this);
    }
  };


  CypherParser.C_matchContext = C_matchContext;

  CypherParser.prototype.c_match = function () {

    var localctx = new C_matchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CypherParser.RULE_c_match);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 237;
      _la = this._input.LA(1);
      if (_la === CypherParser.OPTIONAL) {
        this.state = 235;
        this.match(CypherParser.OPTIONAL);
        this.state = 236;
        this.sp();
      }

      this.state = 239;
      this.match(CypherParser.MATCH);
      this.state = 240;
      this.ws();
      this.state = 241;
      this.pattern();
      this.state = 245;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
      if (la_ === 1) {
        this.state = 242;
        this.ws();
        this.state = 243;
        this.where();

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnwindContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unwind;
    return this;
  }

  UnwindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnwindContext.prototype.constructor = UnwindContext;

  UnwindContext.prototype.UNWIND = function () {
    return this.getToken(CypherParser.UNWIND, 0);
  };

  UnwindContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  UnwindContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  UnwindContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  UnwindContext.prototype.AS = function () {
    return this.getToken(CypherParser.AS, 0);
  };

  UnwindContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  UnwindContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnwind(this);
    }
  };

  UnwindContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnwind(this);
    }
  };


  CypherParser.UnwindContext = UnwindContext;

  CypherParser.prototype.unwind = function () {

    var localctx = new UnwindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CypherParser.RULE_unwind);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 247;
      this.match(CypherParser.UNWIND);
      this.state = 248;
      this.ws();
      this.state = 249;
      this.expression();
      this.state = 250;
      this.sp();
      this.state = 251;
      this.match(CypherParser.AS);
      this.state = 252;
      this.sp();
      this.state = 253;
      this.variable();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_mergeContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_merge;
    return this;
  }

  C_mergeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_mergeContext.prototype.constructor = C_mergeContext;

  C_mergeContext.prototype.MERGE = function () {
    return this.getToken(CypherParser.MERGE, 0);
  };

  C_mergeContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  C_mergeContext.prototype.patternPart = function () {
    return this.getTypedRuleContext(PatternPartContext, 0);
  };

  C_mergeContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_mergeContext.prototype.c_mergeAction = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(C_mergeActionContext);
    } else {
      return this.getTypedRuleContext(C_mergeActionContext, i);
    }
  };

  C_mergeContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_merge(this);
    }
  };

  C_mergeContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_merge(this);
    }
  };


  CypherParser.C_mergeContext = C_mergeContext;

  CypherParser.prototype.c_merge = function () {

    var localctx = new C_mergeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CypherParser.RULE_c_merge);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 255;
      this.match(CypherParser.MERGE);
      this.state = 256;
      this.ws();
      this.state = 257;
      this.patternPart();
      this.state = 263;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 7, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 258;
          this.sp();
          this.state = 259;
          this.c_mergeAction();
        }
        this.state = 265;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_mergeActionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_mergeAction;
    return this;
  }

  C_mergeActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_mergeActionContext.prototype.constructor = C_mergeActionContext;

  C_mergeActionContext.prototype.ON = function () {
    return this.getToken(CypherParser.ON, 0);
  };

  C_mergeActionContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_mergeActionContext.prototype.MATCH = function () {
    return this.getToken(CypherParser.MATCH, 0);
  };

  C_mergeActionContext.prototype.c_set = function () {
    return this.getTypedRuleContext(C_setContext, 0);
  };

  C_mergeActionContext.prototype.CREATE = function () {
    return this.getToken(CypherParser.CREATE, 0);
  };

  C_mergeActionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_mergeAction(this);
    }
  };

  C_mergeActionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_mergeAction(this);
    }
  };


  CypherParser.C_mergeActionContext = C_mergeActionContext;

  CypherParser.prototype.c_mergeAction = function () {

    var localctx = new C_mergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CypherParser.RULE_c_mergeAction);
    try {
      this.state = 278;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 266;
          this.match(CypherParser.ON);
          this.state = 267;
          this.sp();
          this.state = 268;
          this.match(CypherParser.MATCH);
          this.state = 269;
          this.sp();
          this.state = 270;
          this.c_set();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 272;
          this.match(CypherParser.ON);
          this.state = 273;
          this.sp();
          this.state = 274;
          this.match(CypherParser.CREATE);
          this.state = 275;
          this.sp();
          this.state = 276;
          this.c_set();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function CreateContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_create;
    return this;
  }

  CreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  CreateContext.prototype.constructor = CreateContext;

  CreateContext.prototype.CREATE = function () {
    return this.getToken(CypherParser.CREATE, 0);
  };

  CreateContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  CreateContext.prototype.pattern = function () {
    return this.getTypedRuleContext(PatternContext, 0);
  };

  CreateContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterCreate(this);
    }
  };

  CreateContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitCreate(this);
    }
  };


  CypherParser.CreateContext = CreateContext;

  CypherParser.prototype.create = function () {

    var localctx = new CreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CypherParser.RULE_create);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 280;
      this.match(CypherParser.CREATE);
      this.state = 281;
      this.ws();
      this.state = 282;
      this.pattern();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_setContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_set;
    return this;
  }

  C_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_setContext.prototype.constructor = C_setContext;

  C_setContext.prototype.SET = function () {
    return this.getToken(CypherParser.SET, 0);
  };

  C_setContext.prototype.setItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SetItemContext);
    } else {
      return this.getTypedRuleContext(SetItemContext, i);
    }
  };

  C_setContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_set(this);
    }
  };

  C_setContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_set(this);
    }
  };


  CypherParser.C_setContext = C_setContext;

  CypherParser.prototype.c_set = function () {

    var localctx = new C_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CypherParser.RULE_c_set);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 284;
      this.match(CypherParser.SET);
      this.state = 285;
      this.setItem();
      this.state = 290;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__1) {
        this.state = 286;
        this.match(CypherParser.T__1);
        this.state = 287;
        this.setItem();
        this.state = 292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SetItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setItem;
    return this;
  }

  SetItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SetItemContext.prototype.constructor = SetItemContext;

  SetItemContext.prototype.propertyExpression = function () {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  };

  SetItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  SetItemContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  SetItemContext.prototype.nodeLabels = function () {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  };

  SetItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSetItem(this);
    }
  };

  SetItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSetItem(this);
    }
  };


  CypherParser.SetItemContext = SetItemContext;

  CypherParser.prototype.setItem = function () {

    var localctx = new SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CypherParser.RULE_setItem);
    try {
      this.state = 308;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 293;
          this.propertyExpression();
          this.state = 294;
          this.match(CypherParser.T__2);
          this.state = 295;
          this.expression();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 297;
          this.variable();
          this.state = 298;
          this.match(CypherParser.T__2);
          this.state = 299;
          this.expression();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 301;
          this.variable();
          this.state = 302;
          this.match(CypherParser.T__3);
          this.state = 303;
          this.expression();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 305;
          this.variable();
          this.state = 306;
          this.nodeLabels();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_deleteContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_delete;
    return this;
  }

  C_deleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_deleteContext.prototype.constructor = C_deleteContext;

  C_deleteContext.prototype.DELETE = function () {
    return this.getToken(CypherParser.DELETE, 0);
  };

  C_deleteContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  C_deleteContext.prototype.DETACH = function () {
    return this.getToken(CypherParser.DETACH, 0);
  };

  C_deleteContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  C_deleteContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_delete(this);
    }
  };

  C_deleteContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_delete(this);
    }
  };


  CypherParser.C_deleteContext = C_deleteContext;

  CypherParser.prototype.c_delete = function () {

    var localctx = new C_deleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CypherParser.RULE_c_delete);
    var _la = 0; // Token type
    try {
      this.state = 330;
      switch (this._input.LA(1)) {
        case CypherParser.DELETE:
          this.enterOuterAlt(localctx, 1);
          this.state = 310;
          this.match(CypherParser.DELETE);
          this.state = 311;
          this.expression();
          this.state = 316;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CypherParser.T__1) {
            this.state = 312;
            this.match(CypherParser.T__1);
            this.state = 313;
            this.expression();
            this.state = 318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        case CypherParser.DETACH:
          this.enterOuterAlt(localctx, 2);
          this.state = 319;
          this.match(CypherParser.DETACH);
          this.state = 320;
          this.sp();
          this.state = 321;
          this.match(CypherParser.DELETE);
          this.state = 322;
          this.expression();
          this.state = 327;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CypherParser.T__1) {
            this.state = 323;
            this.match(CypherParser.T__1);
            this.state = 324;
            this.expression();
            this.state = 329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RemoveContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_remove;
    return this;
  }

  RemoveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RemoveContext.prototype.constructor = RemoveContext;

  RemoveContext.prototype.REMOVE = function () {
    return this.getToken(CypherParser.REMOVE, 0);
  };

  RemoveContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  RemoveContext.prototype.removeItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RemoveItemContext);
    } else {
      return this.getTypedRuleContext(RemoveItemContext, i);
    }
  };

  RemoveContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RemoveContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRemove(this);
    }
  };

  RemoveContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRemove(this);
    }
  };


  CypherParser.RemoveContext = RemoveContext;

  CypherParser.prototype.remove = function () {

    var localctx = new RemoveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CypherParser.RULE_remove);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 332;
      this.match(CypherParser.REMOVE);
      this.state = 333;
      this.sp();
      this.state = 334;
      this.removeItem();
      this.state = 342;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 14, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 335;
          this.ws();
          this.state = 336;
          this.match(CypherParser.T__1);
          this.state = 337;
          this.ws();
          this.state = 338;
          this.removeItem();
        }
        this.state = 344;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 14, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RemoveItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeItem;
    return this;
  }

  RemoveItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RemoveItemContext.prototype.constructor = RemoveItemContext;

  RemoveItemContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  RemoveItemContext.prototype.nodeLabels = function () {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  };

  RemoveItemContext.prototype.propertyExpression = function () {
    return this.getTypedRuleContext(PropertyExpressionContext, 0);
  };

  RemoveItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRemoveItem(this);
    }
  };

  RemoveItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRemoveItem(this);
    }
  };


  CypherParser.RemoveItemContext = RemoveItemContext;

  CypherParser.prototype.removeItem = function () {

    var localctx = new RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CypherParser.RULE_removeItem);
    try {
      this.state = 349;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 345;
          this.variable();
          this.state = 346;
          this.nodeLabels();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 348;
          this.propertyExpression();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_withContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_with;
    return this;
  }

  C_withContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_withContext.prototype.constructor = C_withContext;

  C_withContext.prototype.WITH = function () {
    return this.getToken(CypherParser.WITH, 0);
  };

  C_withContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  C_withContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  C_withContext.prototype.c_returnBody = function () {
    return this.getTypedRuleContext(C_returnBodyContext, 0);
  };

  C_withContext.prototype.where = function () {
    return this.getTypedRuleContext(WhereContext, 0);
  };

  C_withContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_with(this);
    }
  };

  C_withContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_with(this);
    }
  };


  CypherParser.C_withContext = C_withContext;

  CypherParser.prototype.c_with = function () {

    var localctx = new C_withContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CypherParser.RULE_c_with);
    var _la = 0; // Token type
    try {
      this.state = 364;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 351;
          this.match(CypherParser.WITH);
          this.state = 352;
          this.match(CypherParser.DISTINCT);
          this.state = 353;
          this.sp();
          this.state = 354;
          this.c_returnBody();
          this.state = 356;
          _la = this._input.LA(1);
          if (_la === CypherParser.WHERE) {
            this.state = 355;
            this.where();
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 358;
          this.match(CypherParser.WITH);
          this.state = 359;
          this.sp();
          this.state = 360;
          this.c_returnBody();
          this.state = 362;
          _la = this._input.LA(1);
          if (_la === CypherParser.WHERE) {
            this.state = 361;
            this.where();
          }

          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_return;
    return this;
  }

  C_returnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnContext.prototype.constructor = C_returnContext;

  C_returnContext.prototype.RETURN = function () {
    return this.getToken(CypherParser.RETURN, 0);
  };

  C_returnContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_returnContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  C_returnContext.prototype.c_returnBody = function () {
    return this.getTypedRuleContext(C_returnBodyContext, 0);
  };

  C_returnContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_return(this);
    }
  };

  C_returnContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_return(this);
    }
  };


  CypherParser.C_returnContext = C_returnContext;

  CypherParser.prototype.c_return = function () {

    var localctx = new C_returnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CypherParser.RULE_c_return);
    try {
      this.state = 376;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 366;
          this.match(CypherParser.RETURN);
          this.state = 367;
          this.sp();
          this.state = 368;
          this.match(CypherParser.DISTINCT);
          this.state = 369;
          this.sp();
          this.state = 370;
          this.c_returnBody();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 372;
          this.match(CypherParser.RETURN);
          this.state = 373;
          this.sp();
          this.state = 374;
          this.c_returnBody();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnBodyContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_returnBody;
    return this;
  }

  C_returnBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnBodyContext.prototype.constructor = C_returnBodyContext;

  C_returnBodyContext.prototype.c_returnItems = function () {
    return this.getTypedRuleContext(C_returnItemsContext, 0);
  };

  C_returnBodyContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_returnBodyContext.prototype.order = function () {
    return this.getTypedRuleContext(OrderContext, 0);
  };

  C_returnBodyContext.prototype.skip = function () {
    return this.getTypedRuleContext(SkipContext, 0);
  };

  C_returnBodyContext.prototype.limit = function () {
    return this.getTypedRuleContext(LimitContext, 0);
  };

  C_returnBodyContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_returnBody(this);
    }
  };

  C_returnBodyContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_returnBody(this);
    }
  };


  CypherParser.C_returnBodyContext = C_returnBodyContext;

  CypherParser.prototype.c_returnBody = function () {

    var localctx = new C_returnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CypherParser.RULE_c_returnBody);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 378;
      this.c_returnItems();
      this.state = 382;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
      if (la_ === 1) {
        this.state = 379;
        this.sp();
        this.state = 380;
        this.order();

      }
      this.state = 387;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
      if (la_ === 1) {
        this.state = 384;
        this.sp();
        this.state = 385;
        this.skip();

      }
      this.state = 392;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
      if (la_ === 1) {
        this.state = 389;
        this.sp();
        this.state = 390;
        this.limit();

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnItemsContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_returnItems;
    return this;
  }

  C_returnItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnItemsContext.prototype.constructor = C_returnItemsContext;

  C_returnItemsContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  C_returnItemsContext.prototype.c_returnItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(C_returnItemContext);
    } else {
      return this.getTypedRuleContext(C_returnItemContext, i);
    }
  };

  C_returnItemsContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_returnItems(this);
    }
  };

  C_returnItemsContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_returnItems(this);
    }
  };


  CypherParser.C_returnItemsContext = C_returnItemsContext;

  CypherParser.prototype.c_returnItems = function () {

    var localctx = new C_returnItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CypherParser.RULE_c_returnItems);
    try {
      this.state = 416;
      switch (this._input.LA(1)) {
        case CypherParser.T__4:
          this.enterOuterAlt(localctx, 1);
          this.state = 394;
          this.match(CypherParser.T__4);
          this.state = 402;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 23, this._ctx)
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 395;
              this.ws();
              this.state = 396;
              this.match(CypherParser.T__1);
              this.state = 397;
              this.ws();
              this.state = 398;
              this.c_returnItem();
            }
            this.state = 404;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 23, this._ctx);
          }

          break;
        case CypherParser.T__5:
        case CypherParser.T__7:
        case CypherParser.T__13:
        case CypherParser.T__14:
        case CypherParser.T__25:
        case CypherParser.T__27:
        case CypherParser.T__29:
        case CypherParser.T__30:
        case CypherParser.T__31:
        case CypherParser.T__32:
        case CypherParser.T__33:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
        case CypherParser.T__38:
        case CypherParser.StringLiteral:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DELETE:
        case CypherParser.DETACH:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.L_0X:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
        case CypherParser.WHITESPACE:
          this.enterOuterAlt(localctx, 2);
          this.state = 405;
          this.c_returnItem();
          this.state = 413;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 24, this._ctx)
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 406;
              this.ws();
              this.state = 407;
              this.match(CypherParser.T__1);
              this.state = 408;
              this.ws();
              this.state = 409;
              this.c_returnItem();
            }
            this.state = 415;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 24, this._ctx);
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function C_returnItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_c_returnItem;
    return this;
  }

  C_returnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  C_returnItemContext.prototype.constructor = C_returnItemContext;

  C_returnItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  C_returnItemContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  C_returnItemContext.prototype.AS = function () {
    return this.getToken(CypherParser.AS, 0);
  };

  C_returnItemContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  C_returnItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterC_returnItem(this);
    }
  };

  C_returnItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitC_returnItem(this);
    }
  };


  CypherParser.C_returnItemContext = C_returnItemContext;

  CypherParser.prototype.c_returnItem = function () {

    var localctx = new C_returnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CypherParser.RULE_c_returnItem);
    try {
      this.state = 425;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 418;
          this.expression();
          this.state = 419;
          this.sp();
          this.state = 420;
          this.match(CypherParser.AS);
          this.state = 421;
          this.sp();
          this.state = 422;
          this.variable();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 424;
          this.expression();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OrderContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_order;
    return this;
  }

  OrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OrderContext.prototype.constructor = OrderContext;

  OrderContext.prototype.ORDER = function () {
    return this.getToken(CypherParser.ORDER, 0);
  };

  OrderContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  OrderContext.prototype.BY = function () {
    return this.getToken(CypherParser.BY, 0);
  };

  OrderContext.prototype.sortItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SortItemContext);
    } else {
      return this.getTypedRuleContext(SortItemContext, i);
    }
  };

  OrderContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  OrderContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOrder(this);
    }
  };

  OrderContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOrder(this);
    }
  };


  CypherParser.OrderContext = OrderContext;

  CypherParser.prototype.order = function () {

    var localctx = new OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CypherParser.RULE_order);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 427;
      this.match(CypherParser.ORDER);
      this.state = 428;
      this.sp();
      this.state = 429;
      this.match(CypherParser.BY);
      this.state = 430;
      this.sp();
      this.state = 431;
      this.sortItem();
      this.state = 438;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__1) {
        this.state = 432;
        this.match(CypherParser.T__1);
        this.state = 433;
        this.ws();
        this.state = 434;
        this.sortItem();
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SkipContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_skip;
    return this;
  }

  SkipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SkipContext.prototype.constructor = SkipContext;

  SkipContext.prototype.L_SKIP = function () {
    return this.getToken(CypherParser.L_SKIP, 0);
  };

  SkipContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  SkipContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  SkipContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSkip(this);
    }
  };

  SkipContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSkip(this);
    }
  };


  CypherParser.SkipContext = SkipContext;

  CypherParser.prototype.skip = function () {

    var localctx = new SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CypherParser.RULE_skip);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 441;
      this.match(CypherParser.L_SKIP);
      this.state = 442;
      this.sp();
      this.state = 443;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function LimitContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_limit;
    return this;
  }

  LimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  LimitContext.prototype.constructor = LimitContext;

  LimitContext.prototype.LIMIT = function () {
    return this.getToken(CypherParser.LIMIT, 0);
  };

  LimitContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  LimitContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  LimitContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterLimit(this);
    }
  };

  LimitContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitLimit(this);
    }
  };


  CypherParser.LimitContext = LimitContext;

  CypherParser.prototype.limit = function () {

    var localctx = new LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CypherParser.RULE_limit);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 445;
      this.match(CypherParser.LIMIT);
      this.state = 446;
      this.sp();
      this.state = 447;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SortItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sortItem;
    return this;
  }

  SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SortItemContext.prototype.constructor = SortItemContext;

  SortItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  SortItemContext.prototype.DESCENDING = function () {
    return this.getToken(CypherParser.DESCENDING, 0);
  };

  SortItemContext.prototype.DESC = function () {
    return this.getToken(CypherParser.DESC, 0);
  };

  SortItemContext.prototype.ASCENDING = function () {
    return this.getToken(CypherParser.ASCENDING, 0);
  };

  SortItemContext.prototype.ASC = function () {
    return this.getToken(CypherParser.ASC, 0);
  };

  SortItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSortItem(this);
    }
  };

  SortItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSortItem(this);
    }
  };


  CypherParser.SortItemContext = SortItemContext;

  CypherParser.prototype.sortItem = function () {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CypherParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
      this.state = 456;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 449;
          this.expression();
          this.state = 450;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.DESCENDING || _la === CypherParser.DESC)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 452;
          this.expression();
          this.state = 454;
          _la = this._input.LA(1);
          if (_la === CypherParser.ASCENDING || _la === CypherParser.ASC) {
            this.state = 453;
            _la = this._input.LA(1);
            if (!(_la === CypherParser.ASCENDING || _la === CypherParser.ASC)) {
              this._errHandler.recoverInline(this);
            }
            else {
              this.consume();
            }
          }

          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function WhereContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_where;
    return this;
  }

  WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  WhereContext.prototype.constructor = WhereContext;

  WhereContext.prototype.WHERE = function () {
    return this.getToken(CypherParser.WHERE, 0);
  };

  WhereContext.prototype.sp = function () {
    return this.getTypedRuleContext(SpContext, 0);
  };

  WhereContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  WhereContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterWhere(this);
    }
  };

  WhereContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitWhere(this);
    }
  };


  CypherParser.WhereContext = WhereContext;

  CypherParser.prototype.where = function () {

    var localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CypherParser.RULE_where);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 458;
      this.match(CypherParser.WHERE);
      this.state = 459;
      this.sp();
      this.state = 460;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pattern;
    return this;
  }

  PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternContext.prototype.constructor = PatternContext;

  PatternContext.prototype.patternPart = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PatternPartContext);
    } else {
      return this.getTypedRuleContext(PatternPartContext, i);
    }
  };

  PatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPattern(this);
    }
  };

  PatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPattern(this);
    }
  };


  CypherParser.PatternContext = PatternContext;

  CypherParser.prototype.pattern = function () {

    var localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CypherParser.RULE_pattern);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 462;
      this.patternPart();
      this.state = 467;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__1) {
        this.state = 463;
        this.match(CypherParser.T__1);
        this.state = 464;
        this.patternPart();
        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternPartContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternPart;
    return this;
  }

  PatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternPartContext.prototype.constructor = PatternPartContext;

  PatternPartContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  PatternPartContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PatternPartContext.prototype.anonymousPatternPart = function () {
    return this.getTypedRuleContext(AnonymousPatternPartContext, 0);
  };

  PatternPartContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternPart(this);
    }
  };

  PatternPartContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternPart(this);
    }
  };


  CypherParser.PatternPartContext = PatternPartContext;

  CypherParser.prototype.patternPart = function () {

    var localctx = new PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CypherParser.RULE_patternPart);
    try {
      this.state = 477;
      switch (this._input.LA(1)) {
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DELETE:
        case CypherParser.DETACH:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.L_0X:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 1);
          this.state = 470;
          this.variable();
          this.state = 471;
          this.ws();
          this.state = 472;
          this.match(CypherParser.T__2);
          this.state = 473;
          this.ws();
          this.state = 474;
          this.anonymousPatternPart();
          break;
        case CypherParser.T__5:
          this.enterOuterAlt(localctx, 2);
          this.state = 476;
          this.anonymousPatternPart();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function AnonymousPatternPartContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anonymousPatternPart;
    return this;
  }

  AnonymousPatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  AnonymousPatternPartContext.prototype.constructor = AnonymousPatternPartContext;

  AnonymousPatternPartContext.prototype.patternElement = function () {
    return this.getTypedRuleContext(PatternElementContext, 0);
  };

  AnonymousPatternPartContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterAnonymousPatternPart(this);
    }
  };

  AnonymousPatternPartContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitAnonymousPatternPart(this);
    }
  };


  CypherParser.AnonymousPatternPartContext = AnonymousPatternPartContext;

  CypherParser.prototype.anonymousPatternPart = function () {

    var localctx = new AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CypherParser.RULE_anonymousPatternPart);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 479;
      this.patternElement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternElementContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElement;
    return this;
  }

  PatternElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternElementContext.prototype.constructor = PatternElementContext;

  PatternElementContext.prototype.nodePattern = function () {
    return this.getTypedRuleContext(NodePatternContext, 0);
  };

  PatternElementContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PatternElementContext.prototype.patternElementChain = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
      return this.getTypedRuleContext(PatternElementChainContext, i);
    }
  };

  PatternElementContext.prototype.patternElement = function () {
    return this.getTypedRuleContext(PatternElementContext, 0);
  };

  PatternElementContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternElement(this);
    }
  };

  PatternElementContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternElement(this);
    }
  };


  CypherParser.PatternElementContext = PatternElementContext;

  CypherParser.prototype.patternElement = function () {

    var localctx = new PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CypherParser.RULE_patternElement);
    try {
      this.state = 494;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 481;
          this.nodePattern();
          this.state = 487;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 32, this._ctx)
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 482;
              this.ws();
              this.state = 483;
              this.patternElementChain();
            }
            this.state = 489;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 32, this._ctx);
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 490;
          this.match(CypherParser.T__5);
          this.state = 491;
          this.patternElement();
          this.state = 492;
          this.match(CypherParser.T__6);
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NodePatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePattern;
    return this;
  }

  NodePatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NodePatternContext.prototype.constructor = NodePatternContext;

  NodePatternContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  NodePatternContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  NodePatternContext.prototype.nodeLabels = function () {
    return this.getTypedRuleContext(NodeLabelsContext, 0);
  };

  NodePatternContext.prototype.properties = function () {
    return this.getTypedRuleContext(PropertiesContext, 0);
  };

  NodePatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodePattern(this);
    }
  };

  NodePatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodePattern(this);
    }
  };


  CypherParser.NodePatternContext = NodePatternContext;

  CypherParser.prototype.nodePattern = function () {

    var localctx = new NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CypherParser.RULE_nodePattern);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 496;
      this.match(CypherParser.T__5);
      this.state = 497;
      this.ws();
      this.state = 501;
      _la = this._input.LA(1);
      if (((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0)) {
        this.state = 498;
        this.variable();
        this.state = 499;
        this.ws();
      }

      this.state = 506;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__10) {
        this.state = 503;
        this.nodeLabels();
        this.state = 504;
        this.ws();
      }

      this.state = 511;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__27) {
        this.state = 508;
        this.properties();
        this.state = 509;
        this.ws();
      }

      this.state = 513;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PatternElementChainContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElementChain;
    return this;
  }

  PatternElementChainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PatternElementChainContext.prototype.constructor = PatternElementChainContext;

  PatternElementChainContext.prototype.relationshipPattern = function () {
    return this.getTypedRuleContext(RelationshipPatternContext, 0);
  };

  PatternElementChainContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  PatternElementChainContext.prototype.nodePattern = function () {
    return this.getTypedRuleContext(NodePatternContext, 0);
  };

  PatternElementChainContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPatternElementChain(this);
    }
  };

  PatternElementChainContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPatternElementChain(this);
    }
  };


  CypherParser.PatternElementChainContext = PatternElementChainContext;

  CypherParser.prototype.patternElementChain = function () {

    var localctx = new PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CypherParser.RULE_patternElementChain);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 515;
      this.relationshipPattern();
      this.state = 516;
      this.ws();
      this.state = 517;
      this.nodePattern();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipPatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPattern;
    return this;
  }

  RelationshipPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipPatternContext.prototype.constructor = RelationshipPatternContext;

  RelationshipPatternContext.prototype.leftArrowHead = function () {
    return this.getTypedRuleContext(LeftArrowHeadContext, 0);
  };

  RelationshipPatternContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RelationshipPatternContext.prototype.dash = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DashContext);
    } else {
      return this.getTypedRuleContext(DashContext, i);
    }
  };

  RelationshipPatternContext.prototype.rightArrowHead = function () {
    return this.getTypedRuleContext(RightArrowHeadContext, 0);
  };

  RelationshipPatternContext.prototype.relationshipDetail = function () {
    return this.getTypedRuleContext(RelationshipDetailContext, 0);
  };

  RelationshipPatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipPattern(this);
    }
  };

  RelationshipPatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipPattern(this);
    }
  };


  CypherParser.RelationshipPatternContext = RelationshipPatternContext;

  CypherParser.prototype.relationshipPattern = function () {

    var localctx = new RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CypherParser.RULE_relationshipPattern);
    var _la = 0; // Token type
    try {
      this.state = 559;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 519;
          this.leftArrowHead();
          this.state = 520;
          this.ws();
          this.state = 521;
          this.dash();
          this.state = 522;
          this.ws();
          this.state = 524;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 523;
            this.relationshipDetail();
          }

          this.state = 526;
          this.ws();
          this.state = 527;
          this.dash();
          this.state = 528;
          this.ws();
          this.state = 529;
          this.rightArrowHead();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 531;
          this.leftArrowHead();
          this.state = 532;
          this.ws();
          this.state = 533;
          this.dash();
          this.state = 534;
          this.ws();
          this.state = 536;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 535;
            this.relationshipDetail();
          }

          this.state = 538;
          this.ws();
          this.state = 539;
          this.dash();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 541;
          this.dash();
          this.state = 542;
          this.ws();
          this.state = 544;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 543;
            this.relationshipDetail();
          }

          this.state = 546;
          this.ws();
          this.state = 547;
          this.dash();
          this.state = 548;
          this.ws();
          this.state = 549;
          this.rightArrowHead();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 551;
          this.dash();
          this.state = 552;
          this.ws();
          this.state = 554;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__7) {
            this.state = 553;
            this.relationshipDetail();
          }

          this.state = 556;
          this.ws();
          this.state = 557;
          this.dash();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipDetailContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipDetail;
    return this;
  }

  RelationshipDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipDetailContext.prototype.constructor = RelationshipDetailContext;

  RelationshipDetailContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  RelationshipDetailContext.prototype.relationshipTypes = function () {
    return this.getTypedRuleContext(RelationshipTypesContext, 0);
  };

  RelationshipDetailContext.prototype.properties = function () {
    return this.getTypedRuleContext(PropertiesContext, 0);
  };

  RelationshipDetailContext.prototype.rangeLiteral = function () {
    return this.getTypedRuleContext(RangeLiteralContext, 0);
  };

  RelationshipDetailContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipDetail(this);
    }
  };

  RelationshipDetailContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipDetail(this);
    }
  };


  CypherParser.RelationshipDetailContext = RelationshipDetailContext;

  CypherParser.prototype.relationshipDetail = function () {

    var localctx = new RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CypherParser.RULE_relationshipDetail);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 561;
      this.match(CypherParser.T__7);
      this.state = 563;
      _la = this._input.LA(1);
      if (((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0)) {
        this.state = 562;
        this.variable();
      }

      this.state = 566;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__8) {
        this.state = 565;
        this.match(CypherParser.T__8);
      }

      this.state = 569;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__10) {
        this.state = 568;
        this.relationshipTypes();
      }

      this.state = 575;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__4) {
        this.state = 571;
        this.match(CypherParser.T__4);
        this.state = 573;
        _la = this._input.LA(1);
        if (((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (CypherParser.T__12 - 13)) | (1 << (CypherParser.T__29 - 13)) | (1 << (CypherParser.T__30 - 13)) | (1 << (CypherParser.T__31 - 13)) | (1 << (CypherParser.T__32 - 13)) | (1 << (CypherParser.T__33 - 13)) | (1 << (CypherParser.T__34 - 13)) | (1 << (CypherParser.T__35 - 13)) | (1 << (CypherParser.T__36 - 13)) | (1 << (CypherParser.T__37 - 13)) | (1 << (CypherParser.T__38 - 13)))) !== 0)) {
          this.state = 572;
          this.rangeLiteral();
        }

      }

      this.state = 578;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__27) {
        this.state = 577;
        this.properties();
      }

      this.state = 580;
      this.match(CypherParser.T__9);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertiesContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_properties;
    return this;
  }

  PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertiesContext.prototype.constructor = PropertiesContext;

  PropertiesContext.prototype.mapLiteral = function () {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  };

  PropertiesContext.prototype.parameter = function () {
    return this.getTypedRuleContext(ParameterContext, 0);
  };

  PropertiesContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterProperties(this);
    }
  };

  PropertiesContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitProperties(this);
    }
  };


  CypherParser.PropertiesContext = PropertiesContext;

  CypherParser.prototype.properties = function () {

    var localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CypherParser.RULE_properties);
    try {
      this.state = 584;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 582;
          this.mapLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 583;
          this.parameter();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipTypesContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypes;
    return this;
  }

  RelationshipTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipTypesContext.prototype.constructor = RelationshipTypesContext;

  RelationshipTypesContext.prototype.relTypeName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RelTypeNameContext);
    } else {
      return this.getTypedRuleContext(RelTypeNameContext, i);
    }
  };

  RelationshipTypesContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RelationshipTypesContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipTypes(this);
    }
  };

  RelationshipTypesContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipTypes(this);
    }
  };


  CypherParser.RelationshipTypesContext = RelationshipTypesContext;

  CypherParser.prototype.relationshipTypes = function () {

    var localctx = new RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CypherParser.RULE_relationshipTypes);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 586;
      this.match(CypherParser.T__10);
      this.state = 587;
      this.relTypeName();
      this.state = 598;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.T__11 || _la === CypherParser.WHITESPACE) {
        this.state = 588;
        this.ws();
        this.state = 589;
        this.match(CypherParser.T__11);
        this.state = 591;
        _la = this._input.LA(1);
        if (_la === CypherParser.T__10) {
          this.state = 590;
          this.match(CypherParser.T__10);
        }

        this.state = 593;
        this.ws();
        this.state = 594;
        this.relTypeName();
        this.state = 600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NodeLabelsContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabels;
    return this;
  }

  NodeLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NodeLabelsContext.prototype.constructor = NodeLabelsContext;

  NodeLabelsContext.prototype.nodeLabel = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NodeLabelContext);
    } else {
      return this.getTypedRuleContext(NodeLabelContext, i);
    }
  };

  NodeLabelsContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  NodeLabelsContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLabels(this);
    }
  };

  NodeLabelsContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLabels(this);
    }
  };


  CypherParser.NodeLabelsContext = NodeLabelsContext;

  CypherParser.prototype.nodeLabels = function () {

    var localctx = new NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CypherParser.RULE_nodeLabels);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 601;
      this.nodeLabel();
      this.state = 607;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 602;
          this.ws();
          this.state = 603;
          this.nodeLabel();
        }
        this.state = 609;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NodeLabelContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabel;
    return this;
  }

  NodeLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NodeLabelContext.prototype.constructor = NodeLabelContext;

  NodeLabelContext.prototype.labelName = function () {
    return this.getTypedRuleContext(LabelNameContext, 0);
  };

  NodeLabelContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNodeLabel(this);
    }
  };

  NodeLabelContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNodeLabel(this);
    }
  };


  CypherParser.NodeLabelContext = NodeLabelContext;

  CypherParser.prototype.nodeLabel = function () {

    var localctx = new NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CypherParser.RULE_nodeLabel);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 610;
      this.match(CypherParser.T__10);
      this.state = 611;
      this.labelName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RangeLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rangeLiteral;
    return this;
  }

  RangeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RangeLiteralContext.prototype.constructor = RangeLiteralContext;

  RangeLiteralContext.prototype.unsignedIntegerLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(UnsignedIntegerLiteralContext);
    } else {
      return this.getTypedRuleContext(UnsignedIntegerLiteralContext, i);
    }
  };

  RangeLiteralContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RangeLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRangeLiteral(this);
    }
  };

  RangeLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRangeLiteral(this);
    }
  };


  CypherParser.RangeLiteralContext = RangeLiteralContext;

  CypherParser.prototype.rangeLiteral = function () {

    var localctx = new RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CypherParser.RULE_rangeLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 616;
      _la = this._input.LA(1);
      if (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0)) {
        this.state = 613;
        this.unsignedIntegerLiteral();
        this.state = 614;
        this.ws();
      }

      this.state = 618;
      this.match(CypherParser.T__12);
      this.state = 622;
      _la = this._input.LA(1);
      if (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0) || _la === CypherParser.WHITESPACE) {
        this.state = 619;
        this.ws();
        this.state = 620;
        this.unsignedIntegerLiteral();
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function LabelNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_labelName;
    return this;
  }

  LabelNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  LabelNameContext.prototype.constructor = LabelNameContext;

  LabelNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  LabelNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterLabelName(this);
    }
  };

  LabelNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitLabelName(this);
    }
  };


  CypherParser.LabelNameContext = LabelNameContext;

  CypherParser.prototype.labelName = function () {

    var localctx = new LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CypherParser.RULE_labelName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 624;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelTypeNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relTypeName;
    return this;
  }

  RelTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelTypeNameContext.prototype.constructor = RelTypeNameContext;

  RelTypeNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  RelTypeNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelTypeName(this);
    }
  };

  RelTypeNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelTypeName(this);
    }
  };


  CypherParser.RelTypeNameContext = RelTypeNameContext;

  CypherParser.prototype.relTypeName = function () {

    var localctx = new RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CypherParser.RULE_relTypeName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 626;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression;
    return this;
  }

  ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ExpressionContext.prototype.constructor = ExpressionContext;

  ExpressionContext.prototype.expression12 = function () {
    return this.getTypedRuleContext(Expression12Context, 0);
  };

  ExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression(this);
    }
  };

  ExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression(this);
    }
  };


  CypherParser.ExpressionContext = ExpressionContext;

  CypherParser.prototype.expression = function () {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CypherParser.RULE_expression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 628;
      this.expression12();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression12Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression12;
    return this;
  }

  Expression12Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression12Context.prototype.constructor = Expression12Context;

  Expression12Context.prototype.expression11 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression11Context);
    } else {
      return this.getTypedRuleContext(Expression11Context, i);
    }
  };

  Expression12Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression12Context.prototype.OR = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.OR);
    } else {
      return this.getToken(CypherParser.OR, i);
    }
  };


  Expression12Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression12(this);
    }
  };

  Expression12Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression12(this);
    }
  };


  CypherParser.Expression12Context = Expression12Context;

  CypherParser.prototype.expression12 = function () {

    var localctx = new Expression12Context(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CypherParser.RULE_expression12);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 630;
      this.expression11();
      this.state = 638;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 54, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 631;
          this.sp();
          this.state = 632;
          this.match(CypherParser.OR);
          this.state = 633;
          this.sp();
          this.state = 634;
          this.expression11();
        }
        this.state = 640;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression11Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression11;
    return this;
  }

  Expression11Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression11Context.prototype.constructor = Expression11Context;

  Expression11Context.prototype.expression10 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression10Context);
    } else {
      return this.getTypedRuleContext(Expression10Context, i);
    }
  };

  Expression11Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression11Context.prototype.XOR = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.XOR);
    } else {
      return this.getToken(CypherParser.XOR, i);
    }
  };


  Expression11Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression11(this);
    }
  };

  Expression11Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression11(this);
    }
  };


  CypherParser.Expression11Context = Expression11Context;

  CypherParser.prototype.expression11 = function () {

    var localctx = new Expression11Context(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CypherParser.RULE_expression11);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 641;
      this.expression10();
      this.state = 649;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 55, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 642;
          this.sp();
          this.state = 643;
          this.match(CypherParser.XOR);
          this.state = 644;
          this.sp();
          this.state = 645;
          this.expression10();
        }
        this.state = 651;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression10Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression10;
    return this;
  }

  Expression10Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression10Context.prototype.constructor = Expression10Context;

  Expression10Context.prototype.expression9 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression9Context);
    } else {
      return this.getTypedRuleContext(Expression9Context, i);
    }
  };

  Expression10Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression10Context.prototype.AND = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.AND);
    } else {
      return this.getToken(CypherParser.AND, i);
    }
  };


  Expression10Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression10(this);
    }
  };

  Expression10Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression10(this);
    }
  };


  CypherParser.Expression10Context = Expression10Context;

  CypherParser.prototype.expression10 = function () {

    var localctx = new Expression10Context(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CypherParser.RULE_expression10);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 652;
      this.expression9();
      this.state = 660;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 56, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 653;
          this.sp();
          this.state = 654;
          this.match(CypherParser.AND);
          this.state = 655;
          this.sp();
          this.state = 656;
          this.expression9();
        }
        this.state = 662;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 56, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression9Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression9;
    return this;
  }

  Expression9Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression9Context.prototype.constructor = Expression9Context;

  Expression9Context.prototype.expression8 = function () {
    return this.getTypedRuleContext(Expression8Context, 0);
  };

  Expression9Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression9Context.prototype.NOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.NOT);
    } else {
      return this.getToken(CypherParser.NOT, i);
    }
  };


  Expression9Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression9(this);
    }
  };

  Expression9Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression9(this);
    }
  };


  CypherParser.Expression9Context = Expression9Context;

  CypherParser.prototype.expression9 = function () {

    var localctx = new Expression9Context(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CypherParser.RULE_expression9);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 669;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CypherParser.WHITESPACE) {
        this.state = 663;
        this.sp();
        this.state = 664;
        this.match(CypherParser.NOT);
        this.state = 665;
        this.sp();
        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 672;
      this.expression8();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression8Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression8;
    return this;
  }

  Expression8Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression8Context.prototype.constructor = Expression8Context;

  Expression8Context.prototype.expression7 = function () {
    return this.getTypedRuleContext(Expression7Context, 0);
  };

  Expression8Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression8Context.prototype.partialComparisonExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartialComparisonExpressionContext);
    } else {
      return this.getTypedRuleContext(PartialComparisonExpressionContext, i);
    }
  };

  Expression8Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression8(this);
    }
  };

  Expression8Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression8(this);
    }
  };


  CypherParser.Expression8Context = Expression8Context;

  CypherParser.prototype.expression8 = function () {

    var localctx = new Expression8Context(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CypherParser.RULE_expression8);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 674;
      this.expression7();
      this.state = 680;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 675;
          this.ws();
          this.state = 676;
          this.partialComparisonExpression();
        }
        this.state = 682;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression7Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression7;
    return this;
  }

  Expression7Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression7Context.prototype.constructor = Expression7Context;

  Expression7Context.prototype.expression6 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression6Context);
    } else {
      return this.getTypedRuleContext(Expression6Context, i);
    }
  };

  Expression7Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression7Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression7(this);
    }
  };

  Expression7Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression7(this);
    }
  };


  CypherParser.Expression7Context = Expression7Context;

  CypherParser.prototype.expression7 = function () {

    var localctx = new Expression7Context(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CypherParser.RULE_expression7);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 683;
      this.expression6();
      this.state = 696;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 60, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 694;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
          switch (la_) {
            case 1:
              this.state = 684;
              this.ws();
              this.state = 685;
              this.match(CypherParser.T__13);
              this.state = 686;
              this.ws();
              this.state = 687;
              this.expression6();
              break;

            case 2:
              this.state = 689;
              this.ws();
              this.state = 690;
              this.match(CypherParser.T__14);
              this.state = 691;
              this.ws();
              this.state = 692;
              this.expression6();
              break;

          }
        }
        this.state = 698;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 60, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression6Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression6;
    return this;
  }

  Expression6Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression6Context.prototype.constructor = Expression6Context;

  Expression6Context.prototype.expression5 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression5Context);
    } else {
      return this.getTypedRuleContext(Expression5Context, i);
    }
  };

  Expression6Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression6Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression6(this);
    }
  };

  Expression6Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression6(this);
    }
  };


  CypherParser.Expression6Context = Expression6Context;

  CypherParser.prototype.expression6 = function () {

    var localctx = new Expression6Context(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CypherParser.RULE_expression6);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 699;
      this.expression5();
      this.state = 717;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 62, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 715;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
          switch (la_) {
            case 1:
              this.state = 700;
              this.ws();
              this.state = 701;
              this.match(CypherParser.T__4);
              this.state = 702;
              this.ws();
              this.state = 703;
              this.expression5();
              break;

            case 2:
              this.state = 705;
              this.ws();
              this.state = 706;
              this.match(CypherParser.T__15);
              this.state = 707;
              this.ws();
              this.state = 708;
              this.expression5();
              break;

            case 3:
              this.state = 710;
              this.ws();
              this.state = 711;
              this.match(CypherParser.T__16);
              this.state = 712;
              this.ws();
              this.state = 713;
              this.expression5();
              break;

          }
        }
        this.state = 719;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression5Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression5;
    return this;
  }

  Expression5Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression5Context.prototype.constructor = Expression5Context;

  Expression5Context.prototype.expression4 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression4Context);
    } else {
      return this.getTypedRuleContext(Expression4Context, i);
    }
  };

  Expression5Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression5Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression5(this);
    }
  };

  Expression5Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression5(this);
    }
  };


  CypherParser.Expression5Context = Expression5Context;

  CypherParser.prototype.expression5 = function () {

    var localctx = new Expression5Context(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CypherParser.RULE_expression5);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 720;
      this.expression4();
      this.state = 728;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 63, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 721;
          this.ws();
          this.state = 722;
          this.match(CypherParser.T__17);
          this.state = 723;
          this.ws();
          this.state = 724;
          this.expression4();
        }
        this.state = 730;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression4Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression4;
    return this;
  }

  Expression4Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression4Context.prototype.constructor = Expression4Context;

  Expression4Context.prototype.expression3 = function () {
    return this.getTypedRuleContext(Expression3Context, 0);
  };

  Expression4Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression4Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression4(this);
    }
  };

  Expression4Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression4(this);
    }
  };


  CypherParser.Expression4Context = Expression4Context;

  CypherParser.prototype.expression4 = function () {

    var localctx = new Expression4Context(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CypherParser.RULE_expression4);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 735;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 64, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 731;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__13 || _la === CypherParser.T__14)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          this.state = 732;
          this.ws();
        }
        this.state = 737;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
      }

      this.state = 738;
      this.expression3();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression3Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression3;
    return this;
  }

  Expression3Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression3Context.prototype.constructor = Expression3Context;

  Expression3Context.prototype.expression2 = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Expression2Context);
    } else {
      return this.getTypedRuleContext(Expression2Context, i);
    }
  };

  Expression3Context.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  Expression3Context.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  Expression3Context.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  Expression3Context.prototype.IS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.IS);
    } else {
      return this.getToken(CypherParser.IS, i);
    }
  };


  Expression3Context.prototype.NULL = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.NULL);
    } else {
      return this.getToken(CypherParser.NULL, i);
    }
  };


  Expression3Context.prototype.NOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.NOT);
    } else {
      return this.getToken(CypherParser.NOT, i);
    }
  };


  Expression3Context.prototype.IN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.IN);
    } else {
      return this.getToken(CypherParser.IN, i);
    }
  };


  Expression3Context.prototype.STARTS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.STARTS);
    } else {
      return this.getToken(CypherParser.STARTS, i);
    }
  };


  Expression3Context.prototype.WITH = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.WITH);
    } else {
      return this.getToken(CypherParser.WITH, i);
    }
  };


  Expression3Context.prototype.ENDS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.ENDS);
    } else {
      return this.getToken(CypherParser.ENDS, i);
    }
  };


  Expression3Context.prototype.CONTAINS = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.CONTAINS);
    } else {
      return this.getToken(CypherParser.CONTAINS, i);
    }
  };


  Expression3Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression3(this);
    }
  };

  Expression3Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression3(this);
    }
  };


  CypherParser.Expression3Context = Expression3Context;

  CypherParser.prototype.expression3 = function () {

    var localctx = new Expression3Context(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CypherParser.RULE_expression3);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 740;
      this.expression2();
      this.state = 795;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 69, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 793;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
          switch (la_) {
            case 1:
              this.state = 741;
              this.ws();
              this.state = 742;
              this.match(CypherParser.T__7);
              this.state = 743;
              this.expression();
              this.state = 744;
              this.match(CypherParser.T__9);
              break;

            case 2:
              this.state = 746;
              this.ws();
              this.state = 747;
              this.match(CypherParser.T__7);
              this.state = 749;
              _la = this._input.LA(1);
              if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__13) | (1 << CypherParser.T__14) | (1 << CypherParser.T__25) | (1 << CypherParser.T__27) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.T__31 - 32)) | (1 << (CypherParser.T__32 - 32)) | (1 << (CypherParser.T__33 - 32)) | (1 << (CypherParser.T__34 - 32)) | (1 << (CypherParser.T__35 - 32)) | (1 << (CypherParser.T__36 - 32)) | (1 << (CypherParser.T__37 - 32)) | (1 << (CypherParser.T__38 - 32)) | (1 << (CypherParser.StringLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)) | (1 << (CypherParser.WHITESPACE - 96)))) !== 0)) {
                this.state = 748;
                this.expression();
              }

              this.state = 751;
              this.match(CypherParser.T__12);
              this.state = 753;
              _la = this._input.LA(1);
              if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__13) | (1 << CypherParser.T__14) | (1 << CypherParser.T__25) | (1 << CypherParser.T__27) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.T__31 - 32)) | (1 << (CypherParser.T__32 - 32)) | (1 << (CypherParser.T__33 - 32)) | (1 << (CypherParser.T__34 - 32)) | (1 << (CypherParser.T__35 - 32)) | (1 << (CypherParser.T__36 - 32)) | (1 << (CypherParser.T__37 - 32)) | (1 << (CypherParser.T__38 - 32)) | (1 << (CypherParser.StringLiteral - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)) | (1 << (CypherParser.WHITESPACE - 96)))) !== 0)) {
                this.state = 752;
                this.expression();
              }

              this.state = 755;
              this.match(CypherParser.T__9);
              break;

            case 3:
              this.state = 776;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
              switch (la_) {
                case 1:
                  this.state = 757;
                  this.ws();
                  this.state = 758;
                  this.match(CypherParser.T__18);
                  break;

                case 2:
                  this.state = 760;
                  this.sp();
                  this.state = 761;
                  this.match(CypherParser.IN);
                  break;

                case 3:
                  this.state = 763;
                  this.sp();
                  this.state = 764;
                  this.match(CypherParser.STARTS);
                  this.state = 765;
                  this.sp();
                  this.state = 766;
                  this.match(CypherParser.WITH);
                  break;

                case 4:
                  this.state = 768;
                  this.sp();
                  this.state = 769;
                  this.match(CypherParser.ENDS);
                  this.state = 770;
                  this.sp();
                  this.state = 771;
                  this.match(CypherParser.WITH);
                  break;

                case 5:
                  this.state = 773;
                  this.sp();
                  this.state = 774;
                  this.match(CypherParser.CONTAINS);
                  break;

              }
              this.state = 778;
              this.ws();
              this.state = 779;
              this.expression2();
              break;

            case 4:
              this.state = 781;
              this.sp();
              this.state = 782;
              this.match(CypherParser.IS);
              this.state = 783;
              this.sp();
              this.state = 784;
              this.match(CypherParser.NULL);
              break;

            case 5:
              this.state = 786;
              this.sp();
              this.state = 787;
              this.match(CypherParser.IS);
              this.state = 788;
              this.sp();
              this.state = 789;
              this.match(CypherParser.NOT);
              this.state = 790;
              this.sp();
              this.state = 791;
              this.match(CypherParser.NULL);
              break;

          }
        }
        this.state = 797;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 69, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function Expression2Context(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression2;
    return this;
  }

  Expression2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  Expression2Context.prototype.constructor = Expression2Context;

  Expression2Context.prototype.atom = function () {
    return this.getTypedRuleContext(AtomContext, 0);
  };

  Expression2Context.prototype.propertyLookup = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
      return this.getTypedRuleContext(PropertyLookupContext, i);
    }
  };

  Expression2Context.prototype.nodeLabels = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(NodeLabelsContext);
    } else {
      return this.getTypedRuleContext(NodeLabelsContext, i);
    }
  };

  Expression2Context.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExpression2(this);
    }
  };

  Expression2Context.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExpression2(this);
    }
  };


  CypherParser.Expression2Context = Expression2Context;

  CypherParser.prototype.expression2 = function () {

    var localctx = new Expression2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CypherParser.RULE_expression2);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 798;
      this.atom();
      this.state = 803;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 71, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 801;
          switch (this._input.LA(1)) {
            case CypherParser.T__25:
            case CypherParser.WHITESPACE:
              this.state = 799;
              this.propertyLookup();
              break;
            case CypherParser.T__10:
              this.state = 800;
              this.nodeLabels();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
        }
        this.state = 805;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function AtomContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_atom;
    return this;
  }

  AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  AtomContext.prototype.constructor = AtomContext;

  AtomContext.prototype.numberLiteral = function () {
    return this.getTypedRuleContext(NumberLiteralContext, 0);
  };

  AtomContext.prototype.StringLiteral = function () {
    return this.getToken(CypherParser.StringLiteral, 0);
  };

  AtomContext.prototype.parameter = function () {
    return this.getTypedRuleContext(ParameterContext, 0);
  };

  AtomContext.prototype.TRUE = function () {
    return this.getToken(CypherParser.TRUE, 0);
  };

  AtomContext.prototype.FALSE = function () {
    return this.getToken(CypherParser.FALSE, 0);
  };

  AtomContext.prototype.NULL = function () {
    return this.getToken(CypherParser.NULL, 0);
  };

  AtomContext.prototype.COUNT = function () {
    return this.getToken(CypherParser.COUNT, 0);
  };

  AtomContext.prototype.mapLiteral = function () {
    return this.getTypedRuleContext(MapLiteralContext, 0);
  };

  AtomContext.prototype.listComprehension = function () {
    return this.getTypedRuleContext(ListComprehensionContext, 0);
  };

  AtomContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  AtomContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  AtomContext.prototype.FILTER = function () {
    return this.getToken(CypherParser.FILTER, 0);
  };

  AtomContext.prototype.filterExpression = function () {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  };

  AtomContext.prototype.EXTRACT = function () {
    return this.getToken(CypherParser.EXTRACT, 0);
  };

  AtomContext.prototype.ALL = function () {
    return this.getToken(CypherParser.ALL, 0);
  };

  AtomContext.prototype.ANY = function () {
    return this.getToken(CypherParser.ANY, 0);
  };

  AtomContext.prototype.NONE = function () {
    return this.getToken(CypherParser.NONE, 0);
  };

  AtomContext.prototype.SINGLE = function () {
    return this.getToken(CypherParser.SINGLE, 0);
  };

  AtomContext.prototype.relationshipsPattern = function () {
    return this.getTypedRuleContext(RelationshipsPatternContext, 0);
  };

  AtomContext.prototype.parenthesizedExpression = function () {
    return this.getTypedRuleContext(ParenthesizedExpressionContext, 0);
  };

  AtomContext.prototype.functionInvocation = function () {
    return this.getTypedRuleContext(FunctionInvocationContext, 0);
  };

  AtomContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  AtomContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterAtom(this);
    }
  };

  AtomContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitAtom(this);
    }
  };


  CypherParser.AtomContext = AtomContext;

  CypherParser.prototype.atom = function () {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CypherParser.RULE_atom);
    var _la = 0; // Token type
    try {
      this.state = 892;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 806;
          this.numberLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 807;
          this.match(CypherParser.StringLiteral);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 808;
          this.parameter();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 809;
          this.match(CypherParser.TRUE);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 810;
          this.match(CypherParser.FALSE);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 811;
          this.match(CypherParser.NULL);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 812;
          this.match(CypherParser.COUNT);
          this.state = 813;
          this.match(CypherParser.T__5);
          this.state = 814;
          this.match(CypherParser.T__4);
          this.state = 815;
          this.match(CypherParser.T__6);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 816;
          this.mapLiteral();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 817;
          this.listComprehension();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 818;
          this.match(CypherParser.T__7);
          this.state = 819;
          this.ws();
          this.state = 820;
          this.expression();
          this.state = 821;
          this.ws();
          this.state = 829;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === CypherParser.T__1) {
            this.state = 822;
            this.match(CypherParser.T__1);
            this.state = 823;
            this.ws();
            this.state = 824;
            this.expression();
            this.state = 825;
            this.ws();
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 832;
          this.match(CypherParser.T__9);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 834;
          this.match(CypherParser.FILTER);
          this.state = 835;
          this.ws();
          this.state = 836;
          this.match(CypherParser.T__5);
          this.state = 837;
          this.ws();
          this.state = 838;
          this.filterExpression();
          this.state = 839;
          this.ws();
          this.state = 840;
          this.match(CypherParser.T__6);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 842;
          this.match(CypherParser.EXTRACT);
          this.state = 843;
          this.ws();
          this.state = 844;
          this.match(CypherParser.T__5);
          this.state = 845;
          this.ws();
          this.state = 846;
          this.filterExpression();
          this.state = 847;
          this.ws();
          this.state = 852;
          _la = this._input.LA(1);
          if (_la === CypherParser.T__11 || _la === CypherParser.WHITESPACE) {
            this.state = 848;
            this.ws();
            this.state = 849;
            this.match(CypherParser.T__11);
            this.state = 850;
            this.expression();
          }

          this.state = 854;
          this.match(CypherParser.T__6);
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 856;
          this.match(CypherParser.ALL);
          this.state = 857;
          this.ws();
          this.state = 858;
          this.match(CypherParser.T__5);
          this.state = 859;
          this.ws();
          this.state = 860;
          this.filterExpression();
          this.state = 861;
          this.ws();
          this.state = 862;
          this.match(CypherParser.T__6);
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 864;
          this.match(CypherParser.ANY);
          this.state = 865;
          this.ws();
          this.state = 866;
          this.match(CypherParser.T__5);
          this.state = 867;
          this.ws();
          this.state = 868;
          this.filterExpression();
          this.state = 869;
          this.ws();
          this.state = 870;
          this.match(CypherParser.T__6);
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 872;
          this.match(CypherParser.NONE);
          this.state = 873;
          this.ws();
          this.state = 874;
          this.match(CypherParser.T__5);
          this.state = 875;
          this.ws();
          this.state = 876;
          this.filterExpression();
          this.state = 877;
          this.ws();
          this.state = 878;
          this.match(CypherParser.T__6);
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 880;
          this.match(CypherParser.SINGLE);
          this.state = 881;
          this.ws();
          this.state = 882;
          this.match(CypherParser.T__5);
          this.state = 883;
          this.ws();
          this.state = 884;
          this.filterExpression();
          this.state = 885;
          this.ws();
          this.state = 886;
          this.match(CypherParser.T__6);
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 888;
          this.relationshipsPattern();
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 889;
          this.parenthesizedExpression();
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 890;
          this.functionInvocation();
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 891;
          this.variable();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PartialComparisonExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_partialComparisonExpression;
    return this;
  }

  PartialComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PartialComparisonExpressionContext.prototype.constructor = PartialComparisonExpressionContext;

  PartialComparisonExpressionContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  PartialComparisonExpressionContext.prototype.expression7 = function () {
    return this.getTypedRuleContext(Expression7Context, 0);
  };

  PartialComparisonExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPartialComparisonExpression(this);
    }
  };

  PartialComparisonExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPartialComparisonExpression(this);
    }
  };


  CypherParser.PartialComparisonExpressionContext = PartialComparisonExpressionContext;

  CypherParser.prototype.partialComparisonExpression = function () {

    var localctx = new PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CypherParser.RULE_partialComparisonExpression);
    try {
      this.state = 922;
      switch (this._input.LA(1)) {
        case CypherParser.T__2:
          this.enterOuterAlt(localctx, 1);
          this.state = 894;
          this.match(CypherParser.T__2);
          this.state = 895;
          this.ws();
          this.state = 896;
          this.expression7();
          break;
        case CypherParser.T__19:
          this.enterOuterAlt(localctx, 2);
          this.state = 898;
          this.match(CypherParser.T__19);
          this.state = 899;
          this.ws();
          this.state = 900;
          this.expression7();
          break;
        case CypherParser.T__20:
          this.enterOuterAlt(localctx, 3);
          this.state = 902;
          this.match(CypherParser.T__20);
          this.state = 903;
          this.ws();
          this.state = 904;
          this.expression7();
          break;
        case CypherParser.T__21:
          this.enterOuterAlt(localctx, 4);
          this.state = 906;
          this.match(CypherParser.T__21);
          this.state = 907;
          this.ws();
          this.state = 908;
          this.expression7();
          break;
        case CypherParser.T__22:
          this.enterOuterAlt(localctx, 5);
          this.state = 910;
          this.match(CypherParser.T__22);
          this.state = 911;
          this.ws();
          this.state = 912;
          this.expression7();
          break;
        case CypherParser.T__23:
          this.enterOuterAlt(localctx, 6);
          this.state = 914;
          this.match(CypherParser.T__23);
          this.state = 915;
          this.ws();
          this.state = 916;
          this.expression7();
          break;
        case CypherParser.T__24:
          this.enterOuterAlt(localctx, 7);
          this.state = 918;
          this.match(CypherParser.T__24);
          this.state = 919;
          this.ws();
          this.state = 920;
          this.expression7();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ParenthesizedExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
    return this;
  }

  ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

  ParenthesizedExpressionContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  ParenthesizedExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterParenthesizedExpression(this);
    }
  };

  ParenthesizedExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitParenthesizedExpression(this);
    }
  };


  CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

  CypherParser.prototype.parenthesizedExpression = function () {

    var localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CypherParser.RULE_parenthesizedExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 924;
      this.match(CypherParser.T__5);
      this.state = 925;
      this.expression();
      this.state = 926;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RelationshipsPatternContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipsPattern;
    return this;
  }

  RelationshipsPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RelationshipsPatternContext.prototype.constructor = RelationshipsPatternContext;

  RelationshipsPatternContext.prototype.nodePattern = function () {
    return this.getTypedRuleContext(NodePatternContext, 0);
  };

  RelationshipsPatternContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  RelationshipsPatternContext.prototype.patternElementChain = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
      return this.getTypedRuleContext(PatternElementChainContext, i);
    }
  };

  RelationshipsPatternContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRelationshipsPattern(this);
    }
  };

  RelationshipsPatternContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRelationshipsPattern(this);
    }
  };


  CypherParser.RelationshipsPatternContext = RelationshipsPatternContext;

  CypherParser.prototype.relationshipsPattern = function () {

    var localctx = new RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CypherParser.RULE_relationshipsPattern);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 928;
      this.nodePattern();
      this.state = 932;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 929;
            this.ws();
            this.state = 930;
            this.patternElementChain();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 934;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 76, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function FilterExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterExpression;
    return this;
  }

  FilterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  FilterExpressionContext.prototype.constructor = FilterExpressionContext;

  FilterExpressionContext.prototype.idInColl = function () {
    return this.getTypedRuleContext(IdInCollContext, 0);
  };

  FilterExpressionContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  FilterExpressionContext.prototype.where = function () {
    return this.getTypedRuleContext(WhereContext, 0);
  };

  FilterExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterFilterExpression(this);
    }
  };

  FilterExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitFilterExpression(this);
    }
  };


  CypherParser.FilterExpressionContext = FilterExpressionContext;

  CypherParser.prototype.filterExpression = function () {

    var localctx = new FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CypherParser.RULE_filterExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 936;
      this.idInColl();
      this.state = 940;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
      if (la_ === 1) {
        this.state = 937;
        this.ws();
        this.state = 938;
        this.where();

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function IdInCollContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idInColl;
    return this;
  }

  IdInCollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  IdInCollContext.prototype.constructor = IdInCollContext;

  IdInCollContext.prototype.variable = function () {
    return this.getTypedRuleContext(VariableContext, 0);
  };

  IdInCollContext.prototype.sp = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SpContext);
    } else {
      return this.getTypedRuleContext(SpContext, i);
    }
  };

  IdInCollContext.prototype.IN = function () {
    return this.getToken(CypherParser.IN, 0);
  };

  IdInCollContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  IdInCollContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterIdInColl(this);
    }
  };

  IdInCollContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitIdInColl(this);
    }
  };


  CypherParser.IdInCollContext = IdInCollContext;

  CypherParser.prototype.idInColl = function () {

    var localctx = new IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CypherParser.RULE_idInColl);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 942;
      this.variable();
      this.state = 943;
      this.sp();
      this.state = 944;
      this.match(CypherParser.IN);
      this.state = 945;
      this.sp();
      this.state = 946;
      this.expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function FunctionInvocationContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocation;
    return this;
  }

  FunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  FunctionInvocationContext.prototype.constructor = FunctionInvocationContext;

  FunctionInvocationContext.prototype.functionName = function () {
    return this.getTypedRuleContext(FunctionNameContext, 0);
  };

  FunctionInvocationContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  FunctionInvocationContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  FunctionInvocationContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  FunctionInvocationContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionInvocation(this);
    }
  };

  FunctionInvocationContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionInvocation(this);
    }
  };


  CypherParser.FunctionInvocationContext = FunctionInvocationContext;

  CypherParser.prototype.functionInvocation = function () {

    var localctx = new FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CypherParser.RULE_functionInvocation);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 948;
      this.functionName();
      this.state = 949;
      this.ws();
      this.state = 950;
      this.match(CypherParser.T__5);
      this.state = 951;
      this.ws();
      this.state = 953;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
      if (la_ === 1) {
        this.state = 952;
        this.match(CypherParser.DISTINCT);

      }
      this.state = 965;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
      if (la_ === 1) {
        this.state = 955;
        this.expression();
        this.state = 962;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CypherParser.T__1) {
          this.state = 956;
          this.match(CypherParser.T__1);
          this.state = 957;
          this.ws();
          this.state = 958;
          this.expression();
          this.state = 964;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }

      }
      this.state = 967;
      this.ws();
      this.state = 968;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function FunctionNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionName;
    return this;
  }

  FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  FunctionNameContext.prototype.constructor = FunctionNameContext;

  FunctionNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  FunctionNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterFunctionName(this);
    }
  };

  FunctionNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitFunctionName(this);
    }
  };


  CypherParser.FunctionNameContext = FunctionNameContext;

  CypherParser.prototype.functionName = function () {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CypherParser.RULE_functionName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 970;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ListComprehensionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listComprehension;
    return this;
  }

  ListComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ListComprehensionContext.prototype.constructor = ListComprehensionContext;

  ListComprehensionContext.prototype.filterExpression = function () {
    return this.getTypedRuleContext(FilterExpressionContext, 0);
  };

  ListComprehensionContext.prototype.ws = function () {
    return this.getTypedRuleContext(WsContext, 0);
  };

  ListComprehensionContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
  };

  ListComprehensionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterListComprehension(this);
    }
  };

  ListComprehensionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitListComprehension(this);
    }
  };


  CypherParser.ListComprehensionContext = ListComprehensionContext;

  CypherParser.prototype.listComprehension = function () {

    var localctx = new ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CypherParser.RULE_listComprehension);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 972;
      this.match(CypherParser.T__7);
      this.state = 973;
      this.filterExpression();
      this.state = 978;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__11 || _la === CypherParser.WHITESPACE) {
        this.state = 974;
        this.ws();
        this.state = 975;
        this.match(CypherParser.T__11);
        this.state = 976;
        this.expression();
      }

      this.state = 980;
      this.match(CypherParser.T__9);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertyLookupContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyLookup;
    return this;
  }

  PropertyLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertyLookupContext.prototype.constructor = PropertyLookupContext;

  PropertyLookupContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PropertyLookupContext.prototype.propertyKeyName = function () {
    return this.getTypedRuleContext(PropertyKeyNameContext, 0);
  };

  PropertyLookupContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyLookup(this);
    }
  };

  PropertyLookupContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyLookup(this);
    }
  };


  CypherParser.PropertyLookupContext = PropertyLookupContext;

  CypherParser.prototype.propertyLookup = function () {

    var localctx = new PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CypherParser.RULE_propertyLookup);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 982;
      this.ws();
      this.state = 983;
      this.match(CypherParser.T__25);
      this.state = 984;
      this.ws();
      this.state = 989;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
      switch (la_) {
        case 1:
          this.state = 985;
          this.propertyKeyName();
          this.state = 986;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__8 || _la === CypherParser.T__26)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

        case 2:
          this.state = 988;
          this.propertyKeyName();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function VariableContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variable;
    return this;
  }

  VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  VariableContext.prototype.constructor = VariableContext;

  VariableContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  VariableContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterVariable(this);
    }
  };

  VariableContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitVariable(this);
    }
  };


  CypherParser.VariableContext = VariableContext;

  CypherParser.prototype.variable = function () {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CypherParser.RULE_variable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 991;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function NumberLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_numberLiteral;
    return this;
  }

  NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  NumberLiteralContext.prototype.constructor = NumberLiteralContext;

  NumberLiteralContext.prototype.doubleLiteral = function () {
    return this.getTypedRuleContext(DoubleLiteralContext, 0);
  };

  NumberLiteralContext.prototype.signedIntegerLiteral = function () {
    return this.getTypedRuleContext(SignedIntegerLiteralContext, 0);
  };

  NumberLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterNumberLiteral(this);
    }
  };

  NumberLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitNumberLiteral(this);
    }
  };


  CypherParser.NumberLiteralContext = NumberLiteralContext;

  CypherParser.prototype.numberLiteral = function () {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CypherParser.RULE_numberLiteral);
    try {
      this.state = 995;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 993;
          this.doubleLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 994;
          this.signedIntegerLiteral();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function MapLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapLiteral;
    return this;
  }

  MapLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  MapLiteralContext.prototype.constructor = MapLiteralContext;

  MapLiteralContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  MapLiteralContext.prototype.propertyKeyName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyKeyNameContext);
    } else {
      return this.getTypedRuleContext(PropertyKeyNameContext, i);
    }
  };

  MapLiteralContext.prototype.expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  MapLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterMapLiteral(this);
    }
  };

  MapLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitMapLiteral(this);
    }
  };


  CypherParser.MapLiteralContext = MapLiteralContext;

  CypherParser.prototype.mapLiteral = function () {

    var localctx = new MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CypherParser.RULE_mapLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 997;
      this.match(CypherParser.T__27);
      this.state = 998;
      this.ws();
      this.state = 1019;
      _la = this._input.LA(1);
      if (((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0)) {
        this.state = 999;
        this.propertyKeyName();
        this.state = 1000;
        this.ws();
        this.state = 1001;
        this.match(CypherParser.T__10);
        this.state = 1002;
        this.ws();
        this.state = 1003;
        this.expression();
        this.state = 1004;
        this.ws();
        this.state = 1016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CypherParser.T__1) {
          this.state = 1005;
          this.match(CypherParser.T__1);
          this.state = 1006;
          this.ws();
          this.state = 1007;
          this.propertyKeyName();
          this.state = 1008;
          this.ws();
          this.state = 1009;
          this.match(CypherParser.T__10);
          this.state = 1010;
          this.ws();
          this.state = 1011;
          this.expression();
          this.state = 1012;
          this.ws();
          this.state = 1018;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 1021;
      this.match(CypherParser.T__28);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ParameterContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameter;
    return this;
  }

  ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ParameterContext.prototype.constructor = ParameterContext;

  ParameterContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  ParameterContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  ParameterContext.prototype.unsignedDecimalInteger = function () {
    return this.getTypedRuleContext(UnsignedDecimalIntegerContext, 0);
  };

  ParameterContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterParameter(this);
    }
  };

  ParameterContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitParameter(this);
    }
  };


  CypherParser.ParameterContext = ParameterContext;

  CypherParser.prototype.parameter = function () {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CypherParser.RULE_parameter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1023;
      this.match(CypherParser.T__27);
      this.state = 1024;
      this.ws();
      this.state = 1027;
      switch (this._input.LA(1)) {
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DELETE:
        case CypherParser.DETACH:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.L_0X:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.state = 1025;
          this.symbolicName();
          break;
        case CypherParser.T__29:
        case CypherParser.T__30:
        case CypherParser.T__31:
        case CypherParser.T__32:
        case CypherParser.T__33:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
        case CypherParser.T__38:
          this.state = 1026;
          this.unsignedDecimalInteger();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1029;
      this.ws();
      this.state = 1030;
      this.match(CypherParser.T__28);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertyExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpression;
    return this;
  }

  PropertyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertyExpressionContext.prototype.constructor = PropertyExpressionContext;

  PropertyExpressionContext.prototype.atom = function () {
    return this.getTypedRuleContext(AtomContext, 0);
  };

  PropertyExpressionContext.prototype.ws = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WsContext);
    } else {
      return this.getTypedRuleContext(WsContext, i);
    }
  };

  PropertyExpressionContext.prototype.propertyLookup = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
      return this.getTypedRuleContext(PropertyLookupContext, i);
    }
  };

  PropertyExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyExpression(this);
    }
  };

  PropertyExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyExpression(this);
    }
  };


  CypherParser.PropertyExpressionContext = PropertyExpressionContext;

  CypherParser.prototype.propertyExpression = function () {

    var localctx = new PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CypherParser.RULE_propertyExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1032;
      this.atom();
      this.state = 1036;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1033;
            this.ws();
            this.state = 1034;
            this.propertyLookup();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1038;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function PropertyKeyNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeyName;
    return this;
  }

  PropertyKeyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  PropertyKeyNameContext.prototype.constructor = PropertyKeyNameContext;

  PropertyKeyNameContext.prototype.symbolicName = function () {
    return this.getTypedRuleContext(SymbolicNameContext, 0);
  };

  PropertyKeyNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterPropertyKeyName(this);
    }
  };

  PropertyKeyNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitPropertyKeyName(this);
    }
  };


  CypherParser.PropertyKeyNameContext = PropertyKeyNameContext;

  CypherParser.prototype.propertyKeyName = function () {

    var localctx = new PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CypherParser.RULE_propertyKeyName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1040;
      this.symbolicName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SignedIntegerLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_signedIntegerLiteral;
    return this;
  }

  SignedIntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SignedIntegerLiteralContext.prototype.constructor = SignedIntegerLiteralContext;

  SignedIntegerLiteralContext.prototype.hexInteger = function () {
    return this.getTypedRuleContext(HexIntegerContext, 0);
  };

  SignedIntegerLiteralContext.prototype.octalInteger = function () {
    return this.getTypedRuleContext(OctalIntegerContext, 0);
  };

  SignedIntegerLiteralContext.prototype.decimalInteger = function () {
    return this.getTypedRuleContext(DecimalIntegerContext, 0);
  };

  SignedIntegerLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSignedIntegerLiteral(this);
    }
  };

  SignedIntegerLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSignedIntegerLiteral(this);
    }
  };


  CypherParser.SignedIntegerLiteralContext = SignedIntegerLiteralContext;

  CypherParser.prototype.signedIntegerLiteral = function () {

    var localctx = new SignedIntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CypherParser.RULE_signedIntegerLiteral);
    try {
      this.state = 1045;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1042;
          this.hexInteger();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1043;
          this.octalInteger();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1044;
          this.decimalInteger();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedIntegerLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedIntegerLiteral;
    return this;
  }

  UnsignedIntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedIntegerLiteralContext.prototype.constructor = UnsignedIntegerLiteralContext;

  UnsignedIntegerLiteralContext.prototype.unsignedDecimalInteger = function () {
    return this.getTypedRuleContext(UnsignedDecimalIntegerContext, 0);
  };

  UnsignedIntegerLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedIntegerLiteral(this);
    }
  };

  UnsignedIntegerLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedIntegerLiteral(this);
    }
  };


  CypherParser.UnsignedIntegerLiteralContext = UnsignedIntegerLiteralContext;

  CypherParser.prototype.unsignedIntegerLiteral = function () {

    var localctx = new UnsignedIntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CypherParser.RULE_unsignedIntegerLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1047;
      this.unsignedDecimalInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function HexIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hexInteger;
    return this;
  }

  HexIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  HexIntegerContext.prototype.constructor = HexIntegerContext;

  HexIntegerContext.prototype.unsignedHexInteger = function () {
    return this.getTypedRuleContext(UnsignedHexIntegerContext, 0);
  };

  HexIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterHexInteger(this);
    }
  };

  HexIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitHexInteger(this);
    }
  };


  CypherParser.HexIntegerContext = HexIntegerContext;

  CypherParser.prototype.hexInteger = function () {

    var localctx = new HexIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CypherParser.RULE_hexInteger);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1050;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1049;
        this.match(CypherParser.T__14);
      }

      this.state = 1052;
      this.unsignedHexInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DecimalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_decimalInteger;
    return this;
  }

  DecimalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DecimalIntegerContext.prototype.constructor = DecimalIntegerContext;

  DecimalIntegerContext.prototype.unsignedDecimalInteger = function () {
    return this.getTypedRuleContext(UnsignedDecimalIntegerContext, 0);
  };

  DecimalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDecimalInteger(this);
    }
  };

  DecimalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDecimalInteger(this);
    }
  };


  CypherParser.DecimalIntegerContext = DecimalIntegerContext;

  CypherParser.prototype.decimalInteger = function () {

    var localctx = new DecimalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CypherParser.RULE_decimalInteger);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1055;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1054;
        this.match(CypherParser.T__14);
      }

      this.state = 1057;
      this.unsignedDecimalInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OctalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_octalInteger;
    return this;
  }

  OctalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OctalIntegerContext.prototype.constructor = OctalIntegerContext;

  OctalIntegerContext.prototype.unsignedOctalInteger = function () {
    return this.getTypedRuleContext(UnsignedOctalIntegerContext, 0);
  };

  OctalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOctalInteger(this);
    }
  };

  OctalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOctalInteger(this);
    }
  };


  CypherParser.OctalIntegerContext = OctalIntegerContext;

  CypherParser.prototype.octalInteger = function () {

    var localctx = new OctalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CypherParser.RULE_octalInteger);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1060;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1059;
        this.match(CypherParser.T__14);
      }

      this.state = 1062;
      this.unsignedOctalInteger();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedHexIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedHexInteger;
    return this;
  }

  UnsignedHexIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedHexIntegerContext.prototype.constructor = UnsignedHexIntegerContext;

  UnsignedHexIntegerContext.prototype.L_0X = function () {
    return this.getToken(CypherParser.L_0X, 0);
  };

  UnsignedHexIntegerContext.prototype.hexString = function () {
    return this.getTypedRuleContext(HexStringContext, 0);
  };

  UnsignedHexIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedHexInteger(this);
    }
  };

  UnsignedHexIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedHexInteger(this);
    }
  };


  CypherParser.UnsignedHexIntegerContext = UnsignedHexIntegerContext;

  CypherParser.prototype.unsignedHexInteger = function () {

    var localctx = new UnsignedHexIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CypherParser.RULE_unsignedHexInteger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1064;
      this.match(CypherParser.L_0X);
      this.state = 1065;
      this.hexString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedDecimalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedDecimalInteger;
    return this;
  }

  UnsignedDecimalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedDecimalIntegerContext.prototype.constructor = UnsignedDecimalIntegerContext;

  UnsignedDecimalIntegerContext.prototype.digitString = function () {
    return this.getTypedRuleContext(DigitStringContext, 0);
  };

  UnsignedDecimalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedDecimalInteger(this);
    }
  };

  UnsignedDecimalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedDecimalInteger(this);
    }
  };


  CypherParser.UnsignedDecimalIntegerContext = UnsignedDecimalIntegerContext;

  CypherParser.prototype.unsignedDecimalInteger = function () {

    var localctx = new UnsignedDecimalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CypherParser.RULE_unsignedDecimalInteger);
    var _la = 0; // Token type
    try {
      this.state = 1072;
      switch (this._input.LA(1)) {
        case CypherParser.T__29:
        case CypherParser.T__30:
        case CypherParser.T__31:
        case CypherParser.T__32:
        case CypherParser.T__33:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
          this.enterOuterAlt(localctx, 1);
          this.state = 1067;
          _la = this._input.LA(1);
          if (!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          this.state = 1069;
          _la = this._input.LA(1);
          if (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0)) {
            this.state = 1068;
            this.digitString();
          }

          break;
        case CypherParser.T__38:
          this.enterOuterAlt(localctx, 2);
          this.state = 1071;
          this.match(CypherParser.T__38);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function UnsignedOctalIntegerContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unsignedOctalInteger;
    return this;
  }

  UnsignedOctalIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  UnsignedOctalIntegerContext.prototype.constructor = UnsignedOctalIntegerContext;

  UnsignedOctalIntegerContext.prototype.octalString = function () {
    return this.getTypedRuleContext(OctalStringContext, 0);
  };

  UnsignedOctalIntegerContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterUnsignedOctalInteger(this);
    }
  };

  UnsignedOctalIntegerContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitUnsignedOctalInteger(this);
    }
  };


  CypherParser.UnsignedOctalIntegerContext = UnsignedOctalIntegerContext;

  CypherParser.prototype.unsignedOctalInteger = function () {

    var localctx = new UnsignedOctalIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CypherParser.RULE_unsignedOctalInteger);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1074;
      this.match(CypherParser.T__38);
      this.state = 1075;
      this.octalString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function HexStringContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hexString;
    return this;
  }

  HexStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  HexStringContext.prototype.constructor = HexStringContext;

  HexStringContext.prototype.HexDigit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.HexDigit);
    } else {
      return this.getToken(CypherParser.HexDigit, i);
    }
  };


  HexStringContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterHexString(this);
    }
  };

  HexStringContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitHexString(this);
    }
  };


  CypherParser.HexStringContext = HexStringContext;

  CypherParser.prototype.hexString = function () {

    var localctx = new HexStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CypherParser.RULE_hexString);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1078;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1077;
        this.match(CypherParser.HexDigit);
        this.state = 1080;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === CypherParser.HexDigit);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DigitStringContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_digitString;
    return this;
  }

  DigitStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DigitStringContext.prototype.constructor = DigitStringContext;

  DigitStringContext.prototype.digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  DigitStringContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDigitString(this);
    }
  };

  DigitStringContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDigitString(this);
    }
  };


  CypherParser.DigitStringContext = DigitStringContext;

  CypherParser.prototype.digitString = function () {

    var localctx = new DigitStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CypherParser.RULE_digitString);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1083;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1082;
        this.digit();
        this.state = 1085;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0));
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OctalStringContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_octalString;
    return this;
  }

  OctalStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OctalStringContext.prototype.constructor = OctalStringContext;

  OctalStringContext.prototype.octDigit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(OctDigitContext);
    } else {
      return this.getTypedRuleContext(OctDigitContext, i);
    }
  };

  OctalStringContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOctalString(this);
    }
  };

  OctalStringContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOctalString(this);
    }
  };


  CypherParser.OctalStringContext = OctalStringContext;

  CypherParser.prototype.octalString = function () {

    var localctx = new OctalStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CypherParser.RULE_octalString);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1088;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1087;
        this.octDigit();
        this.state = 1090;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0));
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DigitContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_digit;
    return this;
  }

  DigitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DigitContext.prototype.constructor = DigitContext;


  DigitContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDigit(this);
    }
  };

  DigitContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDigit(this);
    }
  };


  CypherParser.DigitContext = DigitContext;

  CypherParser.prototype.digit = function () {

    var localctx = new DigitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CypherParser.RULE_digit);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1092;
      _la = this._input.LA(1);
      if (!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function OctDigitContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_octDigit;
    return this;
  }

  OctDigitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  OctDigitContext.prototype.constructor = OctDigitContext;


  OctDigitContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterOctDigit(this);
    }
  };

  OctDigitContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitOctDigit(this);
    }
  };


  CypherParser.OctDigitContext = OctDigitContext;

  CypherParser.prototype.octDigit = function () {

    var localctx = new OctDigitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CypherParser.RULE_octDigit);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1094;
      _la = this._input.LA(1);
      if (!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DoubleLiteralContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_doubleLiteral;
    return this;
  }

  DoubleLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

  DoubleLiteralContext.prototype.exponentDecimalReal = function () {
    return this.getTypedRuleContext(ExponentDecimalRealContext, 0);
  };

  DoubleLiteralContext.prototype.regularDecimalReal = function () {
    return this.getTypedRuleContext(RegularDecimalRealContext, 0);
  };

  DoubleLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDoubleLiteral(this);
    }
  };

  DoubleLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDoubleLiteral(this);
    }
  };


  CypherParser.DoubleLiteralContext = DoubleLiteralContext;

  CypherParser.prototype.doubleLiteral = function () {

    var localctx = new DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CypherParser.RULE_doubleLiteral);
    try {
      this.state = 1098;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1096;
          this.exponentDecimalReal();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1097;
          this.regularDecimalReal();
          break;

      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function ExponentDecimalRealContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_exponentDecimalReal;
    return this;
  }

  ExponentDecimalRealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  ExponentDecimalRealContext.prototype.constructor = ExponentDecimalRealContext;

  ExponentDecimalRealContext.prototype.digitString = function () {
    return this.getTypedRuleContext(DigitStringContext, 0);
  };

  ExponentDecimalRealContext.prototype.digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  ExponentDecimalRealContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterExponentDecimalReal(this);
    }
  };

  ExponentDecimalRealContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitExponentDecimalReal(this);
    }
  };


  CypherParser.ExponentDecimalRealContext = ExponentDecimalRealContext;

  CypherParser.prototype.exponentDecimalReal = function () {

    var localctx = new ExponentDecimalRealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CypherParser.RULE_exponentDecimalReal);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1101;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1100;
        this.match(CypherParser.T__14);
      }

      this.state = 1105;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1105;
        switch (this._input.LA(1)) {
          case CypherParser.T__29:
          case CypherParser.T__30:
          case CypherParser.T__31:
          case CypherParser.T__32:
          case CypherParser.T__33:
          case CypherParser.T__34:
          case CypherParser.T__35:
          case CypherParser.T__36:
          case CypherParser.T__37:
          case CypherParser.T__38:
            this.state = 1103;
            this.digit();
            break;
          case CypherParser.T__25:
            this.state = 1104;
            this.match(CypherParser.T__25);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (((((_la - 26)) & ~0x1f) == 0 && ((1 << (_la - 26)) & ((1 << (CypherParser.T__25 - 26)) | (1 << (CypherParser.T__29 - 26)) | (1 << (CypherParser.T__30 - 26)) | (1 << (CypherParser.T__31 - 26)) | (1 << (CypherParser.T__32 - 26)) | (1 << (CypherParser.T__33 - 26)) | (1 << (CypherParser.T__34 - 26)) | (1 << (CypherParser.T__35 - 26)) | (1 << (CypherParser.T__36 - 26)) | (1 << (CypherParser.T__37 - 26)) | (1 << (CypherParser.T__38 - 26)))) !== 0));
      this.state = 1111;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 101, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1109;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__39 || _la === CypherParser.T__40)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

        case 2:
          this.state = 1110;
          _la = this._input.LA(1);
          if (!(_la === CypherParser.T__39 || _la === CypherParser.T__40)) {
            this._errHandler.recoverInline(this);
          }
          else {
            this.consume();
          }
          break;

      }
      this.state = 1114;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1113;
        this.match(CypherParser.T__14);
      }

      this.state = 1116;
      this.digitString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RegularDecimalRealContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularDecimalReal;
    return this;
  }

  RegularDecimalRealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RegularDecimalRealContext.prototype.constructor = RegularDecimalRealContext;

  RegularDecimalRealContext.prototype.digitString = function () {
    return this.getTypedRuleContext(DigitStringContext, 0);
  };

  RegularDecimalRealContext.prototype.digit = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DigitContext);
    } else {
      return this.getTypedRuleContext(DigitContext, i);
    }
  };

  RegularDecimalRealContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRegularDecimalReal(this);
    }
  };

  RegularDecimalRealContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRegularDecimalReal(this);
    }
  };


  CypherParser.RegularDecimalRealContext = RegularDecimalRealContext;

  CypherParser.prototype.regularDecimalReal = function () {

    var localctx = new RegularDecimalRealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CypherParser.RULE_regularDecimalReal);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1119;
      _la = this._input.LA(1);
      if (_la === CypherParser.T__14) {
        this.state = 1118;
        this.match(CypherParser.T__14);
      }

      this.state = 1124;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__30 - 30)) | (1 << (CypherParser.T__31 - 30)) | (1 << (CypherParser.T__32 - 30)) | (1 << (CypherParser.T__33 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)) | (1 << (CypherParser.T__38 - 30)))) !== 0)) {
        this.state = 1121;
        this.digit();
        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1127;
      this.match(CypherParser.T__25);
      this.state = 1128;
      this.digitString();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SymbolicNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_symbolicName;
    return this;
  }

  SymbolicNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SymbolicNameContext.prototype.constructor = SymbolicNameContext;

  SymbolicNameContext.prototype.UnescapedSymbolicName = function () {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
  };

  SymbolicNameContext.prototype.EscapedSymbolicName = function () {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
  };

  SymbolicNameContext.prototype.UNION = function () {
    return this.getToken(CypherParser.UNION, 0);
  };

  SymbolicNameContext.prototype.ALL = function () {
    return this.getToken(CypherParser.ALL, 0);
  };

  SymbolicNameContext.prototype.OPTIONAL = function () {
    return this.getToken(CypherParser.OPTIONAL, 0);
  };

  SymbolicNameContext.prototype.MATCH = function () {
    return this.getToken(CypherParser.MATCH, 0);
  };

  SymbolicNameContext.prototype.UNWIND = function () {
    return this.getToken(CypherParser.UNWIND, 0);
  };

  SymbolicNameContext.prototype.AS = function () {
    return this.getToken(CypherParser.AS, 0);
  };

  SymbolicNameContext.prototype.MERGE = function () {
    return this.getToken(CypherParser.MERGE, 0);
  };

  SymbolicNameContext.prototype.ON = function () {
    return this.getToken(CypherParser.ON, 0);
  };

  SymbolicNameContext.prototype.CREATE = function () {
    return this.getToken(CypherParser.CREATE, 0);
  };

  SymbolicNameContext.prototype.SET = function () {
    return this.getToken(CypherParser.SET, 0);
  };

  SymbolicNameContext.prototype.DELETE = function () {
    return this.getToken(CypherParser.DELETE, 0);
  };

  SymbolicNameContext.prototype.DETACH = function () {
    return this.getToken(CypherParser.DETACH, 0);
  };

  SymbolicNameContext.prototype.REMOVE = function () {
    return this.getToken(CypherParser.REMOVE, 0);
  };

  SymbolicNameContext.prototype.WITH = function () {
    return this.getToken(CypherParser.WITH, 0);
  };

  SymbolicNameContext.prototype.DISTINCT = function () {
    return this.getToken(CypherParser.DISTINCT, 0);
  };

  SymbolicNameContext.prototype.RETURN = function () {
    return this.getToken(CypherParser.RETURN, 0);
  };

  SymbolicNameContext.prototype.ORDER = function () {
    return this.getToken(CypherParser.ORDER, 0);
  };

  SymbolicNameContext.prototype.BY = function () {
    return this.getToken(CypherParser.BY, 0);
  };

  SymbolicNameContext.prototype.L_SKIP = function () {
    return this.getToken(CypherParser.L_SKIP, 0);
  };

  SymbolicNameContext.prototype.LIMIT = function () {
    return this.getToken(CypherParser.LIMIT, 0);
  };

  SymbolicNameContext.prototype.DESCENDING = function () {
    return this.getToken(CypherParser.DESCENDING, 0);
  };

  SymbolicNameContext.prototype.DESC = function () {
    return this.getToken(CypherParser.DESC, 0);
  };

  SymbolicNameContext.prototype.ASCENDING = function () {
    return this.getToken(CypherParser.ASCENDING, 0);
  };

  SymbolicNameContext.prototype.ASC = function () {
    return this.getToken(CypherParser.ASC, 0);
  };

  SymbolicNameContext.prototype.WHERE = function () {
    return this.getToken(CypherParser.WHERE, 0);
  };

  SymbolicNameContext.prototype.OR = function () {
    return this.getToken(CypherParser.OR, 0);
  };

  SymbolicNameContext.prototype.XOR = function () {
    return this.getToken(CypherParser.XOR, 0);
  };

  SymbolicNameContext.prototype.AND = function () {
    return this.getToken(CypherParser.AND, 0);
  };

  SymbolicNameContext.prototype.NOT = function () {
    return this.getToken(CypherParser.NOT, 0);
  };

  SymbolicNameContext.prototype.IN = function () {
    return this.getToken(CypherParser.IN, 0);
  };

  SymbolicNameContext.prototype.STARTS = function () {
    return this.getToken(CypherParser.STARTS, 0);
  };

  SymbolicNameContext.prototype.ENDS = function () {
    return this.getToken(CypherParser.ENDS, 0);
  };

  SymbolicNameContext.prototype.CONTAINS = function () {
    return this.getToken(CypherParser.CONTAINS, 0);
  };

  SymbolicNameContext.prototype.IS = function () {
    return this.getToken(CypherParser.IS, 0);
  };

  SymbolicNameContext.prototype.NULL = function () {
    return this.getToken(CypherParser.NULL, 0);
  };

  SymbolicNameContext.prototype.TRUE = function () {
    return this.getToken(CypherParser.TRUE, 0);
  };

  SymbolicNameContext.prototype.FALSE = function () {
    return this.getToken(CypherParser.FALSE, 0);
  };

  SymbolicNameContext.prototype.COUNT = function () {
    return this.getToken(CypherParser.COUNT, 0);
  };

  SymbolicNameContext.prototype.FILTER = function () {
    return this.getToken(CypherParser.FILTER, 0);
  };

  SymbolicNameContext.prototype.EXTRACT = function () {
    return this.getToken(CypherParser.EXTRACT, 0);
  };

  SymbolicNameContext.prototype.ANY = function () {
    return this.getToken(CypherParser.ANY, 0);
  };

  SymbolicNameContext.prototype.NONE = function () {
    return this.getToken(CypherParser.NONE, 0);
  };

  SymbolicNameContext.prototype.SINGLE = function () {
    return this.getToken(CypherParser.SINGLE, 0);
  };

  SymbolicNameContext.prototype.L_0X = function () {
    return this.getToken(CypherParser.L_0X, 0);
  };

  SymbolicNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSymbolicName(this);
    }
  };

  SymbolicNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSymbolicName(this);
    }
  };


  CypherParser.SymbolicNameContext = SymbolicNameContext;

  CypherParser.prototype.symbolicName = function () {

    var localctx = new SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CypherParser.RULE_symbolicName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1130;
      _la = this._input.LA(1);
      if (!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CypherParser.UNION - 64)) | (1 << (CypherParser.ALL - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.AS - 64)) | (1 << (CypherParser.MERGE - 64)) | (1 << (CypherParser.ON - 64)) | (1 << (CypherParser.CREATE - 64)) | (1 << (CypherParser.SET - 64)) | (1 << (CypherParser.DELETE - 64)) | (1 << (CypherParser.DETACH - 64)) | (1 << (CypherParser.REMOVE - 64)) | (1 << (CypherParser.WITH - 64)) | (1 << (CypherParser.DISTINCT - 64)) | (1 << (CypherParser.RETURN - 64)) | (1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.CONTAINS - 96)) | (1 << (CypherParser.IS - 96)) | (1 << (CypherParser.NULL - 96)) | (1 << (CypherParser.TRUE - 96)) | (1 << (CypherParser.FALSE - 96)) | (1 << (CypherParser.COUNT - 96)) | (1 << (CypherParser.FILTER - 96)) | (1 << (CypherParser.EXTRACT - 96)) | (1 << (CypherParser.ANY - 96)) | (1 << (CypherParser.NONE - 96)) | (1 << (CypherParser.SINGLE - 96)) | (1 << (CypherParser.L_0X - 96)) | (1 << (CypherParser.UnescapedSymbolicName - 96)) | (1 << (CypherParser.EscapedSymbolicName - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function WsContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_ws;
    return this;
  }

  WsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  WsContext.prototype.constructor = WsContext;

  WsContext.prototype.WHITESPACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.WHITESPACE);
    } else {
      return this.getToken(CypherParser.WHITESPACE, i);
    }
  };


  WsContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterWs(this);
    }
  };

  WsContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitWs(this);
    }
  };


  CypherParser.WsContext = WsContext;

  CypherParser.prototype.ws = function () {

    var localctx = new WsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CypherParser.RULE_ws);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1135;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 105, this._ctx)
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1132;
          this.match(CypherParser.WHITESPACE);
        }
        this.state = 1137;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 105, this._ctx);
      }

    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function SpContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sp;
    return this;
  }

  SpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  SpContext.prototype.constructor = SpContext;

  SpContext.prototype.WHITESPACE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(CypherParser.WHITESPACE);
    } else {
      return this.getToken(CypherParser.WHITESPACE, i);
    }
  };


  SpContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterSp(this);
    }
  };

  SpContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitSp(this);
    }
  };


  CypherParser.SpContext = SpContext;

  CypherParser.prototype.sp = function () {

    var localctx = new SpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CypherParser.RULE_sp);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1139;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 1138;
            this.match(CypherParser.WHITESPACE);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1141;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 106, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function LeftArrowHeadContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_leftArrowHead;
    return this;
  }

  LeftArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  LeftArrowHeadContext.prototype.constructor = LeftArrowHeadContext;


  LeftArrowHeadContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterLeftArrowHead(this);
    }
  };

  LeftArrowHeadContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitLeftArrowHead(this);
    }
  };


  CypherParser.LeftArrowHeadContext = LeftArrowHeadContext;

  CypherParser.prototype.leftArrowHead = function () {

    var localctx = new LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CypherParser.RULE_leftArrowHead);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1143;
      _la = this._input.LA(1);
      if (!(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (CypherParser.T__21 - 22)) | (1 << (CypherParser.T__41 - 22)) | (1 << (CypherParser.T__42 - 22)) | (1 << (CypherParser.T__43 - 22)) | (1 << (CypherParser.T__44 - 22)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function RightArrowHeadContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rightArrowHead;
    return this;
  }

  RightArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  RightArrowHeadContext.prototype.constructor = RightArrowHeadContext;


  RightArrowHeadContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterRightArrowHead(this);
    }
  };

  RightArrowHeadContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitRightArrowHead(this);
    }
  };


  CypherParser.RightArrowHeadContext = RightArrowHeadContext;

  CypherParser.prototype.rightArrowHead = function () {

    var localctx = new RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CypherParser.RULE_rightArrowHead);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1145;
      _la = this._input.LA(1);
      if (!(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CypherParser.T__22 - 23)) | (1 << (CypherParser.T__45 - 23)) | (1 << (CypherParser.T__46 - 23)) | (1 << (CypherParser.T__47 - 23)) | (1 << (CypherParser.T__48 - 23)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  function DashContext(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dash;
    return this;
  }

  DashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
  DashContext.prototype.constructor = DashContext;


  DashContext.prototype.enterRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.enterDash(this);
    }
  };

  DashContext.prototype.exitRule = function (listener) {
    if (listener instanceof CypherListener) {
      listener.exitDash(this);
    }
  };


  CypherParser.DashContext = DashContext;

  CypherParser.prototype.dash = function () {

    var localctx = new DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CypherParser.RULE_dash);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1147;
      _la = this._input.LA(1);
      if (!(_la === CypherParser.T__14 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CypherParser.T__49 - 50)) | (1 << (CypherParser.T__50 - 50)) | (1 << (CypherParser.T__51 - 50)) | (1 << (CypherParser.T__52 - 50)) | (1 << (CypherParser.T__53 - 50)) | (1 << (CypherParser.T__54 - 50)) | (1 << (CypherParser.T__55 - 50)) | (1 << (CypherParser.T__56 - 50)) | (1 << (CypherParser.T__57 - 50)) | (1 << (CypherParser.T__58 - 50)) | (1 << (CypherParser.T__59 - 50)))) !== 0))) {
        this._errHandler.recoverInline(this);
      }
      else {
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  };

  return CypherParser;
}

},{}],4:[function(require,module,exports){
// Template has been taken from 
// https://github.com/umdjs/umd/blob/master/templates/returnExports.js

// Uses Node, AMD or browser globals to create a module.

// If you want something that will work in other stricter CommonJS environments,
// or if you need to create a circular dependency, see commonJsStrict.js

// Defines a module "returnExports" that depends another module called "b".
// Note that the name of the module is implied by the file name. It is best
// if the file name and the exported global have matching names.

// If the 'b' module also uses this type of boilerplate, then
// in the browser, it will create a global .b that is used below.

// If you do not want to support the browser global path, then you
// can remove the `root` use and the passing `this` as the first arg to
// the top function.


// if the module has no dependencies, the above pattern can be simplified to
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    //TODO this is not the UMD way, but for some reason it always detected module and exports in my scripts
    this.returnExports = factory();
    module.exports = root.returnExports;
  } else {
    // Browser globals (root is window)
    root.returnExports = factory();
  }
}(this, function () {
  var CypherLexer = require('./lib/CypherLexer.js');
  var CypherParser = require('./lib/CypherParser.js');
  var CypherListener = require('./lib/CypherListener');
  var antlr4 = require('antlr4');
  
  var listener = CypherListener(antlr4);

  // Just return a value to define the module export.
  // This example returns an object, but the module
  // can return a function as the exported value.
  return {
    CypherLexer: CypherLexer(antlr4),
    CypherParser: CypherParser(antlr4, listener),
    CypherListener: listener,
    antlr4: antlr4
    
  };
}));
},{"./lib/CypherLexer.js":1,"./lib/CypherListener":2,"./lib/CypherParser.js":3,"antlr4":45}],5:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = require('./Token').Token;
var Lexer = require('./Lexer').Lexer;
var Interval = require('./IntervalSet').Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1,
			Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1,
			Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;

},{"./IntervalSet":10,"./Lexer":12,"./Token":18}],6:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = require('./Token').CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;

},{"./Token":18}],7:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = require('./Token').Token;
var BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;
},{"./BufferedTokenStream":5,"./Token":18}],8:[function(require,module,exports){
//
//  [The "BSD license"]
//   Copyright (c) 2012 Terence Parr
//   Copyright (c) 2012 Sam Harwell
//   Copyright (c) 2014 Eric Vergnaud
//   All rights reserved.
// 
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions
//   are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. The name of the author may not be used to endorse or promote products
//      derived from this software without specific prior written permission.
// 
//   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
// 
var InputStream = require('./InputStream').InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

function FileStream(fileName) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;

},{"./InputStream":9,"fs":49}],9:[function(require,module,exports){
// 
//  [The "BSD license"]
//   Copyright (c) 2012 Terence Parr
//   Copyright (c) 2012 Sam Harwell
//   Copyright (c) 2014 Eric Vergnaud
//   All rights reserved.
// 
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions
//   are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. The name of the author may not be used to endorse or promote products
//      derived from this software without specific prior written permission.
// 
//   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

var Token = require('./Token').Token;

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	for (var i = 0; i < stream.strdata.length; i++) {
		stream.data.push(stream.strdata.charCodeAt(i));
	}
	stream._size = stream.data.length;
}

function InputStream(data) {
	this.name = "<empty>";
	this.strdata = data;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		return this.strdata.slice(start, stop + 1);
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;

},{"./Token":18}],10:[function(require,module,exports){
/*jslint smarttabs:true */

var Token = require('./Token').Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;

},{"./Token":18}],11:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var Set = require('./Utils').Set;
var BitSet = require('./Utils').BitSet;
var Token = require('./Token').Token;
var ATNConfig = require('./atn/ATNConfig').ATNConfig;
var Interval = require('./IntervalSet').Interval;
var IntervalSet = require('./IntervalSet').IntervalSet;
var RuleStopState = require('./atn/ATNState').RuleStopState;
var RuleTransition = require('./atn/Transition').RuleTransition;
var NotSetTransition = require('./atn/Transition').NotSetTransition;
var WildcardTransition = require('./atn/Transition').WildcardTransition;
var AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;

var pc = require('./PredictionContext');
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};
    
//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;


},{"./IntervalSet":10,"./PredictionContext":15,"./Token":18,"./Utils":19,"./atn/ATNConfig":21,"./atn/ATNState":26,"./atn/Transition":34}],12:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  this SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  this SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest
//  of speed.
///

var Token = require('./Token').Token;
var Recognizer = require('./Recognizer').Recognizer;
var CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;
var LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = '\u0000';
Lexer.MAX_CHAR_VALUE = '\uFFFE';

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
					this.notifyListeners(e); // report error
					this.recover(e);
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;

},{"./CommonTokenFactory":6,"./Recognizer":16,"./Token":18,"./error/Errors":43}],13:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  this SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  this SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var Token = require('./Token').Token;
var ParseTreeListener = require('./tree/Tree').ParseTreeListener;
var Recognizer = require('./Recognizer').Recognizer;
var DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;
var ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;
var ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = require('./Lexer').Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				listener.visitTerminal(node);
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;
},{"./Lexer":12,"./Recognizer":16,"./Token":18,"./atn/ATNDeserializationOptions":23,"./atn/ATNDeserializer":24,"./error/ErrorStrategy":42,"./tree/Tree":46}],14:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = require('./RuleContext').RuleContext;
var Tree = require('./tree/Tree');
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = require("./IntervalSet").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (type === null) {
		return this.children.length>=i ? this.children[i] : null;
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;
},{"./IntervalSet":10,"./RuleContext":17,"./tree/Tree":46}],15:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var RuleContext = require('./RuleContext').RuleContext;

function PredictionContext(cachedHashString) {
	this.cachedHashString = cachedHashString;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashString = function() {
	return this.cachedHashString;
};

function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}

function calculateEmptyHashString() {
	return "";
}

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashString = parent !== null ? calculateHashString(parent, returnState)
			: calculateEmptyHashString();
	PredictionContext.call(this, hashString);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashString() !== other.hashString()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.hashString = function() {
	return this.cachedHashString;
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === this.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var hash = calculateHashString(parents, returnStates);
	PredictionContext.call(this, hash);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashString !== other.hashString()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}

function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}

function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;

},{"./RuleContext":17}],16:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

var Token = require('./Token').Token;
var ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;
var ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.5.3";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.getRuleNames();
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;

},{"./Token":18,"./error/ErrorListener":41}],17:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = require('./tree/Tree').RuleNode;
var INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;
var INVALID_ALT_NUMBER = require('./atn/ATN').INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = require('./tree/Trees').Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};


},{"./atn/ATN":20,"./tree/Tree":46,"./tree/Trees":47}],18:[function(require,module,exports){
//[The "BSD license"]
// Copyright (c) 2012 Terence Parr
// Copyright (c) 2012 Sam Harwell
// Copyright (c) 2014 Eric Vergnaud
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;

},{}],19:[function(require,module,exports){
function arrayToString(a) {
	return "[" + a.join(", ") + "]";
}

String.prototype.hashCode = function(s) {
	var hash = 0;
	if (this.length === 0) {
		return hash;
	}
	for (var i = 0; i < this.length; i++) {
		var character = this.charCodeAt(i);
		hash = ((hash << 5) - hash) + character;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
};

function standardEqualsFunction(a,b) {
	return a.equals(b);
}

function standardHashFunction(a) {
	return a.hashString();
}

function Set(hashFunction, equalsFunction) {
	this.data = {};
	this.hashFunction = hashFunction || standardHashFunction;
	this.equalsFunction = equalsFunction || standardEqualsFunction;
	return this;
}

Object.defineProperty(Set.prototype, "length", {
	get : function() {
		return this.values().length;
	}
});

Set.prototype.add = function(value) {
	var hash = this.hashFunction(value);
	var key = "hash_" + hash.hashCode();
	if(key in this.data) {
		var i;
		var values = this.data[key];
		for(i=0;i<values.length; i++) {
			if(this.equalsFunction(value, values[i])) {
				return values[i];
			}
		}
		values.push(value);
		return value;
	} else {
		this.data[key] = [ value ];
		return value;
	}
};

Set.prototype.contains = function(value) {
	var hash = this.hashFunction(value);
	var key = hash.hashCode();
	if(key in this.data) {
		var i;
		var values = this.data[key];
		for(i=0;i<values.length; i++) {
			if(this.equalsFunction(value, values[i])) {
				return true;
			}
		}
	}
	return false;
};

Set.prototype.values = function() {
	var l = [];
	for(var key in this.data) {
		if(key.indexOf("hash_")===0) {
			l = l.concat(this.data[key]);
		}
	}
	return l;
};

Set.prototype.toString = function() {
	return arrayToString(this.values());
};

function BitSet() {
	this.data = [];
	return this;
}

BitSet.prototype.add = function(value) {
	this.data[value] = true;
};

BitSet.prototype.or = function(set) {
	var bits = this;
	Object.keys(set.data).map( function(alt) { bits.add(alt); });
};

BitSet.prototype.remove = function(value) {
	delete this.data[value];
};

BitSet.prototype.contains = function(value) {
	return this.data[value] === true;
};

BitSet.prototype.values = function() {
	return Object.keys(this.data);
};

BitSet.prototype.minValue = function() {
	return Math.min.apply(null, this.values());
};

BitSet.prototype.hashString = function() {
	return this.values().toString();
};

BitSet.prototype.equals = function(other) {
	if(!(other instanceof BitSet)) {
		return false;
	}
	return this.hashString()===other.hashString();
};

Object.defineProperty(BitSet.prototype, "length", {
	get : function() {
		return this.values().length;
	}
});

BitSet.prototype.toString = function() {
	return "{" + this.values().join(", ") + "}";
};

function AltDict() {
	this.data = {};
	return this;
}

AltDict.prototype.get = function(key) {
	key = "k-" + key;
	if(key in this.data){
		return this.data[key];
	} else {
		return null;
	}
};

AltDict.prototype.put = function(key, value) {
	key = "k-" + key;
	this.data[key] = value;
};

AltDict.prototype.values = function() {
	var data = this.data;
	var keys = Object.keys(this.data);
	return keys.map(function(key) {
		return data[key];
	});
};

function DoubleDict() {
	return this;
}

DoubleDict.prototype.get = function(a, b) {
	var d = this[a] || null;
	return d===null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function(a, b, o) {
	var d = this[a] || null;
	if(d===null) {
		d = {};
		this[a] = d;
	}
	d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
	s = s.replace("\t","\\t");
	s = s.replace("\n","\\n");
	s = s.replace("\r","\\r");
	if(escapeSpaces) {
		s = s.replace(" ","\u00B7");
	}
	return s;
}

exports.isArray = function (entity) {
	return Object.prototype.toString.call( entity ) === '[object Array]'
};

exports.titleCase = function(str) {
	return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1);});
};

exports.Set = Set;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;

},{}],20:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}
	
// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = require('./../Token').Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;
},{"./../IntervalSet":10,"./../LL1Analyzer":11,"./../Token":18}],21:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = require('./ATNState').DecisionState;
var SemanticContext = require('./SemanticContext').SemanticContext;

function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.
///
ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};

ATNConfig.prototype.shortHashString = function() {
    return "" + this.state.stateNumber + "/" + this.alt + "/" + this.semanticContext;
};

ATNConfig.prototype.hashString = function() {
    return "" + this.state.stateNumber + "/" + this.alt + "/" +
             (this.context===null ? "" : this.context.hashString()) +
             "/" + this.semanticContext.hashString();
};

ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);
    
    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.hashString = function() {
    return "" + this.state.stateNumber + this.alt + this.context +
            this.semanticContext + (this.passedThroughNonGreedyDecision ? 1 : 0) +
            this.lexerActionExecutor;
};

LexerATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (!(other instanceof LexerATNConfig)) {
        return false;
    } else if (this.passedThroughNonGreedyDecision !== other.passedThroughNonGreedyDecision) {
        return false;
    } else if (this.lexerActionExecutor ?
            !this.lexerActionExecutor.equals(other.lexerActionExecutor)
            : !other.lexerActionExecutor) {
        return false;
    } else {
        return ATNConfig.prototype.equals.call(this, other);
    }
};

LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;
},{"./ATNState":26,"./SemanticContext":33}],22:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = require('./ATN').ATN;
var Utils = require('./../Utils');
var Set = Utils.Set;
var SemanticContext = require('./SemanticContext').SemanticContext;
var merge = require('./../PredictionContext').merge;

function hashATNConfig(c) {
	return c.shortHashString();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	}
	if ( a===null || b===null ) {
		return false;
	}
	return a.state.stateNumber===b.state.stateNumber &&
		a.alt===b.alt && a.semanticContext.equals(b.semanticContext);
}


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashString = "-1";

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashString = "-1";
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ATNConfigSet)) {
		return false;
	}
	return this.configs !== null && this.configs.equals(other.configs) &&
			this.fullCtx === other.fullCtx &&
			this.uniqueAlt === other.uniqueAlt &&
			this.conflictingAlts === other.conflictingAlts &&
			this.hasSemanticContext === other.hasSemanticContext &&
			this.dipsIntoOuterContext === other.dipsIntoOuterContext;
};

ATNConfigSet.prototype.hashString = function() {
	if (this.readOnly) {
		if (this.cachedHashString === "-1") {
			this.cachedHashString = this.hashConfigs();
		}
		return this.cachedHashString;
	} else {
		return this.hashConfigs();
	}
};

ATNConfigSet.prototype.hashConfigs = function() {
	var s = "";
	this.configs.map(function(c) {
		s += c.toString();
	});
	return s;
};

Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashString = "-1";
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;

},{"./../PredictionContext":15,"./../Utils":19,"./ATN":20,"./SemanticContext":33}],23:[function(require,module,exports){
//[The "BSD license"]
// Copyright (c) 2013 Terence Parr
// Copyright (c) 2013 Sam Harwell
// Copyright (c) 2014 Eric Vergnaud
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;

},{}],24:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var Token = require('./../Token').Token;
var ATN = require('./ATN').ATN;
var ATNType = require('./ATNType').ATNType;
var ATNStates = require('./ATNState');
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Interval = require('./../IntervalSet').Interval;
var ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;
var LexerActions = require('./LexerAction');
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = BASE_SERIALIZED_UUID;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {
	
    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;
    
    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.index(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.index(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = this.readSets(atn);
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : -1;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }
    
    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn) {
    var sets = [];
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = this.readInt();
            var i2 = this.readInt();
            iset.addRange(i1, i2);
        }
    }
    return sets;
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;
    
    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }
    
    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//precedenceRuleDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.precedenceRuleDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();
	
ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};
   

exports.ATNDeserializer = ATNDeserializer;
},{"./../IntervalSet":10,"./../Token":18,"./ATN":20,"./ATNDeserializationOptions":23,"./ATNState":26,"./ATNType":27,"./LexerAction":29,"./Transition":34}],25:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {
	
    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;

},{"./../PredictionContext":15,"./../dfa/DFAState":38,"./ATNConfigSet":22}],26:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;
        

// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.precedenceRuleDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;

},{}],27:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {
	
}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;


},{}],28:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = require('./../Token').Token;
var Lexer = require('./../Lexer').Lexer;
var ATN = require('./ATN').ATN;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var RuleStopState = require('./ATNState').RuleStopState;
var LexerATNConfig = require('./ATNConfig').LexerATNConfig;
var Transition = require('./Transition').Transition;
var LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;
var LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (this.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (this.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (this.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (this.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (this.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (this.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (this.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, 0xFFFE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (this.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (this.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.getRuleNames()[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (this.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, 0xFFFF)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (this.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var hash = proposed.hashString();
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states[hash] || null;
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states[hash] = newState;
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;

},{"./../Lexer":12,"./../PredictionContext":15,"./../Token":18,"./../dfa/DFAState":38,"./../error/Errors":43,"./ATN":20,"./ATNConfig":21,"./ATNConfigSet":22,"./ATNSimulator":25,"./ATNState":26,"./LexerActionExecutor":30,"./Transition":34}],29:[function(require,module,exports){
//
 //[The "BSD license"]
 // Copyright (c) 2013 Terence Parr
 // Copyright (c) 2013 Sam Harwell
 // Copyright (c) 2014 Eric Vergnaud
 // All rights reserved.
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions
 // are met:
 //
 // 1. Redistributions of source code must retain the above copyright
 //    notice, this list of conditions and the following disclaimer.
 // 2. Redistributions in binary form must reproduce the above copyright
 //    notice, this list of conditions and the following disclaimer in the
 //    documentation and/or other materials provided with the distribution.
 // 3. The name of the author may not be used to endorse or promote products
 //    derived from this software without specific prior written permission.
 //
 // THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 // IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 // OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 // IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 // INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 // NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 // THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashString = function() {
    return "" + this.actionType;
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.hashString = function() {
	return "" + this.actionType + this.type;
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.hashString = function() {
    return "" + this.actionType + this.mode;
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.hashString = function() {
	return "" + this.actionType + this.mode;
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.hashString = function() {
    return "" + this.actionType + this.ruleIndex + this.actionIndex;
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.hashString = function() {
    return "" + this.actionType + this.channel;
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.hashString = function() {
    return "" + this.actionType + this.offset + this.action;
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;
},{}],30:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2013 Terence Parr
//  Copyright (c) 2013 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this._hashString = lexerActions.toString(); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashString = function() {
	return this._hashString;
};

LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this._hashString != other._hashString) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;

},{"./LexerAction":29}],31:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = require('./../Utils');
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = require('./ATN').ATN;
var ATNConfig = require('./ATNConfig').ATNConfig;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var Token = require('./../Token').Token;
var DFAState = require('./../dfa/DFAState').DFAState;
var PredPrediction = require('./../dfa/DFAState').PredPrediction;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var PredictionMode = require('./PredictionMode').PredictionMode;
var RuleContext = require('./../RuleContext').RuleContext;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var SemanticContext = require('./SemanticContext').SemanticContext;
var StarLoopEntryState = require('./ATNState').StarLoopEntryState;
var RuleStopState = require('./ATNState').RuleStopState;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var Interval = require('./../IntervalSet').Interval;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = require('./../error/Errors').NoViableAltException;

var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;
    
    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }
            // If this is not a precedence DFA, we check the ATN start state
            // to determine if this ATN start state is the decision for the
            // closure block that determines whether a precedence rule
            // should continue or complete.
            //
            if (!dfa.precedenceDfa && (dfa.atnStartState instanceof StarLoopEntryState)) {
                if (dfa.atnStartState.precedenceRuleDecision) {
                    dfa.setPrecedenceDfa(true);
                }
            }
            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.
    
    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};
    
ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};

// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
			if (!t.isEpsilon && closureBusy.add(c)!==c){
				// avoid infinite recursion for EOF* and EOF+
				continue;
			}
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};

ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        console.log("ACTION edge " + t.ruleIndex + ":" + t.actionIndex);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            return this.parser.literalNames[t] + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var names = this.parser===null ? null : this.parser.literalNames;
        console.log("DFA=\n" + dfa.toString(names));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var hash = D.hashString();
    var existing = dfa.states[hash] || null;
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states[hash] = D;
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};
    
// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};
            
exports.ParserATNSimulator = ParserATNSimulator;
},{"./../IntervalSet":10,"./../ParserRuleContext":14,"./../PredictionContext":15,"./../RuleContext":17,"./../Token":18,"./../Utils":19,"./../dfa/DFAState":38,"./../error/Errors":43,"./ATN":20,"./ATNConfig":21,"./ATNConfigSet":22,"./ATNSimulator":25,"./ATNState":26,"./PredictionMode":32,"./SemanticContext":33,"./Transition":34}],32:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = require('./../Utils').Set;
var BitSet = require('./../Utils').BitSet;
var AltDict = require('./../Utils').AltDict;
var ATN = require('./ATN').ATN;
var RuleStopState = require('./ATNState').RuleStopState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var ATNConfig = require('./ATNConfig').ATNConfig;
var SemanticContext = require('./SemanticContext').SemanticContext;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = {};
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        var key = "key_" + c.state.stateNumber + "/" + c.context;
        var alts = configToAlts[key] || null;
        if (alts === null) {
            alts = new BitSet();
            configToAlts[key] = alts;
        }
        alts.add(c.alt);
	}
	var values = [];
	for(var k in configToAlts) {
		if(k.indexOf("key_")!==0) {
			continue;
		}
		values.push(configToAlts[k]);
	}
    return values;
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;

},{"./../Utils":19,"./ATN":20,"./ATNConfig":21,"./ATNConfigSet":22,"./ATNState":26,"./SemanticContext":33}],33:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = require('./../Utils').Set;

function SemanticContext() {
	return this;
}

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.hashString = function() {
	return "" + this.ruleIndex + "/" + this.predIndex + "/" + this.isCtxDependent;
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.hashString = function() {
	return "31";
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.hashString = function() {
	return "" + this.opnds + "/AND";
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.hashString = function() {
	return "" + this.opnds + "/OR"; 
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;

},{"./../Utils":19}],34:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Predicate = require('./SemanticContext').Predicate;
var PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};
        

// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};
        

SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};
        
exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;
},{"./../IntervalSet":10,"./../Token":18,"./SemanticContext":33}],35:[function(require,module,exports){
exports.ATN = require('./ATN').ATN;
exports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;
exports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;
exports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;
exports.PredictionMode = require('./PredictionMode').PredictionMode;
},{"./ATN":20,"./ATNDeserializer":24,"./LexerATNSimulator":28,"./ParserATNSimulator":31,"./PredictionMode":32}],36:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

var DFAState = require('./DFAState').DFAState;
var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var DFASerializer = require('./DFASerializer').DFASerializer;
var LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;

function DFAStatesSet() {
	return this;
}

Object.defineProperty(DFAStatesSet.prototype, "length", {
	get : function() {
		return Object.keys(this).length;
	}
});

function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new DFAStatesSet();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	// states_ is a map of state/state, where key=value
	var keys = Object.keys(this._states);
	var list = [];
	for(var i=0;i<keys.length;i++) {
		list.push(this._states[keys[i]]);
	}
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;

},{"./../atn/ATNConfigSet":22,"./DFASerializer":37,"./DFAState":38}],37:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.

//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:

//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.

//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;


},{}],38:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var Utils = require('./../Utils');
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	if (this === other) {
		return true;
	} else if (!(other instanceof DFAState)) {
		return false;
	} else {
		return this.configs.equals(other.configs);
	}
};

DFAState.prototype.toString = function() {
	return "" + this.stateNumber + ":" + this.hashString();
};

DFAState.prototype.hashString = function() {
	return "" +  this.configs +
			(this.isAcceptState ?
					"=>" + (this.predicates !== null ?
								this.predicates :
								this.prediction) :
					"");
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;

},{"./../Utils":19,"./../atn/ATNConfigSet":22}],39:[function(require,module,exports){
exports.DFA = require('./DFA').DFA;
exports.DFASerializer = require('./DFASerializer').DFASerializer;
exports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;
exports.PredPrediction = require('./DFAState').PredPrediction;

},{"./DFA":36,"./DFASerializer":37,"./DFAState":38}],40:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = require('./../Utils').BitSet;
var ErrorListener = require('./ErrorListener').ErrorListener;
var Interval = require('./../IntervalSet').Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;
},{"./../IntervalSet":10,"./../Utils":19,"./ErrorListener":41}],41:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;


},{}],42:[function(require,module,exports){
//
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

var Token = require('./../Token').Token;
var Errors = require('./Errors');
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = require('./../atn/ATNState').ATNState;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ErrorStrategy() {
	
}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    if (la===Token.EOF || recognizer.atn.nextTokens(s).contains(la)) {
        return;
    }
    // Return but don't end recovery. only do that upon valid token match
    if(recognizer.isExpectedToken(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken, e.offendingToken));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};
    
// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;
},{"./../IntervalSet":10,"./../Token":18,"./../atn/ATNState":26,"./Errors":43}],43:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = require('./../atn/Transition').PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;

},{"./../atn/Transition":34}],44:[function(require,module,exports){
exports.RecognitionException = require('./Errors').RecognitionException;
exports.NoViableAltException = require('./Errors').NoViableAltException;
exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;
exports.InputMismatchException = require('./Errors').InputMismatchException;
exports.FailedPredicateException = require('./Errors').FailedPredicateException;
exports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;
exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;
exports.ErrorListener = require('./ErrorListener').ErrorListener;
},{"./DiagnosticErrorListener":40,"./ErrorListener":41,"./ErrorStrategy":42,"./Errors":43}],45:[function(require,module,exports){
exports.atn = require('./atn/index');
exports.dfa = require('./dfa/index');
exports.tree = require('./tree/index');
exports.error = require('./error/index');
exports.Token = require('./Token').Token;
exports.CommonToken = require('./Token').CommonToken;
exports.InputStream = require('./InputStream').InputStream;
exports.FileStream = require('./FileStream').FileStream;
exports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;
exports.Lexer = require('./Lexer').Lexer;
exports.Parser = require('./Parser').Parser;
var pc = require('./PredictionContext');
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;
exports.Interval = require('./IntervalSet').Interval;
exports.Utils = require('./Utils');

},{"./CommonTokenStream":7,"./FileStream":8,"./InputStream":9,"./IntervalSet":10,"./Lexer":12,"./Parser":13,"./ParserRuleContext":14,"./PredictionContext":15,"./Token":18,"./Utils":19,"./atn/index":35,"./dfa/index":39,"./error/index":44,"./tree/index":48}],46:[function(require,module,exports){
// [The "BSD license"]
//  Copyright (c) 2012 Terence Parr
//  Copyright (c) 2012 Sam Harwell
//  Copyright (c) 2014 Eric Vergnaud
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions
//  are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = require('../Utils.js');


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
	if (Utils.isArray(ctx)) {
		var self = this;
		return ctx.map(function(child) { return visitAtom(self, child)});
	} else {
		return visitAtom(this, ctx);
	}
};

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


var visitAtom = function(visitor, ctx) {
	if (ctx.parser === undefined) { //is terminal
		return;
	}

	var name = ctx.parser.ruleNames[ctx.ruleIndex];
	var funcName = "visit" + Utils.titleCase(name);

	return visitor[funcName](ctx);
};

function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;
},{"../Utils.js":19,"./../IntervalSet":10,"./../Token":18}],47:[function(require,module,exports){
/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var Utils = require('./../Utils');
var Token = require('./../Token').Token;
var RuleNode = require('./Tree').RuleNode;
var ErrorNode = require('./Tree').ErrorNode;
var TerminalNode = require('./Tree').TerminalNode;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var RuleContext = require('./../RuleContext').RuleContext;
var INVALID_ALT_NUMBER = require('./../atn/ATN').INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;
},{"./../ParserRuleContext":14,"./../RuleContext":17,"./../Token":18,"./../Utils":19,"./../atn/ATN":20,"./Tree":46}],48:[function(require,module,exports){
var Tree = require('./Tree');
exports.Trees = require('./Trees').Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;

},{"./Tree":46,"./Trees":47}],49:[function(require,module,exports){

},{}]},{},[4]);
